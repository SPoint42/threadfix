<?xml version="1.0" encoding="UTF-8"?>

<detailedreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd" report_format_version="1.4" app_name="Dynamic Sample Application" app_id="32714" version="1.0" build_id="45726" submitter="Veracode" platform="Not Specified" assurance_level="4" business_criticality="4" generation_date="2014-06-03 14:42:38 UTC" veracode_level="VL1" total_flaws="17" flaws_not_mitigated="17" teams="" life_cycle_stage="Not Specified" planned_deployment_date="" last_update_time="2012-03-08 17:00:06 UTC" is_latest_build="true" policy_name="Veracode Transitional High" policy_version="1" policy_compliance_status="Pass" policy_rules_status="Pass" grace_period_expired="false" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="demo">
<dynamic-analysis rating="C" score="88" submitted_date="2012-03-08 16:54:22 UTC" published_date="2012-03-08 17:00:05 UTC" dynamic_scan_type="ds">
<modules>
<module name="dynamic_analysis" compiler="Unknown" os="" architecture="" loc="0" score="88" numflawssev0="0" numflawssev1="0" numflawssev2="6" numflawssev3="7" numflawssev4="3" numflawssev5="1" target_url="http://www.example.com/amalgam" domain="example.com"/>
</modules>
</dynamic-analysis>
<severity level="5">
<category categoryid="18" categoryname="OS Command Injection" pcirelated="true">
<desc>
<para text="OS command injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct and execute a system command.  This allows an attacker to either alter the command executed by the application or append additional commands.  The command is typically executed with the privileges of the executing process and gives an attacker a privilege or capability that he would not otherwise have."/>
</desc>
<recommendations>
<para text="Careful handling of all untrusted data is critical in preventing OS command injection attacks.   Using one or more of the following techniques provides defense-in-depth and minimizes the likelihood of an vulnerability.">
<bulletitem text="If possible, use library calls rather than external processes to recreate the desired functionality."/>
<bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
<bulletitem text="Select safe API routines.  Some APIs that execute system commands take an array of strings as input rather than a single string, which protects against some forms of command injection by ensuring that a user-supplied argument cannot be interpreted as part of the command."/>
</para>
</recommendations>
<cwe cweid="78" cwename="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" pcirelated="true" owasp="929" sans="801" certc="741" certcpp="875" certjava="845">
<description>
<text text="This call contains a command injection flaw.  The argument to the function is constructed using user-supplied input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
</description>
<dynamicflaws>
<flaw severity="5" categoryname="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" count="1" issueid="3" module="dynamic_analysis" type="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" description="It is possible to execute arbitrary OS commands at http://10.0.4.148/smoketest/oscommandinjection/oscmd_get.php?command=bar%26ping.exe%3c%261127.0.0.1%26ping.exe%3c%261127.0.0.1%26ping.exe%3c%261127.0.0.1 by injecting bar&amp;ping.exe&lt;&amp;1127.0.0.1&amp;ping.exe&lt;&amp;1127.0.0.1&amp;ping.exe&lt;&amp;1127.0.0.1 into the value bar of URI query parameter command at position 0 parameter. OS command injection attacks are exploited by using shell meta characters to escape, or break out of, the hardcoded command and issue additional commands on the system.

Do not allow the end user to submit data which will be used in constructing OS commands to be executed. If it is necessary to use user input, properly escape shell meta characters before including the input in operating system commands. Most APIs that execute system commands also have a &quot;safe&quot; version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=78) 
OWASP (http://www.owasp.org/index.php/Command_Injection) 
WASC (http://webappsec.pbworks.com/OS-Commanding)

" note="" cweid="78" remediationeffort="3" categoryid="18" pcirelated="true" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="ccp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.0.4.148/smoketest/oscommandinjection/oscmd_get.php?command=bar%26ping.exe%3c%261127.0.0.1%26ping.exe%3c%261127.0.0.1%26ping.exe%3c%261127.0.0.1" vuln_parameter="command"/>
</dynamicflaws>
</cwe>
</category>
</severity>
<severity level="4">
<category categoryid="11" categoryname="Authentication Issues" pcirelated="true">
<desc>
<para text="Authentication is the process of attempting to verify the digital identity of the sender of a communication such as a request to login to an application. Authentication is a way to ensure users are who they claim to be and that the user who attempts to perform functions in a system is in fact the user who is authorized to do so.  When an application does not properly ensure that the user has proven their identity or provides a way to bypass or circumvent the authentication process, the security of the application is compromised."/>
</desc>
<recommendations>
<para text="When using password systems, implement strong password complexity requirements to evade brute force attacks, and ensure that accounts with default or predictable credentials are removed from production systems.  Re-authenticate users for high-value transactions and access to protected areas.  Use the most appropriate form of authentication for the assets being protected, e.g. multi-factor authentication for high assurance applications."/>
</recommendations>
<cwe cweid="287" cwename="Improper Authentication" pcirelated="true" owasp="930">
<description>
<text text="A valid username and password combination was discovered for the application. Default passwords and trivial passwords expose an application to unauthorized access. If a user chooses a very insecure password, then that user's account information can be compromised and the account can be used to attempt to compromise the application."/>
</description>
<dynamicflaws>
<flaw severity="4" categoryname="Improper Authentication" count="1" issueid="15" module="dynamic_analysis" type="Improper Authentication" description="It was possible to login to the application with commonly-used credentials: username &quot;administrator&quot;, password &quot;administrator&quot;.

Purge predictable accounts and ensure that password complexity requirements follow security best practices or adhere to your organization's password policy.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=287) 
OWASP (http://www.owasp.org/index.php/Testing_for_Brute_Force) 
WASC (http://webappsec.pbworks.com/Brute-Force)

" note="" cweid="287" remediationeffort="2" categoryid="11" pcirelated="true" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://www.example.com/amalgam"/>
</dynamicflaws>
</cwe>
</category>
<category categoryid="25" categoryname="Insufficient Input Validation" pcirelated="true">
<desc>
<para text="Weaknesses in this category are related to an absent or incorrect protection mechanism that fails to properly validate input that can affect the control flow or data flow of a program."/>
</desc>
<recommendations>
<para text="Validate input from untrusted sources before it is used. The untrusted data sources may include HTTP requests, file systems, databases, and any external systems that provide data to the application. In the case of HTTP requests, validate all parts of the request, including headers, form fields, cookies, and URL components that are used to transfer information from the browser to the server side application."/>
<para text="Duplicate any client-side checks on the server side. This should be simple to implement in terms of time and difficulty, and will greatly reduce the likelihood of insecure parameter values being used in the application."/>
</recommendations>
<cwe cweid="434" cwename="Unrestricted Upload of File with Dangerous Type" pcirelated="true" sans="801">
<description>
<text text="The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment."/>
</description>
<dynamicflaws>
<flaw severity="4" categoryname="Unrestricted Upload of File with Dangerous Type" count="1" issueid="8" module="dynamic_analysis" type="Unrestricted Upload of File with Dangerous Type" description="The HTTP PUT method is enabled at http://10.10.31.201/vx3sphp/testcases/434-WebDav/. This allows anyone who is able to access this directory to upload arbitrary files to the web server. It was possible to upload &lt;file&gt; to http://10.10.31.201/vx3sphp/testcases/434-WebDav/.

In Apache, disable the PUT method by removing it from the Limit or LimitExcept directive. Or ensure that only valid users are allowed to PUT files by adding in the Limit directive &quot;require valid-user&quot;. More information for Apache can be found here http://httpd.apache.org/docs/2.2/mod/core.html#limit and http://httpd.apache.org/docs/2.2/mod/mod_dav.html.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=434)

" note="" cweid="434" remediationeffort="2" categoryid="25" pcirelated="false" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.10.31.201/vx3sphp/testcases/434-WebDav/7d355c03391a4506a48f462e328ada32"/>
</dynamicflaws>
</cwe>
</category>
<category categoryid="19" categoryname="SQL Injection" pcirelated="true">
<desc>
<para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
</desc>
<recommendations>
<para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
<bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
<bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
<bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded (%xx), HTML-encoded (&amp;#xx;), or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
<bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
</para>
</recommendations>
<cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" pcirelated="true" owasp="929" sans="801">
<description>
<text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
</description>
<dynamicflaws>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="11" module="dynamic_analysis" type="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" description="By injecting long-running SQL queries such as postal|7c||7c|trim(chr(32))|7c||7c|(select(pg_sleep(15))where(true)) into value postal of application/x-www-form-urlencoded body parameter col at position 0 it was possible to exploit SQL Injection attacks by means of timing attacks. SQL Injection based timing attacks are designed to determine vulnerability of a system by inferring how long a query or series of queries take to execute. This technique is commonly used when error reporting has been properly implemented and does not display SQL errors to end users.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=89) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" categoryid="19" pcirelated="true" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.10.31.201/vx3sphp/testcases/89/body-blind-select-pgsql-column-injection.php" vuln_parameter="col"/>
</dynamicflaws>
</cwe>
</category>
</severity>
<severity level="3">
<category categoryid="21" categoryname="CRLF Injection" pcirelated="false">
<desc>
<para text="The acronym CRLF stands for &quot;Carriage Return, Line Feed&quot; and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  "/>
</desc>
<recommendations>
<para text="Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents."/>
</recommendations>
<cwe cweid="113" cwename="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" pcirelated="false">
<description>
<text text="A function call contains an HTTP response splitting flaw.  Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks."/>
</description>
<dynamicflaws>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="12" module="dynamic_analysis" type="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" description="It is possible to inject new line characters into value 8841855162veracode of URI query parameter crlf at position 0. Injecting carriage return line feed (CRLF) sequences allows an attacker to manipulate the HTTP response rendered by the browser to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.

Escape, encode, or remove carriage return and line feed characters from user-supplied data before inclusion in HTTP response headers.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=113) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" categoryid="21" pcirelated="false" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.0.4.148/plugintest/handle113.php?crlf=%d%aWarning%3a+a1052ca94a1e4407ae8efaaa6c0bcc98" vuln_parameter="crlf"/>
</dynamicflaws>
</cwe>
</category>
<category categoryid="10" categoryname="Credentials Management" pcirelated="true">
<desc>
<para text="Improper management of credentials, such as usernames and passwords, may compromise system security.  In particular, storing passwords in plaintext or hard-coding passwords directly into application code are design issues that cannot be easily remedied.  Not only does embedding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult.  Once the code is in production, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack, putting customers at risk."/>
<para text="One variation on hard-coding plaintext passwords is to hard-code a constant string which is the result of a cryptographic one-way hash.  For example, instead of storing the word &quot;secret,&quot; the application stores an MD5 hash of the word.  This is a common mechanism for obscuring hard-coded passwords from casual viewing but does not significantly reduce risk.  However, using cryptographic hashes for data stored outside the application code can be an effective practice."/>
</desc>
<recommendations>
<para text="Avoid storing passwords in easily accessible locations, and never store any type of sensitive data in plaintext.  Avoid using hard-coded usernames, passwords, or hash constants whenever possible, particularly in relation to security-critical components.   Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in alternate locations such as configuration or properties files."/>
</recommendations>
<cwe cweid="522" cwename="Insufficiently Protected Credentials" pcirelated="true" owasp="930">
<description>
<text text="This weakness occurs when the application transmits or stores authentication credentials and uses an insecure method that is susceptible to unauthorized interception and/or retrieval.  In addition to a username/password, credentials may also be an artifact of the authentication process such as a session identifier, which, once issued, becomes an authentication token for as long as it is valid."/>
</description>
<dynamicflaws>
<flaw severity="3" categoryname="Insufficiently Protected Credentials" count="1" issueid="13" module="dynamic_analysis" type="Insufficiently Protected Credentials" description="The URL http://10.10.31.204:8080/bcat-v3/login.do;jsessionid=7796BAF0E13DDBEBE6E07743754E01E3 appears to contain the session identifier of jsessionid. Embedding session identifiers in the URL can lead to session hijacking and other privacy violations as the cookies will be sent in Referer headers and are stored in server and intermediary proxy logs.

Do not embed session identifiers into the URL. Instead, use cookies for session management.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=522)

" note="" cweid="522" remediationeffort="2" categoryid="10" pcirelated="true" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.10.31.204:8080/bcat-v3/login.do;jsessionid=7796BAF0E13DDBEBE6E07743754E01E3"/>
</dynamicflaws>
</cwe>
</category>
<category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="true">
<desc>
<para text="Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
<para text="XSS vulnerabilities can be either persistent or transient (often referred to as stored and reflected, respectively).  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
</desc>
<recommendations>
<para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
<bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code (a common technique in Web 2.0 applications), additional restrictions may be necessary beyond simple HTML encoding."/>
<bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
<bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
</para>
</recommendations>
<cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" pcirelated="true" owasp="931" sans="79">
<description>
<text text="This call contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
</description>
<dynamicflaws>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="9" module="dynamic_analysis" type="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" description="It is possible to inject arbitrary HTML tags such as &quot;&lt;/script&gt;&lt;script&gt;pholcidCallback(8833816912)&lt;/script&gt; into the value eula.html of URI query parameter file at position 0 parameter on http://10.10.31.201/vx3sphp/testcases/23/url-query-read-file-traversal-filter-slashdotdotslash.php?file=eula.html which can result in script code being executed on http://10.10.31.201/vx3sphp/testcases/23/url-query-read-file-traversal-filter-slashdotdotslash.php?file=%22%3c%2fscript%3e%3cscript%3epholcidCallback%288833816912%29%3c%2fscript%3e. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=80) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.10.31.201/vx3sphp/testcases/23/url-query-read-file-traversal-filter-slashdotdotslash.php?file=%22%3c%2fscript%3e%3cscript%3epholcidCallback%288833816912%29%3c%2fscript%3e" vuln_parameter="file"/>
</dynamicflaws>
</cwe>
</category>
<category categoryid="26" categoryname="Deployment Configuration" pcirelated="false">
<desc>
<para text="A deployment descriptor is a component in J2EE applications that describes how a web application should be deployed. It directs a deployment tool to deploy a module or application with specific container options and describes specific configuration requirements that a deployer must resolve.  Deployment descriptors are part of the packaged application and are usually formatted as XML files.  Failing to properly lock down the web.xml file or other files that define components and operating parameters for the web application can reduce the security of the application."/>
</desc>
<recommendations>
<para text="Remove all unnecessary functionality from deployment descriptors, including servlets, servlet mappings, extension mappings, etc.  Only elements that are required for the application to function should remain."/>
</recommendations>
<cwe cweid="668" cwename="Exposure of Resource to Wrong Sphere" pcirelated="false">
<description>
<text text="The product exposes a resource to the wrong sphere, in ways that are not related to incorrectly specified permissions."/>
</description>
<dynamicflaws>
<flaw severity="3" categoryname="Exposure of Resource to Wrong Sphere" count="1" issueid="1" module="dynamic_analysis" type="Exposure of Resource to Wrong Sphere" description="In crossdomain.xml, by setting a wildcard in the domain, any Flash resource is allowed to access resources on this site.

Limit the domains which can access your Flash resources, by setting a specific domain in &quot;allow-access-from&quot; in the crossdomain.xml file.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=668)

" note="" cweid="668" remediationeffort="1" categoryid="26" pcirelated="false" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://tracker.swfstats.com/crossdomain.xml"/>
</dynamicflaws>
</cwe>
</category>
<category categoryid="1" categoryname="Directory Traversal" pcirelated="true">
<desc>
<para text="Allowing user input to control paths used in filesystem operations may enable an attacker to access or modify otherwise protected system resources that would normally be inaccessible to end users.  In some cases, the user-provided input may be passed directly to the filesystem operation, or it may be concatenated to one or more fixed strings to construct a fully-qualified path."/>
<para text="When an application improperly cleanses special character sequences in user-supplied filenames, a path traversal (or directory traversal) vulnerability may occur.  For example, an attacker could specify a filename such as &quot;../../etc/passwd&quot;, which resolves to a file outside of the intended directory that the attacker would not normally be authorized to view."/>
</desc>
<recommendations>
<para text="Assume all user-supplied input is malicious.  Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters and ensure that the end result is not dangerous."/>
</recommendations>
<cwe cweid="22" cwename="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" pcirelated="true" owasp="932" sans="802" certc="743" certcpp="877">
<description>
<text text="The software, when constructing file or directory names from input, does not properly sanitize special character sequences that resolve to a file or directory name that is outside of the intended directory or directories."/>
</description>
<dynamicflaws>
<flaw severity="3" categoryname="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" count="1" issueid="2" module="dynamic_analysis" type="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" description="It is possible to access arbitrary files at http://10.10.31.201/cubecart/account.php? by injecting ../../../../../../../../../../etc/passwd into the value English.inc.php of application/x-www-form-urlencoded body parameter language at position 0 parameter. By exploiting directory traversal attacks, an attacker can download and read arbitrary files from the file system.

Never use client supplied input when constructing file system paths. Consider creating a server side map of the necessary files and using integer values as an index. This way an attacker can never directly attempt to change the file path and is limited to only accessing files that are mappable by the index number. Such a mapping would also need to respect any existing authorization mechanisms in place.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=22)

" note="" cweid="22" remediationeffort="2" categoryid="1" pcirelated="true" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.10.31.201/cubecart/account.php?" vuln_parameter="language"/>
</dynamicflaws>
</cwe>
</category>
<category categoryid="27" categoryname="Server Configuration" pcirelated="false">
<desc>
<para text="The application's supporting infrastructure, including web servers and application servers, can impact the security of the deployed application.  Failing to lock down a server, for example, can result in information leaks via error pages, stack traces, or unnecessary files left in a web-accessible directory.  Even though these servers are not part of the application codebase, they create insecurities in the environment which contribute to overall risk."/>
</desc>
<recommendations>
<para text="Remove all extraneous files, including demonstration applications and sample code, from production systems. Configure production servers with the minimum set of services required for the application to function, and ensure that information leaks do not occur via server-generated error pages."/>
<para text="Audit any third party dependencies or services that are deployed by default to ensure that they do not compromise the security of the application being supported."/>
</recommendations>
<cwe cweid="757" cwename="Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')" pcirelated="false">
<description>
<text text="A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties."/>
</description>
<dynamicflaws>
<flaw severity="3" categoryname="Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')" count="1" issueid="16" module="dynamic_analysis" type="Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')" description="SSLv2 is running on 10.10.31.204:9004. This version of the SSL protocol is outdated and suffers from multiple cryptographic flaws. Attackers situated between the victim and the target application could intercept sensitive traffic by exploiting Man In The Middle (MITM) attacks.

SSLv2 should be completely disabled from the application server as it is no longer secure.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=757)

" note="" cweid="757" remediationeffort="1" categoryid="27" pcirelated="false" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="https://10.10.31.204:9004/"/>
</dynamicflaws>
</cwe>
</category>
<category categoryid="15" categoryname="Session Fixation" pcirelated="true">
<desc>
<para text="Authenticating a user without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.  Session fixation vulnerabilities occur when: ">
<bulletitem text="A web application authenticates a user without first invalidating the existing session ID, thereby continuing to use the session ID already associated with the user."/>
<bulletitem text="An attacker is able to force a known session ID on a user so that, once the user authenticates, the attacker has access to the authenticated session."/>
</para>
<para text="In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to authenticate against the server using the same session identifier, giving the attacker access to the user's account through the active session.  A similar, passive version of this attack could be carried out by sniffing the session identifier at some point between the victim and the server prior to authentication."/>
<para text="Failing to destroy a session once a user has logged out, or failing to provide a mechanism for logging out of the application, is another form of session fixation. "/>
</desc>
<recommendations>
<para text="Invalidate any existing session after the user has authenticated and issue a new session identifier.  Also, invalidate the session object when a user logs out, otherwise the session will remain valid on the server."/>
</recommendations>
<cwe cweid="384" cwename="Session Fixation" pcirelated="true" owasp="930">
<description>
<text text="The application never invalidates user sessions, which can lead to session fixation attacks.  As a result, the session identifier stays the same before, during, and after a user has logged in or out.  An attacker may attempt to force a user into using a specific session identifier, then hijack the session once the user has logged in."/>
</description>
<dynamicflaws>
<flaw severity="3" categoryname="Session Fixation" count="1" issueid="14" module="dynamic_analysis" type="Session Fixation" description="The application does not invalidate cookie values after a successful login. As a result, the session identifier stays the same before, during, and after a user has logged in or out. An attacker may attempt to force a user into using a specific session identifier, then hijack the session once the user has logged in. The login cookie was found to be vulnerable to this problem.

Never allow clients to specify their own cookie or session values. During the login sequence, previously issued sessions should be invalidated and a new session identifer generated and assigned to the user.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=384) 
OWASP (http://www.owasp.org/index.php/Session_Fixation) 
WASC (http://webappsec.pbworks.com/Session-Fixation)

" note="" cweid="384" remediationeffort="2" categoryid="15" pcirelated="true" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://www.example.com/amalgam"/>
</dynamicflaws>
</cwe>
</category>
</severity>
<severity level="2">
<category categoryid="28" categoryname="Code Injection" pcirelated="true">
<desc>
<para text="Code injection is the process of injecting untrusted input into an application that dynamically evalutes and executes the input as code.  Common examples of code injection include Remote File Includes and Eval Injection into applications implemented in an interpreted language such as PHP."/>
</desc>
<recommendations>
<para text="Do not allow untrusted input to be evaluated or otherwise interpreted as code."/>
</recommendations>
<cwe cweid="830" cwename="Inclusion of Web Functionality from an Untrusted Source" pcirelated="true">
<description>
<text text="The software includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the software, potentially granting total access and control of the software to the untrusted source."/>
</description>
<dynamicflaws>
<flaw severity="2" categoryname="Inclusion of Web Functionality from an Untrusted Source" count="1" issueid="17" module="dynamic_analysis" type="Inclusion of Web Functionality from an Untrusted Source" description="A Flash object on the page contains AllowScriptAccess=&quot;always&quot; property.

Restrict AllowScriptAccess to values such as &quot;never&quot; or &quot;sameDomain&quot; so an embedded Flash object from an external source cannot access scripts or data from your domain. Removing the AllowScriptAccess property altogether will set it to &quot;sameDomain&quot; by default.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=830)

" note="" cweid="830" remediationeffort="1" categoryid="28" pcirelated="false" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.10.31.204:11002/subdir/flash.rpy?access=all&amp;domain=external&amp;type=swfobject&amp;tag=none"/>
</dynamicflaws>
</cwe>
</category>
<category categoryid="10" categoryname="Credentials Management" pcirelated="false">
<desc>
<para text="Improper management of credentials, such as usernames and passwords, may compromise system security.  In particular, storing passwords in plaintext or hard-coding passwords directly into application code are design issues that cannot be easily remedied.  Not only does embedding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult.  Once the code is in production, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack, putting customers at risk."/>
<para text="One variation on hard-coding plaintext passwords is to hard-code a constant string which is the result of a cryptographic one-way hash.  For example, instead of storing the word &quot;secret,&quot; the application stores an MD5 hash of the word.  This is a common mechanism for obscuring hard-coded passwords from casual viewing but does not significantly reduce risk.  However, using cryptographic hashes for data stored outside the application code can be an effective practice."/>
</desc>
<recommendations>
<para text="Avoid storing passwords in easily accessible locations, and never store any type of sensitive data in plaintext.  Avoid using hard-coded usernames, passwords, or hash constants whenever possible, particularly in relation to security-critical components.   Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in alternate locations such as configuration or properties files."/>
</recommendations>
<cwe cweid="359" cwename="Privacy Violation" pcirelated="false" certjava="857">
<description>
<text text="Mishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."/>
</description>
<dynamicflaws>
<flaw severity="2" categoryname="Exposure of Private Information ('Privacy Violation')" count="1" issueid="7" module="dynamic_analysis" type="Privacy Violation" description="An e-mail address was detected: idawson@veracode.com. Content scrapers and spammers frequently crawl web sites looking for e-mail addresses.

Ensure this e-mail address is intended for public consumption. Otherwise, do not expose personally identifiable information such as e-mail addresses in the content of your application.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=359)

" note="" cweid="359" remediationeffort="2" categoryid="10" pcirelated="false" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.10.31.201/vx3sphp/cheatsheet.php"/>
</dynamicflaws>
</cwe>
</category>
<category categoryid="8" categoryname="Information Leakage" pcirelated="true">
<desc>
<para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product's own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
<para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to:">
<bulletitem text="Source code disclosure"/>
<bulletitem text="Browsable directories"/>
<bulletitem text="Log files or backup files in web-accessible directories"/>
<bulletitem text="Unfiltered backend error messages"/>
<bulletitem text="Exception stack traces"/>
<bulletitem text="Server version information"/>
<bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
</para>
</desc>
<recommendations>
<para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
<para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application's web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
</recommendations>
<cwe cweid="530" cwename="Exposure of Backup File to an Unauthorized Control Sphere" pcirelated="true">
<description>
<text text="A backup file was discovered. Binary archives or application files with an alternate file extension may expose source code and application logic to an attacker. If a script's file extension does not match an application extension (such as .asp, .jsp, or .php), then the server usually considers the file equivalent to plain text. When this happens, the server presents the user with the raw source code of the file instead of executing the script and providing interpreted output. Depending on the content of the script file, the exposure of data varies between simple function calls to database connection credentials to administration passwords."/>
</description>
<dynamicflaws>
<flaw severity="2" categoryname="Exposure of Backup File to an Unauthorized Control Sphere" count="1" issueid="4" module="dynamic_analysis" type="Exposure of Backup File to an Unauthorized Control Sphere" description="The backup file at /vx3sphp.old is exposed to users who can guess its existence due to a predictable naming convention. Depending on the contents of this file or files, this can have various levels of risk, e.g. source code disclosure or loss of intellecual property.

Ensure that backup files are located outside of the web root so they are not accessible to the general public.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=530) 
OWASP (http://www.owasp.org/index.php/Testing_for_old_file) 
WASC (http://webappsec.pbworks.com/Predictable-Resource-Location)

" note="" cweid="530" remediationeffort="1" categoryid="8" pcirelated="false" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.10.31.201/vx3sphp.old"/>
</dynamicflaws>
</cwe>
<cwe cweid="215" cwename="Information Exposure Through Debug Information" pcirelated="false">
<description>
<text text="The TRACE verb supported by most web servers can be manipulated to produce a cross-site scripting attack that results in sending arbitrary HTML to the victim's browser. The TRACE verb is designed to echo a user's input and intended for debugging or testing a web server. The TRACE verb is not generally required for web applications to function."/>
<text text="An attacker will usually exploit Cross-Site Tracing (XST) in conjuction with a Cross-Site Scripting (XSS) vulnerability on a separate website.  However, XST is caused by the web server configuration whereas XSS is a flaw in the web application itself."/>
</description>
<dynamicflaws>
<flaw severity="2" categoryname="Information Exposure Through Debug Information" count="1" issueid="5" module="dynamic_analysis" type="Information Exposure Through Debug Information" description="The HTTP TRACE method is enabled at http://10.10.31.201/. The TRACE method is a debug method and should not be enabled in production systems.

For Apache web servers set the TraceEnable directive to off. More information can be found at http://httpd.apache.org/docs/2.2/mod/core.html#traceenable.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=215) 
WASC (http://webappsec.pbworks.com/Server-Misconfiguration)

" note="" cweid="215" remediationeffort="1" categoryid="8" pcirelated="false" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.10.31.201/"/>
</dynamicflaws>
</cwe>
<cwe cweid="548" cwename="Information Exposure Through Directory Listing" pcirelated="true">
<description>
<text text="A full directory listing is inappropriately exposed, yielding potentially sensitive information to attackers, including file names, and directory structures. This directory listing gives a potential attacker a listing of the files in this directory and the ability to browse sub-directories. Files containing potentially sensitive information is usually exposed through this vulnerability."/>
</description>
<dynamicflaws>
<flaw severity="2" categoryname="Information Exposure Through Directory Listing" count="1" issueid="10" module="dynamic_analysis" type="Information Exposure Through Directory Listing" description="It was possible to list the contents of the directory at http://10.10.31.201/vx3sphp/testcases/23/ due to directory browsing being allowed. This configuration often exposes files that are not meant to be visible to the general public.

In Apache all directory element's &quot;Options&quot; setting should have Indexes value set to &quot;-Indexes&quot;. More information can be found at http://httpd.apache.org/docs/current/mod/core.html#options.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=548) 
OWASP (http://www.owasp.org/index.php/File_System) 
WASC (http://webappsec.pbworks.com/Directory-Indexing)

" note="" cweid="548" remediationeffort="1" categoryid="8" pcirelated="false" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.10.31.201/vx3sphp/testcases/23/"/>
</dynamicflaws>
</cwe>
<cwe cweid="526" cwename="Information Exposure Through Environmental Variables" pcirelated="false">
<description>
<text text="This web server appears to be in a default configuration. Default configurations of web servers often provide too much information about their platform and version in HTTP headers and on error pages. This data is not itself dangerous, but it can help an attacker focus on vulnerabilities associated with your specific web server platform/version."/>
</description>
<dynamicflaws>
<flaw severity="2" categoryname="Information Exposure Through Environmental Variables" count="1" issueid="6" module="dynamic_analysis" type="Information Exposure Through Environmental Variables" description="X-Powered-By headers provide no benefit and leak supported technologies and version information.

In PHP remove the X-Powered-By header by setting &quot;expose_php = Off&quot;. More information can be found at http://www.php.net/manual/en/ini.core.php.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=526) 
Microsoft (http://www.microsoft.com/technet/security/prodtech/IIS.mspx) 
OWASP (http://www.owasp.org/index.php/Testing_for_Web_Application_Fingerprint) 
WASC (http://webappsec.pbworks.com/Server-Misconfiguration)

" note="" cweid="526" remediationeffort="1" categoryid="8" pcirelated="false" date_first_occurrence="2012-03-08 16:53:42 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http://10.10.31.201/vx3sphp/"/>
</dynamicflaws>
</cwe>
</category>
</severity>
<severity level="1"/>
<severity level="0"/>
<flaw-status new="17" reopen="0" open="0" fixed="0" total="17" not_mitigated="17" sev-1-change="0" sev-2-change="6" sev-3-change="7" sev-4-change="3" sev-5-change="1"/>
</detailedreport>
