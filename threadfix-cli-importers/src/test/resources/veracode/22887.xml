<?xml version="1.0" encoding="UTF-8"?>

<detailedreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd" report_format_version="1.4" app_name="Roller" app_id="20366" first_build_submitted_date="2011-03-16 18:08:50 UTC" version="3.0" build_id="22887" submitter="Veracode" platform="Java" assurance_level="4" business_criticality="4" generation_date="2014-06-03 14:43:40 UTC" veracode_level="VL1" total_flaws="269" flaws_not_mitigated="269" teams="" life_cycle_stage="Deployed (In production and actively developed)" planned_deployment_date="" last_update_time="2011-03-17 01:45:58 UTC" is_latest_build="true" policy_name="Veracode Transitional High" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="" legacy_scan_engine="false">
<static-analysis rating="D" score="57" submitted_date="2011-03-16 18:03:18 UTC" published_date="2011-03-17 01:45:56 UTC" analysis_size_bytes="12256052">
<modules>
<module name="roller-orig.war" compiler="JAVAC_5" os="Java J2SE 6" architecture="JVM" loc="351755" score="0" numflawssev0="0" numflawssev1="0" numflawssev2="11" numflawssev3="251" numflawssev4="7" numflawssev5="0"/>
</modules>
</static-analysis>
<severity level="5"/>
<severity level="4">
<category categoryid="19" categoryname="SQL Injection" pcirelated="true">
<desc>
<para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
</desc>
<recommendations>
<para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
<bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
<bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
<bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded (%xx), HTML-encoded (&amp;#xx;), or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
<bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
</para>
</recommendations>
<cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" pcirelated="true" owasp="929" sans="801">
<description>
<text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
</description>
<staticflaws>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="155" module="roller-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable entryid. The tainted data originated from an earlier call to java.sql.Statement.executeQuery.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConsistencyCheck.java" line="213" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.ConsistencyCheck" functionprototype="void correctWeblogEntries(java.sql.Connection)" functionrelativelocation="45">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="146" module="roller-orig.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate() contains tainted data from the variables rootid, and entryid. The tainted data originated from an earlier call to java.sql.Statement.executeQuery.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConsistencyCheck.java" line="220" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.ConsistencyCheck" functionprototype="void correctWeblogEntries(java.sql.Connection)" functionrelativelocation="93">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="238" module="roller-orig.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate() contains tainted data from the variables websiteid, and rootid. The tainted data originated from an earlier call to java.sql.Statement.executeQuery.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConsistencyCheck.java" line="234" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.ConsistencyCheck" functionprototype="void correctWebsites(java.sql.Connection)" functionrelativelocation="45">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="139" module="roller-orig.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate() contains tainted data from the variables websiteid, and rootid. The tainted data originated from an earlier call to java.sql.Statement.executeQuery.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConsistencyCheck.java" line="245" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.ConsistencyCheck" functionprototype="void correctWebsites(java.sql.Connection)" functionrelativelocation="95">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="55" module="roller-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable query. The tainted data originated from an earlier call to java.sql.Statement.executeQuery.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConsistencyCheck.java" line="259" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.ConsistencyCheck" functionprototype="java.lang.String getRootCategoryId(java.sql.Connection, java.lang.String)" functionrelativelocation="67">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="161" module="roller-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable fk. The tainted data originated from an earlier call to java.sql.Statement.executeQuery.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConsistencyCheck.java" line="290" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.ConsistencyCheck" functionprototype="java.util.List findOrphans(java.sql.Connection, java.lang.String, java.lang.String, java.lang.String, byte, byte)" functionrelativelocation="31">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="12" module="roller-orig.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate() contains tainted data from the variable id. The tainted data originated from an earlier call to java.sql.Statement.executeQuery.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConsistencyCheck.java" line="321" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.ConsistencyCheck" functionprototype="java.util.List findOrphans(java.sql.Connection, java.lang.String, java.lang.String, java.lang.String, byte, byte)" functionrelativelocation="95">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="3">
<category categoryid="21" categoryname="CRLF Injection" pcirelated="true">
<desc>
<para text="The acronym CRLF stands for &quot;Carriage Return, Line Feed&quot; and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  "/>
</desc>
<recommendations>
<para text="Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents."/>
</recommendations>
<cwe cweid="93" cwename="Improper Neutralization of CRLF Sequences ('CRLF Injection')" pcirelated="false">
<description>
<text text="A function call contains a CRLF Injection flaw.  Writing unsanitized user-supplied input to an interface or external application that treats the CRLF (carriage return line feed) sequence as a delimiter to separate lines or records can result in that data being misinterpreted.  FTP and SMTP are examples of protocols that treat CRLF as a delimiter when parsing commands."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences ('CRLF Injection')" count="1" issueid="180" module="roller-orig.war" type="javax.mail.Message.setFrom" description="This call to javax.mail.Message.setFrom() contains a CRLF injection flaw. Writing unsanitized user-supplied input to an interface or external application that treats the CRLF (carriage return line feed) sequence as a delimiter to separate lines or records can result in that data being misinterpreted. The first argument to setFrom() contains tainted data from the variable sentFrom. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Sanitize CRLF sequences from user-supplied input.

References: 
CWE (http://cwe.mitre.org/data/definitions/93.html)

" note="" cweid="93" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MailUtil.java" line="69" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.MailUtil" functionprototype="void sendMessage(javax.mail.Session, java.lang.String, java.lang.String  [], java.lang.String  [], java.lang.String  [], java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="6"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences ('CRLF Injection')" count="1" issueid="199" module="roller-orig.war" type="javax.mail.Message.setRecipients" description="This call to javax.mail.Message.setRecipients() contains a CRLF injection flaw. Writing unsanitized user-supplied input to an interface or external application that treats the CRLF (carriage return line feed) sequence as a delimiter to separate lines or records can result in that data being misinterpreted. setRecipients() was called on the message object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Sanitize CRLF sequences from user-supplied input.

References: 
CWE (http://cwe.mitre.org/data/definitions/93.html)

" note="" cweid="93" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MailUtil.java" line="82" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.MailUtil" functionprototype="void sendMessage(javax.mail.Session, java.lang.String, java.lang.String  [], java.lang.String  [], java.lang.String  [], java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="33"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences ('CRLF Injection')" count="1" issueid="190" module="roller-orig.war" type="javax.mail.Message.setRecipients" description="This call to javax.mail.Message.setRecipients() contains a CRLF injection flaw. Writing unsanitized user-supplied input to an interface or external application that treats the CRLF (carriage return line feed) sequence as a delimiter to separate lines or records can result in that data being misinterpreted. setRecipients() was called on the message object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Sanitize CRLF sequences from user-supplied input.

References: 
CWE (http://cwe.mitre.org/data/definitions/93.html)

" note="" cweid="93" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MailUtil.java" line="94" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.MailUtil" functionprototype="void sendMessage(javax.mail.Session, java.lang.String, java.lang.String  [], java.lang.String  [], java.lang.String  [], java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="52"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences ('CRLF Injection')" count="1" issueid="100" module="roller-orig.war" type="javax.mail.Message.setRecipients" description="This call to javax.mail.Message.setRecipients() contains a CRLF injection flaw. Writing unsanitized user-supplied input to an interface or external application that treats the CRLF (carriage return line feed) sequence as a delimiter to separate lines or records can result in that data being misinterpreted. setRecipients() was called on the message object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Sanitize CRLF sequences from user-supplied input.

References: 
CWE (http://cwe.mitre.org/data/definitions/93.html)

" note="" cweid="93" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MailUtil.java" line="106" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.MailUtil" functionprototype="void sendMessage(javax.mail.Session, java.lang.String, java.lang.String  [], java.lang.String  [], java.lang.String  [], java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="73"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences ('CRLF Injection')" count="1" issueid="205" module="roller-orig.war" type="javax.mail.Message.setSubject" description="This call to javax.mail.Message.setSubject() contains a CRLF injection flaw. Writing unsanitized user-supplied input to an interface or external application that treats the CRLF (carriage return line feed) sequence as a delimiter to separate lines or records can result in that data being misinterpreted. The first argument to setSubject() contains tainted data from the variable subject. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Sanitize CRLF sequences from user-supplied input.

References: 
CWE (http://cwe.mitre.org/data/definitions/93.html)

" note="" cweid="93" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MailUtil.java" line="108" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.MailUtil" functionprototype="void sendMessage(javax.mail.Session, java.lang.String, java.lang.String  [], java.lang.String  [], java.lang.String  [], java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="76"/>
</staticflaws>
</cwe>
<cwe cweid="113" cwename="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" pcirelated="false">
<description>
<text text="A function call contains an HTTP response splitting flaw.  Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="79" module="roller-orig.war" type="javax.servlet.http.HttpServletResponse.setHeader" description="This call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The second argument to setHeader() contains tainted data from the variable value. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CacheHttpServletResponseWrapper.java" line="97" sourcefilepath="org/apache/roller/ui/core/util/" scope="org.apache.roller.ui.core.util.CacheHttpServletResponseWrapper" functionprototype="void setHeader(java.lang.String, java.lang.String)" functionrelativelocation="92"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="93" module="roller-orig.war" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The first argument to sendRedirect() contains tainted data from the variable location. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CacheHttpServletResponseWrapper.java" line="156" sourcefilepath="org/apache/roller/ui/core/util/" scope="org.apache.roller.ui.core.util.CacheHttpServletResponseWrapper" functionprototype="void sendRedirect(java.lang.String)" functionrelativelocation="69"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="270" module="roller-orig.war" type="javax.servlet.http.HttpServletResponse.setHeader" description="This call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The second argument to setHeader() contains tainted data from the variable redirectUrl. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RedirectServlet.java" line="155" sourcefilepath="org/apache/roller/ui/rendering/velocity/deprecated/" scope="org.apache.roller.ui.rendering.velocity.deprecated.RedirectServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="95"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="113" module="roller-orig.war" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The first argument to sendRedirect() contains tainted data from the variable redirect. The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequest.getQueryString, and javax.servlet.http.HttpServletRequest.getRequestURI.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SchemeEnforcementFilter.java" line="100" sourcefilepath="org/apache/roller/ui/core/filters/" scope="org.apache.roller.ui.core.filters.SchemeEnforcementFilter" functionprototype="void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)" functionrelativelocation="54"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="164" module="roller-orig.war" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The first argument to sendRedirect() contains tainted data from the variable redirect. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURI.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SchemeEnforcementFilter.java" line="116" sourcefilepath="org/apache/roller/ui/core/filters/" scope="org.apache.roller.ui.core.filters.SchemeEnforcementFilter" functionprototype="void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)" functionrelativelocation="96"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="177" module="roller-orig.war" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The first argument to sendRedirect() contains tainted data from the variable redirectUrl. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURI.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogRequestMapper.java" line="194" sourcefilepath="org/apache/roller/ui/rendering/" scope="org.apache.roller.ui.rendering.WeblogRequestMapper" functionprototype="byte handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="83"/>
</staticflaws>
</cwe>
<cwe cweid="117" cwename="Improper Output Neutralization for Logs" pcirelated="true" owasp="929">
<description>
<text text="A function call could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="119" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable entry.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AcronymsPlugin.java" line="82" sourcefilepath="org/apache/roller/ui/rendering/plugins/" scope="org.apache.roller.ui.rendering.plugins.AcronymsPlugin" functionprototype="java.lang.String render(pojos.WeblogEntryData, java.lang.String)" functionrelativelocation="14"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="149" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable acronym. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AcronymsPlugin.java" line="103" sourcefilepath="org/apache/roller/ui/rendering/plugins/" scope="org.apache.roller.ui.rendering.plugins.AcronymsPlugin" functionprototype="java.lang.String render(pojos.WeblogEntryData, java.lang.String)" functionrelativelocation="73"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="43" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable text. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AcronymsPlugin.java" line="155" sourcefilepath="org/apache/roller/ui/rendering/plugins/" scope="org.apache.roller.ui.rendering.plugins.AcronymsPlugin" functionprototype="java.lang.String matchAcronyms(java.lang.String, java.util.regex.Pattern  [], java.lang.String  [])" functionrelativelocation="45"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="131" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable rawAcronyms. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AcronymsPlugin.java" line="177" sourcefilepath="org/apache/roller/ui/rendering/plugins/" scope="org.apache.roller.ui.rendering.plugins.AcronymsPlugin" functionprototype="java.util.Properties parseAcronymPage(pojos.WeblogTemplate, java.util.Properties)" functionrelativelocation="28"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="233" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable test. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Blacklist.java" line="384" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.Blacklist" functionprototype="byte testStringRules(java.lang.String, java.util.List)" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="132" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable form.getMoveToFolderId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BookmarksAction.java" line="195" sourcefilepath="org/apache/roller/ui/authoring/struts/actions/" scope="org.apache.roller.ui.authoring.struts.actions.BookmarksAction" functionprototype="struts.action.ActionForward moveSelected(struts.action.ActionMapping, struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="28"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="198" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable value. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CacheHttpServletResponseWrapper.java" line="94" sourcefilepath="org/apache/roller/ui/core/util/" scope="org.apache.roller.ui.core.util.CacheHttpServletResponseWrapper" functionprototype="void setHeader(java.lang.String, java.lang.String)" functionrelativelocation="78"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="153" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable entry.getAnchor(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CacheManager.java" line="248" sourcefilepath="org/apache/roller/util/cache/" scope="org.apache.roller.util.cache.CacheManager" functionprototype="void invalidate(pojos.WeblogEntryData)" functionrelativelocation="37"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="234" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable website.getHandle(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CacheManager.java" line="259" sourcefilepath="org/apache/roller/util/cache/" scope="org.apache.roller.util.cache.CacheManager" functionprototype="void invalidate(pojos.WebsiteData)" functionrelativelocation="37"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="105" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable comment.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CacheManager.java" line="292" sourcefilepath="org/apache/roller/util/cache/" scope="org.apache.roller.util.cache.CacheManager" functionprototype="void invalidate(pojos.CommentData)" functionrelativelocation="37"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="257" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable referer.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CacheManager.java" line="303" sourcefilepath="org/apache/roller/util/cache/" scope="org.apache.roller.util.cache.CacheManager" functionprototype="void invalidate(pojos.RefererData)" functionrelativelocation="37"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="40" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable user.getUserName(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CacheManager.java" line="318" sourcefilepath="org/apache/roller/util/cache/" scope="org.apache.roller.util.cache.CacheManager" functionprototype="void invalidate(pojos.UserData)" functionrelativelocation="37"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="246" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable category.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CacheManager.java" line="329" sourcefilepath="org/apache/roller/util/cache/" scope="org.apache.roller.util.cache.CacheManager" functionprototype="void invalidate(pojos.WeblogCategoryData)" functionrelativelocation="37"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="17" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable template.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CacheManager.java" line="340" sourcefilepath="org/apache/roller/util/cache/" scope="org.apache.roller.util.cache.CacheManager" functionprototype="void invalidate(pojos.WeblogTemplate)" functionrelativelocation="37"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="245" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable form.getMoveToCategoryId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CategoriesAction.java" line="128" sourcefilepath="org/apache/roller/ui/authoring/struts/actions/" scope="org.apache.roller.ui.authoring.struts.actions.CategoriesAction" functionprototype="struts.action.ActionForward moveSelected(struts.action.ActionMapping, struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="36"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="182" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable entry.getPermaLink(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CommentServlet.java" line="230" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.CommentServlet" functionprototype="void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="40"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="88" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable dispatch_url. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CommentServlet.java" line="341" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.CommentServlet" functionprototype="void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="97"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="73" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable ctx.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ContextLoader.java" line="252" sourcefilepath="org/apache/roller/ui/rendering/velocity/deprecated/" scope="org.apache.roller.ui.rendering.velocity.deprecated.ContextLoader" functionprototype="void loadWeblogValues(java.util.Map, pojos.WebsiteData, java.util.Locale, javax.servlet.http.HttpServletRequest)" functionrelativelocation="70"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="214" module="roller-orig.war" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable request.getRequestURL(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DebugFilter.java" line="58" sourcefilepath="org/apache/roller/ui/core/filters/" scope="org.apache.roller.ui.core.filters.DebugFilter" functionprototype="void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)" functionrelativelocation="44"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="278" module="roller-orig.war" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable request.getRequestURL(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DebugFilter.java" line="62" sourcefilepath="org/apache/roller/ui/core/filters/" scope="org.apache.roller.ui.core.filters.DebugFilter" functionprototype="void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)" functionrelativelocation="93"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="251" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable url. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DiskFeedInfoCache.java" line="60" sourcefilepath="org/apache/roller/util/rome/" scope="org.apache.roller.util.rome.DiskFeedInfoCache" functionprototype="com.sun.syndication.fetcher.impl.SyndFeedInfo getFeedInfo(java.net.URL)" functionrelativelocation="66"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="147" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExpiringLRUCacheImpl.java" line="87" sourcefilepath="org/apache/roller/util/cache/" scope="org.apache.roller.util.cache.ExpiringLRUCacheImpl" functionprototype="java.lang.Object get(java.lang.String)" functionrelativelocation="76"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="110" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable cacheKey. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FeedServlet.java" line="160" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.FeedServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="40"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="95" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable cacheKey. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FeedServlet.java" line="167" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.FeedServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="46"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="16" module="roller-orig.war" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable pageId. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FeedServlet.java" line="245" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.FeedServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="58" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable cacheKey. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FeedServlet.java" line="261" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.FeedServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="95"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="7" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable weblogHandle. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FileManagerImpl.java" line="226" sourcefilepath="org/apache/roller/business/" scope="org.apache.roller.business.FileManagerImpl" functionprototype="void saveFile(java.lang.String, java.lang.String, java.lang.String, long, java.io.InputStream)" functionrelativelocation="97"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="22" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable weblog.getHandle(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FuturePostingsInvalidationJob.java" line="91" sourcefilepath="org/apache/roller/util/cache/" scope="org.apache.roller.util.cache.FuturePostingsInvalidationJob" functionprototype="void execute()" functionrelativelocation="33"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="179" module="roller-orig.war" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable websiteid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FuturePostingsInvalidationJob.java" line="99" sourcefilepath="org/apache/roller/util/cache/" scope="org.apache.roller.util.cache.FuturePostingsInvalidationJob" functionprototype="void execute()" functionrelativelocation="46"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="268" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable obj. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernatePersistenceStrategy.java" line="192" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernatePersistenceStrategy" functionprototype="void store(pojos.PersistentObject)" functionrelativelocation="73"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="96" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable obj.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernatePersistenceStrategy.java" line="354" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernatePersistenceStrategy" functionprototype="void remove(pojos.HierarchicalPersistentObject)" functionrelativelocation="15"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="57" module="roller-orig.war" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sub.getFeedURL(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernatePlanetManagerImpl.java" line="469" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernatePlanetManagerImpl" functionprototype="void refreshEntries()" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="89" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable sub.getFeedURL(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernatePlanetManagerImpl.java" line="493" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernatePlanetManagerImpl" functionprototype="java.util.Set getNewEntries(pojos.PlanetSubscriptionData, com.sun.syndication.fetcher.FeedFetcher, com.sun.syndication.fetcher.impl.FeedFetcherCache)" functionrelativelocation="11"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="196" module="roller-orig.war" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable sub.getFeedURL(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernatePlanetManagerImpl.java" line="505" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernatePlanetManagerImpl" functionprototype="java.util.Set getNewEntries(pojos.PlanetSubscriptionData, com.sun.syndication.fetcher.FeedFetcher, com.sun.syndication.fetcher.impl.FeedFetcherCache)" functionrelativelocation="34"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="39" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable feedURL. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernatePlanetManagerImpl.java" line="552" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernatePlanetManagerImpl" functionprototype="java.util.Set getNewEntries(pojos.PlanetSubscriptionData, com.sun.syndication.fetcher.FeedFetcher, com.sun.syndication.fetcher.impl.FeedFetcherCache)" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="36" module="roller-orig.war" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable feedURL. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernatePlanetManagerImpl.java" line="557" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernatePlanetManagerImpl" functionprototype="java.util.Set getNewEntries(pojos.PlanetSubscriptionData, com.sun.syndication.fetcher.FeedFetcher, com.sun.syndication.fetcher.impl.FeedFetcherCache)" functionrelativelocation="91"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="85" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable website.getName(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateRefererManagerImpl.java" line="367" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateRefererManagerImpl" functionprototype="int getHits(pojos.WebsiteData, java.lang.String)" functionrelativelocation="16"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="19" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variables referrerUrl, and requestUrl. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateRefererManagerImpl.java" line="568" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateRefererManagerImpl" functionprototype="void processReferrer(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="5"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="226" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable referrerUrl. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getHeader.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateRefererManagerImpl.java" line="633" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateRefererManagerImpl" functionprototype="void processReferrer(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="54"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="175" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable ref.getRefererUrl(). The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequest.getHeader, and javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateRefererManagerImpl.java" line="658" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateRefererManagerImpl" functionprototype="void processReferrer(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="69"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="10" module="roller-orig.war" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable mReferer.getRefererUrl(). The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequest.getHeader, and javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateRefererManagerImpl.java" line="811" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateRefererManagerImpl$LinkbackExtractorRunnable" functionprototype="void run()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="266" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable sub.getFeedURL(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateRollerPlanetManagerImpl.java" line="78" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateRollerPlanetManagerImpl" functionprototype="java.util.Set getNewEntries(pojos.PlanetSubscriptionData, com.sun.syndication.fetcher.FeedFetcher, com.sun.syndication.fetcher.impl.FeedFetcherCache)" functionrelativelocation="10"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="135" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable sub.getFeedURL(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateRollerPlanetManagerImpl.java" line="88" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateRollerPlanetManagerImpl" functionprototype="java.util.Set getNewEntries(pojos.PlanetSubscriptionData, com.sun.syndication.fetcher.FeedFetcher, com.sun.syndication.fetcher.impl.FeedFetcherCache)" functionrelativelocation="20"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="84" module="roller-orig.war" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable website.getHandle(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateRollerPlanetManagerImpl.java" line="103" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateRollerPlanetManagerImpl" functionprototype="java.util.Set getNewEntries(pojos.PlanetSubscriptionData, com.sun.syndication.fetcher.FeedFetcher, com.sun.syndication.fetcher.impl.FeedFetcherCache)" functionrelativelocation="40"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="26" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable sub.getFeedURL(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateRollerPlanetManagerImpl.java" line="160" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateRollerPlanetManagerImpl" functionprototype="java.util.Set getNewEntries(pojos.PlanetSubscriptionData, com.sun.syndication.fetcher.FeedFetcher, com.sun.syndication.fetcher.impl.FeedFetcherCache)" functionrelativelocation="97"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="136" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable handle. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateUserManagerImpl.java" line="408" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateUserManagerImpl" functionprototype="pojos.WebsiteData getWebsiteByHandle(java.lang.String, java.lang.Boolean)" functionrelativelocation="30"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="185" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable handle. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateUserManagerImpl.java" line="437" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateUserManagerImpl" functionprototype="pojos.WebsiteData getWebsiteByHandle(java.lang.String, java.lang.Boolean)" functionrelativelocation="86"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="129" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable userName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateUserManagerImpl.java" line="508" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateUserManagerImpl" functionprototype="pojos.UserData getUserByUserName(java.lang.String, java.lang.Boolean)" functionrelativelocation="31"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="15" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable userName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateUserManagerImpl.java" line="537" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateUserManagerImpl" functionprototype="pojos.UserData getUserByUserName(java.lang.String, java.lang.Boolean)" functionrelativelocation="86"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="264" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable mappingKey. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateWeblogManagerImpl.java" line="500" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateWeblogManagerImpl" functionprototype="pojos.WeblogEntryData getWeblogEntryByAnchor(pojos.WebsiteData, java.lang.String)" functionrelativelocation="35"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="30" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable mappingKey. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernateWeblogManagerImpl.java" line="527" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernateWeblogManagerImpl" functionprototype="pojos.WeblogEntryData getWeblogEntryByAnchor(pojos.WebsiteData, java.lang.String)" functionrelativelocation="89"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="126" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable absPath. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="InitFilter.java" line="66" sourcefilepath="org/apache/roller/ui/core/filters/" scope="org.apache.roller.ui.core.filters.InitFilter" functionprototype="void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)" functionrelativelocation="83"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="114" module="roller-orig.war" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable fullUrl.substring(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="InitFilter.java" line="83" sourcefilepath="org/apache/roller/ui/core/filters/" scope="org.apache.roller.ui.core.filters.InitFilter" functionprototype="java.lang.String getAbsoluteUrl(javax.servlet.http.HttpServletRequest)" functionrelativelocation="30"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="213" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable access$600(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LinkbackExtractor.java" line="347" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.LinkbackExtractor$LinkbackCallback" functionprototype="void handleSimpleTag(javax.swing.text.html.HTML$Tag, javax.swing.text.MutableAttributeSet, int)" functionrelativelocation="37"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="272" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable access$600(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LinkbackExtractor.java" line="379" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.LinkbackExtractor$LinkbackCallback" functionprototype="void handleSimpleTag(javax.swing.text.html.HTML$Tag, javax.swing.text.MutableAttributeSet, int)" functionrelativelocation="98"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="157" module="roller-orig.war" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable value. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LinkTag.java" line="110" sourcefilepath="org/apache/roller/ui/core/tags/" scope="org.apache.roller.ui.core.tags.LinkTag" functionprototype="void addRequestParameter(java.lang.String, java.lang.String)" functionrelativelocation="26"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="239" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable sentFrom. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MailUtil.java" line="70" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.MailUtil" functionprototype="void sendMessage(javax.mail.Session, java.lang.String, java.lang.String  [], java.lang.String  [], java.lang.String  [], java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="13"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="167" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable to. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MailUtil.java" line="80" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.MailUtil" functionprototype="void sendMessage(javax.mail.Session, java.lang.String, java.lang.String  [], java.lang.String  [], java.lang.String  [], java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="29"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="228" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable cc. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MailUtil.java" line="92" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.MailUtil" functionprototype="void sendMessage(javax.mail.Session, java.lang.String, java.lang.String  [], java.lang.String  [], java.lang.String  [], java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="49"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="253" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable bcc. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MailUtil.java" line="104" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.MailUtil" functionprototype="void sendMessage(javax.mail.Session, java.lang.String, java.lang.String  [], java.lang.String  [], java.lang.String  [], java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="69"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="82" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable request.getRequestURL(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ModDateHeaderUtil.java" line="59" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.ModDateHeaderUtil" functionprototype="byte respondIfNotModified(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, long)" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="14" module="roller-orig.war" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable models. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ModelLoader.java" line="99" sourcefilepath="org/apache/roller/ui/rendering/model/" scope="org.apache.roller.ui.rendering.model.ModelLoader" functionprototype="void loadModels(java.lang.String, java.util.Map, java.util.Map, byte)" functionrelativelocation="30"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="98" module="roller-orig.war" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable models. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ModelLoader.java" line="105" sourcefilepath="org/apache/roller/ui/rendering/model/" scope="org.apache.roller.ui.rendering.model.ModelLoader" functionprototype="void loadModels(java.lang.String, java.util.Map, java.util.Map, byte)" functionrelativelocation="52"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="97" module="roller-orig.war" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable models. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ModelLoader.java" line="111" sourcefilepath="org/apache/roller/ui/rendering/model/" scope="org.apache.roller.ui.rendering.model.ModelLoader" functionprototype="void loadModels(java.lang.String, java.util.Map, java.util.Map, byte)" functionrelativelocation="74"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="35" module="roller-orig.war" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable models. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ModelLoader.java" line="117" sourcefilepath="org/apache/roller/ui/rendering/model/" scope="org.apache.roller.ui.rendering.model.ModelLoader" functionprototype="void loadModels(java.lang.String, java.util.Map, java.util.Map, byte)" functionrelativelocation="96"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="120" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable request.getRequestURL(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="OldCommentsRequest.java" line="64" sourcefilepath="org/apache/roller/ui/rendering/velocity/deprecated/" scope="org.apache.roller.ui.rendering.velocity.deprecated.OldCommentsRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="11"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="284" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable request.getRequestURL(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="OldFeedRequest.java" line="67" sourcefilepath="org/apache/roller/ui/rendering/velocity/deprecated/" scope="org.apache.roller.ui.rendering.velocity.deprecated.OldFeedRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="16"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="250" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable request.getRequestURL(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="OldPageRequest.java" line="67" sourcefilepath="org/apache/roller/ui/rendering/velocity/deprecated/" scope="org.apache.roller.ui.rendering.velocity.deprecated.OldPageRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="12"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="227" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable cacheKey. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PageServlet.java" line="204" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.PageServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="25"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="71" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable cacheKey. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PageServlet.java" line="212" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.PageServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="30"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="41" module="roller-orig.war" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable page.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PageServlet.java" line="362" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.PageServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="77"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="123" module="roller-orig.war" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable page.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PageServlet.java" line="380" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.PageServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="83" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable cacheKey. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PageServlet.java" line="399" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.PageServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="94"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="248" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable cacheKey. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PageServlet.java" line="408" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.PageServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="98"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="232" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable request.getRequestURI(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURI.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PageServlet.java" line="442" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.PageServlet" functionprototype="byte processReferrer(javax.servlet.http.HttpServletRequest)" functionrelativelocation="4"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="225" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable referrerUrl. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getHeader.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PageServlet.java" line="478" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.PageServlet" functionprototype="byte processReferrer(javax.servlet.http.HttpServletRequest)" functionrelativelocation="33"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="101" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable referrerUrl. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getHeader.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PageServlet.java" line="519" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.PageServlet" functionprototype="byte processReferrer(javax.servlet.http.HttpServletRequest)" functionrelativelocation="82"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="171" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable request.getRequestURL(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanetRequest.java" line="50" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.PlanetRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="23"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="259" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable previewRequest.getThemeName(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PreviewServlet.java" line="101" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.PreviewServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="14"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="5" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable format(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RebuildWebsiteIndexOperation.java" line="118" sourcefilepath="org/apache/roller/business/search/operations/" scope="org.apache.roller.business.search.operations.RebuildWebsiteIndexOperation" functionprototype="void doRun()" functionrelativelocation="52"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="173" module="roller-orig.war" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable website.getHandle(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RebuildWebsiteIndexOperation.java" line="139" sourcefilepath="org/apache/roller/business/search/operations/" scope="org.apache.roller.business.search.operations.RebuildWebsiteIndexOperation" functionprototype="void doRun()" functionrelativelocation="98"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="208" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable request.getRequestURI(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURI.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RedirectServlet.java" line="97" sourcefilepath="org/apache/roller/ui/rendering/velocity/deprecated/" scope="org.apache.roller.ui.rendering.velocity.deprecated.RedirectServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="20"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="140" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable request.getPathInfo(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RedirectServlet.java" line="98" sourcefilepath="org/apache/roller/ui/rendering/velocity/deprecated/" scope="org.apache.roller.ui.rendering.velocity.deprecated.RedirectServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="28"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="59" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable redirectUrl. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RedirectServlet.java" line="151" sourcefilepath="org/apache/roller/ui/rendering/velocity/deprecated/" scope="org.apache.roller.ui.rendering.velocity.deprecated.RedirectServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="90"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="183" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable referrer.getRequestUrl(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferrerProcessingJob.java" line="61" sourcefilepath="org/apache/roller/business/referrers/" scope="org.apache.roller.business.referrers.ReferrerProcessingJob" functionprototype="void execute()" functionrelativelocation="31"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="166" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable referrer.getRequestUrl(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferrerQueueManagerImpl.java" line="145" sourcefilepath="org/apache/roller/business/referrers/" scope="org.apache.roller.business.referrers.ReferrerQueueManagerImpl" functionprototype="void processReferrer(IncomingReferrer)" functionrelativelocation="30"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="154" module="roller-orig.war" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable website.getName(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RemoveWebsiteIndexOperation.java" line="88" sourcefilepath="org/apache/roller/business/search/operations/" scope="org.apache.roller.business.search.operations.RemoveWebsiteIndexOperation" functionprototype="void doRun()" functionrelativelocation="96"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="265" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable reqURI. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURI.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResourceServlet.java" line="104" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.ResourceServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="35"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="184" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable resource.getAbsolutePath(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURI.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResourceServlet.java" line="105" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.ResourceServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="45"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="260" module="roller-orig.war" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable anchor. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RollerRequest.java" line="775" sourcefilepath="org/apache/roller/ui/core/" scope="org.apache.roller.ui.core.RollerRequest" functionprototype="pojos.WeblogEntryData getWeblogEntry()" functionrelativelocation="72"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="34" module="roller-orig.war" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable entryid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RollerRequest.java" line="776" sourcefilepath="org/apache/roller/ui/core/" scope="org.apache.roller.ui.core.RollerRequest" functionprototype="pojos.WeblogEntryData getWeblogEntry()" functionrelativelocation="82"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="178" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable value. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RollerRuntimeConfig.java" line="72" sourcefilepath="org/apache/roller/config/" scope="org.apache.roller.config.RollerRuntimeConfig" functionprototype="java.lang.String getProperty(java.lang.String)" functionrelativelocation="92"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="235" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable sb. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getInputStream.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RollerXMLRPCServlet.java" line="86" sourcefilepath="org/apache/roller/webservices/xmlrpc/" scope="org.apache.roller.webservices.xmlrpc.RollerXMLRPCServlet" functionprototype="void service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="46"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="170" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable redirect. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getQueryString.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SchemeEnforcementFilter.java" line="99" sourcefilepath="org/apache/roller/ui/core/filters/" scope="org.apache.roller.ui.core.filters.SchemeEnforcementFilter" functionprototype="void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)" functionrelativelocation="52"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="74" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable redirect. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURI.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SchemeEnforcementFilter.java" line="115" sourcefilepath="org/apache/roller/ui/core/filters/" scope="org.apache.roller.ui.core.filters.SchemeEnforcementFilter" functionprototype="void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)" functionrelativelocation="94"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="159" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SiteWideCache.java" line="112" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.SiteWideCache" functionprototype="java.lang.Object get(java.lang.String)" functionrelativelocation="55"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="144" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SiteWideCache.java" line="114" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.SiteWideCache" functionprototype="java.lang.Object get(java.lang.String)" functionrelativelocation="91"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="267" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SiteWideCache.java" line="127" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.SiteWideCache" functionprototype="void put(java.lang.String, java.lang.Object)" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="112" module="roller-orig.war" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable feedUrl. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SyncWebsitesTask.java" line="118" sourcefilepath="org/apache/roller/ui/core/tasks/" scope="org.apache.roller.ui.core.tasks.SyncWebsitesTask" functionprototype="void syncWebsites()" functionrelativelocation="46"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="54" module="roller-orig.war" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sub.getFeedURL(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SyncWebsitesTask.java" line="142" sourcefilepath="org/apache/roller/ui/core/tasks/" scope="org.apache.roller.ui.core.tasks.SyncWebsitesTask" functionprototype="void syncWebsites()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="45" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable sub.getFeedURL(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TechnoratiRankingsTask.java" line="133" sourcefilepath="org/apache/roller/ui/core/tasks/" scope="org.apache.roller.ui.core.tasks.TechnoratiRankingsTask" functionprototype="void rankSubscriptions()" functionrelativelocation="66"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="104" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable sub.getFeedURL(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TechnoratiRankingsTask.java" line="138" sourcefilepath="org/apache/roller/ui/core/tasks/" scope="org.apache.roller.ui.core.tasks.TechnoratiRankingsTask" functionprototype="void rankSubscriptions()" functionrelativelocation="74"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="25" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variables currentTheme, and username. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ThemeEditorAction.java" line="131" sourcefilepath="org/apache/roller/ui/authoring/struts/actions/" scope="org.apache.roller.ui.authoring.struts.actions.ThemeEditorAction" functionprototype="struts.action.ActionForward edit(struts.action.ActionMapping, struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="83"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="64" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable username. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ThemeEditorAction.java" line="205" sourcefilepath="org/apache/roller/ui/authoring/struts/actions/" scope="org.apache.roller.ui.authoring.struts.actions.ThemeEditorAction" functionprototype="struts.action.ActionForward preview(struts.action.ActionMapping, struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="65"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="53" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable username. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ThemeEditorAction.java" line="303" sourcefilepath="org/apache/roller/ui/authoring/struts/actions/" scope="org.apache.roller.ui.authoring.struts.actions.ThemeEditorAction" functionprototype="struts.action.ActionForward save(struts.action.ActionMapping, struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="73"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="288" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable website.getName(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ThemeManagerImpl.java" line="335" sourcefilepath="org/apache/roller/business/" scope="org.apache.roller.business.ThemeManagerImpl" functionprototype="void saveThemePages(pojos.WebsiteData, pojos.Theme)" functionrelativelocation="6"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="50" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable template.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ThemeManagerImpl.java" line="396" sourcefilepath="org/apache/roller/business/" scope="org.apache.roller.business.ThemeManagerImpl" functionprototype="void saveThemePages(pojos.WebsiteData, pojos.Theme)" functionrelativelocation="75"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="13" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable dayTemplate.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ThemeManagerImpl.java" line="404" sourcefilepath="org/apache/roller/business/" scope="org.apache.roller.business.ThemeManagerImpl" functionprototype="void saveThemePages(pojos.WebsiteData, pojos.Theme)" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="103" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable comment.getUrl(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TrackbackServlet.java" line="154" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.TrackbackServlet" functionprototype="void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="58"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="194" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable comment.getUrl(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TrackbackServlet.java" line="170" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.TrackbackServlet" functionprototype="void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="70"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="230" module="roller-orig.war" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable handle. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UpgradeDatabase.java" line="210" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.UpgradeDatabase" functionprototype="void upgradeTo200(java.sql.Connection)" functionrelativelocation="32"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="275" module="roller-orig.war" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable handle. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UpgradeDatabase.java" line="306" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.UpgradeDatabase" functionprototype="void upgradeTo210(java.sql.Connection)" functionrelativelocation="31"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="287" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable string. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Utilities.java" line="770" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.Utilities" functionprototype="int stringToInt(java.lang.String)" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="237" module="roller-orig.war" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable template.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VelocityRenderer.java" line="73" sourcefilepath="org/apache/roller/ui/rendering/velocity/" scope="org.apache.roller.ui.rendering.velocity.VelocityRenderer" functionprototype="void !ctor(pojos.Template)" functionrelativelocation="65"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="203" module="roller-orig.war" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable template.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VelocityRenderer.java" line="89" sourcefilepath="org/apache/roller/ui/rendering/velocity/" scope="org.apache.roller.ui.rendering.velocity.VelocityRenderer" functionprototype="void !ctor(pojos.Template)" functionrelativelocation="95"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="186" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable renderTemplate.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VelocityRenderer.java" line="147" sourcefilepath="org/apache/roller/ui/rendering/velocity/" scope="org.apache.roller.ui.rendering.velocity.VelocityRenderer" functionprototype="void render(java.util.Map, java.io.Writer)" functionrelativelocation="92"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="151" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable name. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogCommentRequest.java" line="144" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogCommentRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="73"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="252" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable email. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogCommentRequest.java" line="145" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogCommentRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="78"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="76" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable url. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogCommentRequest.java" line="146" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogCommentRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="83"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="290" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable content. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogCommentRequest.java" line="147" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogCommentRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="262" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable weblogAnchor. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogCommentRequest.java" line="149" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogCommentRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="98"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="255" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable url. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterMap.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogEntryFormAction.java" line="504" sourcefilepath="org/apache/roller/ui/authoring/struts/actions/" scope="org.apache.roller.ui.authoring.struts.actions.WeblogEntryFormAction" functionprototype="byte checkMediaCast(pojos.WeblogEntryData, struts.action.ActionMessages)" functionrelativelocation="70"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="291" module="roller-orig.war" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable url. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterMap.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogEntryFormAction.java" line="507" sourcefilepath="org/apache/roller/ui/authoring/struts/actions/" scope="org.apache.roller.ui.authoring.struts.actions.WeblogEntryFormAction" functionprototype="byte checkMediaCast(pojos.WeblogEntryData, struts.action.ActionMessages)" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="224" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogFeedCache.java" line="100" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogFeedCache" functionprototype="java.lang.Object get(java.lang.String, long)" functionrelativelocation="49"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="72" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogFeedCache.java" line="102" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogFeedCache" functionprototype="java.lang.Object get(java.lang.String, long)" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="162" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogFeedCache.java" line="106" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogFeedCache" functionprototype="java.lang.Object get(java.lang.String, long)" functionrelativelocation="94"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="276" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogFeedCache.java" line="119" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogFeedCache" functionprototype="void put(java.lang.String, java.lang.Object)" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="69" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable pathInfo. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogFeedRequest.java" line="74" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogFeedRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="14"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="92" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable type. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogFeedRequest.java" line="130" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogFeedRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="78"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="150" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable format. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogFeedRequest.java" line="131" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogFeedRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="244" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable weblogCategoryName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogFeedRequest.java" line="132" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogFeedRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="92"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="231" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageCache.java" line="101" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageCache" functionprototype="java.lang.Object get(java.lang.String, long)" functionrelativelocation="49"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="125" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageCache.java" line="103" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageCache" functionprototype="java.lang.Object get(java.lang.String, long)" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="134" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageCache.java" line="107" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageCache" functionprototype="java.lang.Object get(java.lang.String, long)" functionrelativelocation="94"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="241" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageCache.java" line="120" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageCache" functionprototype="void put(java.lang.String, java.lang.Object)" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="206" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable pathInfo. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageRequest.java" line="86" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="9"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="280" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable context. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageRequest.java" line="227" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="84"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="67" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable weblogAnchor. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageRequest.java" line="228" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="148" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable weblogDate. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageRequest.java" line="229" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="90"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="62" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable weblogCategoryName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageRequest.java" line="230" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="93"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="229" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable weblogPageName. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageRequest.java" line="231" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="96"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="223" module="roller-orig.war" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable weblogAnchor. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageRequest.java" line="311" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageRequest" functionprototype="pojos.WeblogEntryData getWeblogEntry()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="285" module="roller-orig.war" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable weblogPageName. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageRequest.java" line="329" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageRequest" functionprototype="pojos.Template getWeblogPage()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="254" module="roller-orig.war" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable weblogCategoryName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPageRequest.java" line="347" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPageRequest" functionprototype="pojos.WeblogCategoryData getWeblogCategory()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="201" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable themeName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPreviewRequest.java" line="60" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPreviewRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="92"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="32" module="roller-orig.war" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable themeName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogPreviewRequest.java" line="97" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogPreviewRequest" functionprototype="pojos.Theme getTheme()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="3" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable path. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogRequest.java" line="70" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="17"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="160" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable pathInfo. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogRequest.java" line="120" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="98"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="192" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable weblogHandle. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogRequestMapper.java" line="132" sourcefilepath="org/apache/roller/ui/rendering/" scope="org.apache.roller.ui.rendering.WeblogRequestMapper" functionprototype="byte handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="33"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="256" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable weblogHandle. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogRequestMapper.java" line="136" sourcefilepath="org/apache/roller/ui/rendering/" scope="org.apache.roller.ui.rendering.WeblogRequestMapper" functionprototype="byte handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="42"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="176" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable forwardUrl. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogRequestMapper.java" line="215" sourcefilepath="org/apache/roller/ui/rendering/" scope="org.apache.roller.ui.rendering.WeblogRequestMapper" functionprototype="byte handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="95"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="31" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable handle. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogRequestMapper.java" line="234" sourcefilepath="org/apache/roller/ui/rendering/" scope="org.apache.roller.ui.rendering.WeblogRequestMapper" functionprototype="java.lang.String calculateForwardUrl(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="6"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="118" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable forwardUrl. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogRequestMapper.java" line="358" sourcefilepath="org/apache/roller/ui/rendering/" scope="org.apache.roller.ui.rendering.WeblogRequestMapper" functionprototype="java.lang.String calculateForwardUrl(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="98"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="271" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable potentialHandle. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogRequestMapper.java" line="372" sourcefilepath="org/apache/roller/ui/rendering/" scope="org.apache.roller.ui.rendering.WeblogRequestMapper" functionprototype="byte isWeblog(java.lang.String)" functionrelativelocation="36"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="86" module="roller-orig.war" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variables id, and decoratorName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogTemplate.java" line="108" sourcefilepath="org/apache/roller/pojos/" scope="org.apache.roller.pojos.WeblogTemplate" functionprototype="Template getDecorator()" functionrelativelocation="91"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="27" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable blogName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogTrackbackRequest.java" line="146" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogTrackbackRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="77"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="38" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable url. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogTrackbackRequest.java" line="147" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogTrackbackRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="82"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="274" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable excerpt. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogTrackbackRequest.java" line="148" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogTrackbackRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="187" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable title. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogTrackbackRequest.java" line="149" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogTrackbackRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="93"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="211" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable weblogAnchor. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogTrackbackRequest.java" line="150" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.WeblogTrackbackRequest" functionprototype="void !ctor(javax.servlet.http.HttpServletRequest)" functionrelativelocation="98"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="163" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variables websiteUrl, pingTargetUrl, and website.getName(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogUpdatePinger.java" line="108" sourcefilepath="org/apache/roller/ui/core/pings/" scope="org.apache.roller.ui.core.pings.WeblogUpdatePinger" functionprototype="WeblogUpdatePinger$PingResult sendPing(pojos.PingTargetData, pojos.WebsiteData)" functionrelativelocation="67"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="24" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable name. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebsiteData.java" line="242" sourcefilepath="org/apache/roller/pojos/" scope="org.apache.roller.pojos.WebsiteData" functionprototype="Template getPageByName(java.lang.String)" functionrelativelocation="20"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="269" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable template.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebsiteData.java" line="269" sourcefilepath="org/apache/roller/pojos/" scope="org.apache.roller.pojos.WebsiteData" functionprototype="Template getPageByName(java.lang.String)" functionrelativelocation="95"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="221" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable link. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getPathInfo.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebsiteData.java" line="284" sourcefilepath="org/apache/roller/pojos/" scope="org.apache.roller.pojos.WebsiteData" functionprototype="Template getPageByLink(java.lang.String)" functionrelativelocation="20"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="122" module="roller-orig.war" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable template.getId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebsiteData.java" line="311" sourcefilepath="org/apache/roller/pojos/" scope="org.apache.roller.pojos.WebsiteData" functionprototype="Template getPageByLink(java.lang.String)" functionrelativelocation="95"/>
</staticflaws>
</cwe>
</category>
<category categoryid="17" categoryname="Code Quality" pcirelated="false">
<desc>
<para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to:">
<bulletitem text="Neglecting to remove debug code or dead code"/>
<bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
<bulletitem text="Using the incorrect operator to compare objects"/>
<bulletitem text="Failing to follow an API or framework specification"/>
<bulletitem text="Using a language feature or API in an unintended manner"/>
</para>
<para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
</desc>
<recommendations>
<para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
</recommendations>
<cwe cweid="489" cwename="Leftover Debug Code" pcirelated="false">
<description>
<text text="A method may be leftover debug code that creates an unintended entry point in a web application.  Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method.  Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="78" module="roller-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlacklistUpdateTask.java" line="70" sourcefilepath="org/apache/roller/ui/core/tasks/" scope="org.apache.roller.ui.core.tasks.BlacklistUpdateTask" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="273" module="roller-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConsistencyCheck.java" line="51" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.ConsistencyCheck" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="124" module="roller-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="OldRollerConfig.java" line="869" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.OldRollerConfig" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="209" module="roller-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PasswordUtility.java" line="58" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.PasswordUtility" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="28" module="roller-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RefreshEntriesTask.java" line="44" sourcefilepath="org/apache/roller/ui/core/tasks/" scope="org.apache.roller.ui.core.tasks.RefreshEntriesTask" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="75" module="roller-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SyncWebsitesTask.java" line="53" sourcefilepath="org/apache/roller/ui/core/tasks/" scope="org.apache.roller.ui.core.tasks.SyncWebsitesTask" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="215" module="roller-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TechnoratiRankingsTask.java" line="53" sourcefilepath="org/apache/roller/ui/core/tasks/" scope="org.apache.roller.ui.core.tasks.TechnoratiRankingsTask" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="11" module="roller-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TurnoverReferersTask.java" line="80" sourcefilepath="org/apache/roller/ui/core/tasks/" scope="org.apache.roller.ui.core.tasks.TurnoverReferersTask" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="189" module="roller-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XSLTransform.java" line="41" sourcefilepath="org/apache/roller/util/" scope="org.apache.roller.util.XSLTransform" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
</staticflaws>
</cwe>
</category>
<category categoryid="10" categoryname="Credentials Management" pcirelated="true">
<desc>
<para text="Improper management of credentials, such as usernames and passwords, may compromise system security.  In particular, storing passwords in plaintext or hard-coding passwords directly into application code are design issues that cannot be easily remedied.  Not only does embedding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult.  Once the code is in production, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack, putting customers at risk."/>
<para text="One variation on hard-coding plaintext passwords is to hard-code a constant string which is the result of a cryptographic one-way hash.  For example, instead of storing the word &quot;secret,&quot; the application stores an MD5 hash of the word.  This is a common mechanism for obscuring hard-coded passwords from casual viewing but does not significantly reduce risk.  However, using cryptographic hashes for data stored outside the application code can be an effective practice."/>
</desc>
<recommendations>
<para text="Avoid storing passwords in easily accessible locations, and never store any type of sensitive data in plaintext.  Avoid using hard-coded usernames, passwords, or hash constants whenever possible, particularly in relation to security-critical components.   Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in alternate locations such as configuration or properties files."/>
</recommendations>
<cwe cweid="256" cwename="Plaintext Storage of a Password" pcirelated="true" owasp="930">
<description>
<text text="A method reads and/or stores sensitive information in plaintext, making the data more susceptible to compromise."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Plaintext Storage of a Password" count="1" issueid="106" module="roller-orig.war" type="java.sql.DriverManager.getConnection" description="The java.sql.DriverManager.getConnection() method reads and/or stores sensitive information in plaintext, making the data more susceptible to compromise.

Never store sensitive data in plaintext. Consider using cryptographic hashes as an alternative to plaintext. The third argument to getConnection() contains data from server-side storage from the variable password. The data from server-side storage originated from an earlier call to java.io.FileInputStream.!ctor.

References: 
CWE (http://cwe.mitre.org/data/definitions/256.html)

" note="" cweid="256" remediationeffort="4" exploitLevel="0" categoryid="10" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConsistencyCheck.java" line="95" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.ConsistencyCheck" functionprototype="java.sql.Connection createConnection(java.util.Properties, java.lang.String)" functionrelativelocation="91"/>
</staticflaws>
</cwe>
<cwe cweid="259" cwename="Use of Hard-coded Password" pcirelated="true" owasp="930" sans="798" certjava="861">
<description>
<text text="A method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="263" module="roller-orig.war" type="setPassword" description="The setPassword() method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. The first argument to setPassword() contains hard-coded data from the variable password.

Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.

References: 
CWE (http://cwe.mitre.org/data/definitions/259.html)

" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CustomUserRegistry.java" line="94" sourcefilepath="org/apache/roller/ui/core/security/" scope="org.apache.roller.ui.core.security.CustomUserRegistry" functionprototype="pojos.UserData getUserDetailsFromAuthentication(void)" functionrelativelocation="38"/>
<flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="200" module="roller-orig.war" type="setPasswordText" description="The setPasswordText() method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. The first argument to setPasswordText() contains hard-coded data from the variable password.

Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.

References: 
CWE (http://cwe.mitre.org/data/definitions/259.html)

" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserNewAction.java" line="219" sourcefilepath="org/apache/roller/ui/core/struts/actions/" scope="org.apache.roller.ui.core.struts.actions.UserNewAction" functionprototype="struts.action.ActionMessages validate(authoring.struts.formbeans.UserFormEx, struts.action.ActionMessages)" functionrelativelocation="45"/>
<flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="222" module="roller-orig.war" type="setPasswordConfirm" description="The setPasswordConfirm() method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. The first argument to setPasswordConfirm() contains hard-coded data from the variable password.

Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.

References: 
CWE (http://cwe.mitre.org/data/definitions/259.html)

" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserNewAction.java" line="220" sourcefilepath="org/apache/roller/ui/core/struts/actions/" scope="org.apache.roller.ui.core.struts.actions.UserNewAction" functionprototype="struts.action.ActionMessages validate(authoring.struts.formbeans.UserFormEx, struts.action.ActionMessages)" functionrelativelocation="50"/>
</staticflaws>
</cwe>
</category>
<category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="true">
<desc>
<para text="Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
<para text="XSS vulnerabilities can be either persistent or transient (often referred to as stored and reflected, respectively).  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
</desc>
<recommendations>
<para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
<bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code (a common technique in Web 2.0 applications), additional restrictions may be necessary beyond simple HTML encoding."/>
<bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
<bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
</para>
</recommendations>
<cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" pcirelated="true" owasp="931" sans="79">
<description>
<text text="This call contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="133" module="roller-orig.war" type="java.io.PrintWriter.print" description="This call to java.io.PrintWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by org.apache.jasper.runtime.PageContextImpl.getOut, javax.servlet.jsp.JspWriter.!ctor, and javax.servlet.jsp.JspContext.getOut.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CalendarTag.java" line="186" sourcefilepath="org/apache/roller/ui/core/tags/calendar/" scope="org.apache.roller.ui.core.tags.calendar.CalendarTag" functionprototype="int doStartTag(java.io.PrintWriter)" functionrelativelocation="42">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="174" module="roller-orig.war" type="java.io.PrintWriter.print" description="This call to java.io.PrintWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable model.computeNextMonthUrl(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by org.apache.jasper.runtime.PageContextImpl.getOut, javax.servlet.jsp.JspWriter.!ctor, and javax.servlet.jsp.JspContext.getOut.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CalendarTag.java" line="191" sourcefilepath="org/apache/roller/ui/core/tags/calendar/" scope="org.apache.roller.ui.core.tags.calendar.CalendarTag" functionprototype="int doStartTag(java.io.PrintWriter)" functionrelativelocation="52">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="61" module="roller-orig.war" type="java.io.PrintWriter.print" description="This call to java.io.PrintWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable model.computeTodayMonthUrl(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by org.apache.jasper.runtime.PageContextImpl.getOut, javax.servlet.jsp.JspWriter.!ctor, and javax.servlet.jsp.JspContext.getOut.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CalendarTag.java" line="244" sourcefilepath="org/apache/roller/ui/core/tags/calendar/" scope="org.apache.roller.ui.core.tags.calendar.CalendarTag" functionprototype="int doStartTag(java.io.PrintWriter)" functionrelativelocation="93">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="168" module="roller-orig.war" type="java.io.PrintWriter.println" description="This call to java.io.PrintWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable authenticator.getHtml(). The tainted data originated from an earlier call to org.apache.roller.ui.rendering.util.CommentAuthenticator.getHtml. The tainted data is directed into an output stream returned by javax.servlet.ServletResponse.getWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CommentAuthenticatorServlet.java" line="68" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.CommentAuthenticatorServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="93">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="121" module="roller-orig.war" type="java.io.PrintWriter.println" description="This call to java.io.PrintWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable website.getHandle(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by org.apache.jasper.runtime.PageContextImpl.getOut, javax.servlet.jsp.JspWriter.!ctor, and javax.servlet.jsp.JspContext.getOut.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RssBadgeTag.java" line="56" sourcefilepath="org/apache/roller/ui/authoring/tags/" scope="org.apache.roller.ui.authoring.tags.RssBadgeTag" functionprototype="int doStartTag(java.io.PrintWriter)" functionrelativelocation="64">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="42" module="roller-orig.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable xformed. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspContext.getOut, org.apache.jasper.runtime.PageContextImpl.getOut, and javax.servlet.jsp.JspWriter.!ctor.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ShowEntrySummaryTag.java" line="70" sourcefilepath="org/apache/roller/ui/authoring/tags/" scope="org.apache.roller.ui.authoring.tags.ShowEntrySummaryTag" functionprototype="int doStartTag()" functionrelativelocation="81">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="117" module="roller-orig.war" type="java.io.PrintWriter.print" description="This call to java.io.PrintWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable user.getUserName(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.ServletResponse.getWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserDataServlet.java" line="76" sourcefilepath="org/apache/roller/ui/authoring/ajax/" scope="org.apache.roller.ui.authoring.ajax.UserDataServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="75">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="145" module="roller-orig.war" type="java.io.PrintWriter.println" description="This call to java.io.PrintWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable user.getEmailAddress(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.ServletResponse.getWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserDataServlet.java" line="78" sourcefilepath="org/apache/roller/ui/authoring/ajax/" scope="org.apache.roller.ui.authoring.ajax.UserDataServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="86">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
<category categoryid="12" categoryname="Cryptographic Issues" pcirelated="false">
<desc>
<para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
<para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
<para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
</desc>
<recommendations>
<para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &quot;security through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate for the data being protected; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
</recommendations>
<cwe cweid="331" cwename="Insufficient Entropy" pcirelated="false" sans="327">
<description>
<text text="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand()."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="219" module="roller-orig.war" type="java.lang.Math.random" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MathCommentAuthenticator.java" line="46" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.MathCommentAuthenticator" functionprototype="java.lang.String getHtml(javax.servlet.http.HttpServletRequest)" functionrelativelocation="11"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="281" module="roller-orig.war" type="java.lang.Math.random" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MathCommentAuthenticator.java" line="47" sourcefilepath="org/apache/roller/ui/rendering/util/" scope="org.apache.roller.ui.rendering.util.MathCommentAuthenticator" functionprototype="java.lang.String getHtml(javax.servlet.http.HttpServletRequest)" functionrelativelocation="15"/>
</staticflaws>
</cwe>
</category>
<category categoryid="1" categoryname="Directory Traversal" pcirelated="false">
<desc>
<para text="Allowing user input to control paths used in filesystem operations may enable an attacker to access or modify otherwise protected system resources that would normally be inaccessible to end users.  In some cases, the user-provided input may be passed directly to the filesystem operation, or it may be concatenated to one or more fixed strings to construct a fully-qualified path."/>
<para text="When an application improperly cleanses special character sequences in user-supplied filenames, a path traversal (or directory traversal) vulnerability may occur.  For example, an attacker could specify a filename such as &quot;../../etc/passwd&quot;, which resolves to a file outside of the intended directory that the attacker would not normally be authorized to view."/>
</desc>
<recommendations>
<para text="Assume all user-supplied input is malicious.  Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters and ensure that the end result is not dangerous."/>
</recommendations>
<cwe cweid="73" cwename="External Control of File Name or Path" pcirelated="false" sans="22" certcpp="877">
<description>
<text text="This call contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="142" module="roller-orig.war" type="java.io.FileInputStream.!operator_javanewinit" description="This call to java.io.FileInputStream.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable fileName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DiskFeedInfoCache.java" line="53" sourcefilepath="org/apache/roller/util/rome/" scope="org.apache.roller.util.rome.DiskFeedInfoCache" functionprototype="com.sun.syndication.fetcher.impl.SyndFeedInfo getFeedInfo(java.net.URL)" functionrelativelocation="29">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="258" module="roller-orig.war" type="java.io.FileOutputStream.!operator_javanewinit" description="This call to java.io.FileOutputStream.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable fileName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DiskFeedInfoCache.java" line="82" sourcefilepath="org/apache/roller/util/rome/" scope="org.apache.roller.util.rome.DiskFeedInfoCache" functionprototype="void setFeedInfo(java.net.URL, com.sun.syndication.fetcher.impl.SyndFeedInfo)" functionrelativelocation="48">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="282" module="roller-orig.war" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable weblogHandle. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FileManagerImpl.java" line="149" sourcefilepath="org/apache/roller/business/" scope="org.apache.roller.business.FileManagerImpl" functionprototype="byte overQuota(java.lang.String)" functionrelativelocation="45">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="137" module="roller-orig.war" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable dir. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FileManagerImpl.java" line="171" sourcefilepath="org/apache/roller/business/" scope="org.apache.roller.business.FileManagerImpl" functionprototype="java.io.File [] getFiles(java.lang.String)" functionrelativelocation="83">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="99" module="roller-orig.war" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variables name, and dir. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FileManagerImpl.java" line="182" sourcefilepath="org/apache/roller/business/" scope="org.apache.roller.business.FileManagerImpl" functionprototype="void deleteFile(java.lang.String, java.lang.String)" functionrelativelocation="85">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="141" module="roller-orig.war" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable weblogHandle. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FileManagerImpl.java" line="206" sourcefilepath="org/apache/roller/business/" scope="org.apache.roller.business.FileManagerImpl" functionprototype="void saveFile(java.lang.String, java.lang.String, java.lang.String, long, java.io.InputStream)" functionrelativelocation="29">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="165" module="roller-orig.war" type="java.io.FileOutputStream.!operator_javanewinit" description="This call to java.io.FileOutputStream.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variables name, and dirPath.getAbsolutePath(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getHeader.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FileManagerImpl.java" line="212" sourcefilepath="org/apache/roller/business/" scope="org.apache.roller.business.FileManagerImpl" functionprototype="void saveFile(java.lang.String, java.lang.String, java.lang.String, long, java.io.InputStream)" functionrelativelocation="49">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="216" module="roller-orig.war" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable weblogHandle. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FileManagerImpl.java" line="240" sourcefilepath="org/apache/roller/business/" scope="org.apache.roller.business.FileManagerImpl" functionprototype="int getWebsiteDirSize(java.lang.String, java.lang.String)" functionrelativelocation="28">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="116" module="roller-orig.war" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable cacheDirName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HibernatePlanetManagerImpl.java" line="408" sourcefilepath="org/apache/roller/business/hibernate/" scope="org.apache.roller.business.hibernate.HibernatePlanetManagerImpl" functionprototype="void refreshEntries()" functionrelativelocation="19">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="44" module="roller-orig.war" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variables form.getImportFileName(), and website.getHandle(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ImportEntriesAction.java" line="86" sourcefilepath="org/apache/roller/ui/authoring/struts/actions/" scope="org.apache.roller.ui.authoring.struts.actions.ImportEntriesAction" functionprototype="struts.action.ActionForward importEntries(struts.action.ActionMapping, struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="53">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="289" module="roller-orig.war" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable rreq.getWebsite().getHandle(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ImportEntriesAction.java" line="173" sourcefilepath="org/apache/roller/ui/authoring/struts/actions/" scope="org.apache.roller.ui.authoring.struts.actions.ImportEntriesAction" functionprototype="void getXmlFiles(struts.action.ActionForm, core.RollerRequest)" functionrelativelocation="32">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="9" module="roller-orig.war" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable resource_path. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURI.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResourceServlet.java" line="102" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.ResourceServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="26">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="102" module="roller-orig.war" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable fileName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getContentType.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RollerAtomHandler.java" line="646" sourcefilepath="org/apache/roller/webservices/atomprotocol/" scope="org.apache.roller.webservices.atomprotocol.RollerAtomHandler" functionprototype="com.sun.syndication.feed.atom.Entry postMedia(java.lang.String  [], java.lang.String, java.lang.String, java.lang.String, java.io.InputStream)" functionrelativelocation="62">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
<category categoryid="22" categoryname="Encapsulation" pcirelated="false">
<desc>
<para text="Encapsulation is about defining strong security boundaries governing data and processes. Within an application, it might mean differentiation between validated and unvalidated data, between public and private members, or between one user's data and another's.  "/>
<para text="In object-oriented programming, the term encapsulation is used to describe the grouping together of data and functionality within an object and the ability to provide users with a well-defined interface in a way which hides their internal workings.  Though there is some overlap with the above definition, the two definitions should not be confused as being interchangeable."/>
</desc>
<recommendations>
<para text="The wide variance of encapsulation issues makes it impractical to generalize how these issues should be addressed, beyond stating that encapsulation boundaries should be well-defined and adhered to.  Refer to individual categories for specific recommendations. "/>
</recommendations>
<cwe cweid="501" cwename="Trust Boundary Violation" pcirelated="false">
<description>
<text text="A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted.  This application mixes trusted and untrusted data in the same data structure.  By doing so, it becomes easier for programmers to mistakenly trust unvalidated data.  Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.  A common manifestation of this flaw is in J2EE application, when a Session object is used to store untrusted data from the HTTP request."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Trust Boundary Violation" count="1" issueid="128" module="roller-orig.war" type="span.set" description="This call to span.set() mixes trusted and untrusted data in the same data structure, thereby encouraging programmers to mistakenly trust unvalidated data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid storing untrusted data alongside trusted data in the same data structure. Establish and maintain trust boundaries for data storage.

References: 
CWE (http://cwe.mitre.org/data/definitions/501.html)

" note="" cweid="501" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ImportBookmarksFormAction.java" line="188" sourcefilepath="org/apache/roller/ui/authoring/struts/actions/" scope="org.apache.roller.ui.authoring.struts.actions.ImportBookmarksFormAction" functionprototype="pojos.WebsiteData getWebsite(javax.servlet.http.HttpServletRequest)" functionrelativelocation="58"/>
<flaw severity="3" categoryname="Trust Boundary Violation" count="1" issueid="94" module="roller-orig.war" type="span.set" description="This call to span.set() mixes trusted and untrusted data in the same data structure, thereby encouraging programmers to mistakenly trust unvalidated data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid storing untrusted data alongside trusted data in the same data structure. Establish and maintain trust boundaries for data storage.

References: 
CWE (http://cwe.mitre.org/data/definitions/501.html)

" note="" cweid="501" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UploadFileFormAction.java" line="267" sourcefilepath="org/apache/roller/ui/authoring/struts/actions/" scope="org.apache.roller.ui.authoring.struts.actions.UploadFileFormAction" functionprototype="pojos.WebsiteData getWebsite(javax.servlet.http.HttpServletRequest)" functionrelativelocation="36"/>
<flaw severity="3" categoryname="Trust Boundary Violation" count="1" issueid="202" module="roller-orig.war" type="span.set" description="This call to span.set() mixes trusted and untrusted data in the same data structure, thereby encouraging programmers to mistakenly trust unvalidated data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid storing untrusted data alongside trusted data in the same data structure. Establish and maintain trust boundaries for data storage.

References: 
CWE (http://cwe.mitre.org/data/definitions/501.html)

" note="" cweid="501" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebsiteFormAction.java" line="190" sourcefilepath="org/apache/roller/ui/authoring/struts/actions/" scope="org.apache.roller.ui.authoring.struts.actions.WebsiteFormAction" functionprototype="struts.action.ActionForward update(struts.action.ActionMapping, struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="55"/>
</staticflaws>
</cwe>
</category>
<category categoryid="25" categoryname="Insufficient Input Validation" pcirelated="false">
<desc>
<para text="Weaknesses in this category are related to an absent or incorrect protection mechanism that fails to properly validate input that can affect the control flow or data flow of a program."/>
</desc>
<recommendations>
<para text="Validate input from untrusted sources before it is used. The untrusted data sources may include HTTP requests, file systems, databases, and any external systems that provide data to the application. In the case of HTTP requests, validate all parts of the request, including headers, form fields, cookies, and URL components that are used to transfer information from the browser to the server side application."/>
<para text="Duplicate any client-side checks on the server side. This should be simple to implement in terms of time and difficulty, and will greatly reduce the likelihood of insecure parameter values being used in the application."/>
</recommendations>
<cwe cweid="104" cwename="Struts: Form Bean Does Not Extend Validation Class" pcirelated="false">
<description>
<text text="The application defines form beans that do not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation. In order to use the Struts Validator, a form must extend ValidatorForm, ValidatorActionForm, DynaValidatorActionForm, or DynaValidatorForm.  Forms derived from ActionForm and DynaActionForm classes cannot use the Struts validation framework."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="115" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.BakeWeblogForm" description="The org.apache.roller.ui.authoring.struts.formbeans.BakeWeblogForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BakeWeblogForm.java" line="30" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="81" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.BookmarksForm" description="The org.apache.roller.ui.authoring.struts.formbeans.BookmarksForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BookmarksForm.java" line="28" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="207" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.CategoryDeleteForm" description="The org.apache.roller.ui.authoring.struts.formbeans.CategoryDeleteForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CategoryDeleteForm.java" line="30" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="220" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.CommentForm" description="The org.apache.roller.ui.authoring.struts.forms.CommentForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CommentForm.java" line="30" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="127" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.CommentManagementForm" description="The org.apache.roller.ui.authoring.struts.formbeans.CommentManagementForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CommentManagementForm.java" line="42" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="66" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.CreateWebsiteForm" description="The org.apache.roller.ui.authoring.struts.formbeans.CreateWebsiteForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreateWebsiteForm.java" line="40" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="243" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.ImportEntriesForm" description="The org.apache.roller.ui.authoring.struts.formbeans.ImportEntriesForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ImportEntriesForm.java" line="31" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="87" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.InvitationsForm" description="The org.apache.roller.ui.authoring.struts.formbeans.InvitationsForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="InvitationsForm.java" line="25" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="191" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.InviteMemberForm" description="The org.apache.roller.ui.authoring.struts.formbeans.InviteMemberForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="InviteMemberForm.java" line="26" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="37" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.MaintenanceForm" description="The org.apache.roller.ui.authoring.struts.formbeans.MaintenanceForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MaintenanceForm.java" line="26" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="48" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.MemberPermissionsForm" description="The org.apache.roller.ui.authoring.struts.formbeans.MemberPermissionsForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MemberPermissionsForm.java" line="26" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="51" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.ObjectAuditForm" description="The org.apache.roller.ui.authoring.struts.forms.ObjectAuditForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ObjectAuditForm.java" line="23" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="108" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.PermissionsForm" description="The org.apache.roller.ui.authoring.struts.forms.PermissionsForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PermissionsForm.java" line="22" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="56" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.PingSetupForm" description="The org.apache.roller.ui.authoring.struts.formbeans.PingSetupForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PingSetupForm.java" line="28" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="286" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.PingTargetForm" description="The org.apache.roller.ui.authoring.struts.forms.PingTargetForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PingTargetForm.java" line="24" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="77" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.PlanetConfigForm" description="The org.apache.roller.ui.authoring.struts.forms.PlanetConfigForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanetConfigForm.java" line="31" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="4" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.PlanetGroupForm" description="The org.apache.roller.ui.authoring.struts.forms.PlanetGroupForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanetGroupForm.java" line="27" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="33" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.PlanetSubscriptionForm" description="The org.apache.roller.ui.authoring.struts.forms.PlanetSubscriptionForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanetSubscriptionForm.java" line="29" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="109" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.RefererForm" description="The org.apache.roller.ui.authoring.struts.forms.RefererForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RefererForm.java" line="32" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="47" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.RoleForm" description="The org.apache.roller.ui.authoring.struts.forms.RoleForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RoleForm.java" line="21" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="279" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.RollerConfigForm" description="The org.apache.roller.ui.authoring.struts.forms.RollerConfigForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RollerConfigForm.java" line="47" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="130" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.ThemeEditorForm" description="The org.apache.roller.ui.authoring.struts.formbeans.ThemeEditorForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ThemeEditorForm.java" line="30" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="172" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.TrackbackForm" description="The org.apache.roller.ui.authoring.struts.formbeans.TrackbackForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TrackbackForm.java" line="32" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="181" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.UploadFileForm" description="The org.apache.roller.ui.authoring.struts.formbeans.UploadFileForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UploadFileForm.java" line="34" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="20" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.UserForm" description="The org.apache.roller.ui.authoring.struts.forms.UserForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserForm.java" line="28" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="2" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.WeblogCategoryForm" description="The org.apache.roller.ui.authoring.struts.forms.WeblogCategoryForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogCategoryForm.java" line="34" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="188" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.WeblogEntryForm" description="The org.apache.roller.ui.authoring.struts.forms.WeblogEntryForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogEntryForm.java" line="55" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="63" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.WeblogEntryManagementForm" description="The org.apache.roller.ui.authoring.struts.formbeans.WeblogEntryManagementForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogEntryManagementForm.java" line="37" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="210" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.WeblogTemplateForm" description="The org.apache.roller.ui.authoring.struts.forms.WeblogTemplateForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WeblogTemplateForm.java" line="30" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="261" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.WebsiteDisplayForm" description="The org.apache.roller.ui.authoring.struts.forms.WebsiteDisplayForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebsiteDisplayForm.java" line="21" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="6" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.WebsiteForm" description="The org.apache.roller.ui.authoring.struts.forms.WebsiteForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebsiteForm.java" line="69" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Form Bean Does Not Extend Validation Class" count="1" issueid="242" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.formbeans.YourWebsitesForm" description="The org.apache.roller.ui.authoring.struts.formbeans.YourWebsitesForm class does not extend an ActionForm subclass of the Struts Validator framework, potentially exposing the application to other weaknesses related to insufficient input validation.

Extend one of the Struts Validator classes in order to take advantage of the centralized input validation provided by the framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/104.html)

" note="" cweid="104" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="YourWebsitesForm.java" line="26" sourcefilepath="org/apache/roller/ui/authoring/struts/formbeans/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
</staticflaws>
</cwe>
<cwe cweid="103" cwename="Struts: Incomplete validate() Method Definition" pcirelated="false">
<description>
<text text="The application has a validator form that either fails to define a validate() method, or defines a validate() method but fails to call super.validate().  Any class that extends ValidatorForm, ValidatorActionForm, DynaValidatorForm, or DynaValidatorActionForm and implements custom validation logic by overriding the validate() method, that implementation must call super.validate().  Failing to do so will essentially disable the Struts Validator framework for the given form, potentially exposing the application to other weaknesses related to insufficient input validation."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Struts: Incomplete validate() Method Definition" count="1" issueid="197" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.BookmarkForm" description="The org.apache.roller.ui.authoring.struts.forms.BookmarkForm class has a validator form that fails to implement a validate() method as defined by the Struts Validator framework. This could expose the application to other weaknesses related to insufficient input validation.

Be sure to implement the validate() method in order to take advantage of the Struts Validation framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/103.html)

" note="" cweid="103" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BookmarkForm.java" line="27" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
<flaw severity="3" categoryname="Struts: Incomplete validate() Method Definition" count="1" issueid="29" module="roller-orig.war" type="org.apache.roller.ui.authoring.struts.forms.FolderForm" description="The org.apache.roller.ui.authoring.struts.forms.FolderForm class has a validator form that fails to implement a validate() method as defined by the Struts Validator framework. This could expose the application to other weaknesses related to insufficient input validation.

Be sure to implement the validate() method in order to take advantage of the Struts Validation framework.

References: 
CWE (http://cwe.mitre.org/data/definitions/103.html)

" note="" cweid="103" remediationeffort="2" exploitLevel="0" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FolderForm.java" line="34" sourcefilepath="org/apache/roller/ui/authoring/struts/forms/" scope="Global Scope" functionprototype="" functionrelativelocation="-1"/>
</staticflaws>
</cwe>
<cwe cweid="470" cwename="Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" pcirelated="false" certjava="859">
<description>
<text text="A call uses reflection in an unsafe manner.  An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application.  Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner.  Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the user-supplied class name will have already executed."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" count="1" issueid="68" module="roller-orig.war" type="java.lang.Class.forName" description="This call to java.lang.Class.forName() uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the user-supplied class name will have already executed. The first argument to forName() contains tainted data from the variable models. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate the class name against a combination of white and black lists to ensure that only expected behavior is produced.

References: 
CWE (http://cwe.mitre.org/data/definitions/470.html) 
OWASP (http://www.owasp.org/index.php/Unsafe_Reflection)

" note="" cweid="470" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ModelLoader.java" line="91" sourcefilepath="org/apache/roller/ui/rendering/model/" scope="org.apache.roller.ui.rendering.model.ModelLoader" functionprototype="void loadModels(java.lang.String, java.util.Map, java.util.Map, byte)" functionrelativelocation="8">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>The class name being passed to the reflection operation is tainted.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
<category categoryid="14" categoryname="Time and State" pcirelated="false">
<desc>
<para text="Time and State flaws are related to unexpected interactions between threads, processes, time, and information. These interactions happen through shared state: semaphores, variables, the filesystem, and basically anything that can store information.  Vulnerabilities occur when there is a discrepancy between the programmer's assumption of how a program executes and what happens in reality. "/>
<para text="State issues result from improper management or invalid assumptions about system state, such as assuming mutable objects are immutable.  Though these conditions are less commonly exploited by attackers, state issues can lead to unpredictable or undefined application behavior."/>
</desc>
<recommendations>
<para text="Limit the interleaving of operations on resources from multiple processes.  Use locking mechanisms to protect resources effectively.  Follow best practices with respect to mutable objects and internal references.  Pay close attention to asynchronous actions in processes and make copious use of sanity checks in systems that may be subject to synchronization errors."/>
</recommendations>
<cwe cweid="377" cwename="Insecure Temporary File" pcirelated="false" certjava="857">
<description>
<text text="Creating and using insecure temporary files can leave application and system data vulnerable to attack.  In particular, file names created by the tmpnam family of functions can be easily guessed by an attacker.  If an attacker can predict the filename and create a malicious collision, he may be able to manipulate the behavior of the application."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Insecure Temporary File" count="1" issueid="80" module="roller-orig.war" type="java.io.File.createTempFile" description="This call to java.io.File.createTempFile() creates an insecure temporary file. Creating and using insecure temporary files can leave application and system data vulnerable to attack.

Some languages provide an API for creating secure temporary files. For example, in C/C++, mkstemp() will attempt to create and open a unique file based on a filename template provided by the user, combined with a series of randomly generated characters. Note that mkstemp() is safe if only the descriptor is used and the returned filename is not used in a subsequent function call with extra privileges. Using mkstemp() does not completely eliminate race conditions but does provide better protection than other methods. Other languages may provide similar mechanisms, or you may need to implement one yourself using a combination of a cryptographic RNG to avoid predictability and synchronization to avoid race conditions. Also, be sure to assign restrictive file permissions to temporary files and to delete them immediately after use.

References: 
CWE (http://cwe.mitre.org/data/definitions/377.html) 
US-CERT (https://buildsecurityin.us-cert.gov/daisy/bsi-rules/home/g1/861.html)

" note="" cweid="377" remediationeffort="2" exploitLevel="0" categoryid="14" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RollerAtomHandler.java" line="634" sourcefilepath="org/apache/roller/webservices/atomprotocol/" scope="org.apache.roller.webservices.atomprotocol.RollerAtomHandler" functionprototype="com.sun.syndication.feed.atom.Entry postMedia(java.lang.String  [], java.lang.String, java.lang.String, java.lang.String, java.io.InputStream)" functionrelativelocation="25"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="2">
<category categoryid="7" categoryname="API Abuse" pcirelated="false">
<desc>
<para text="An API is a contract between a caller and a callee. Incorrect usage of certain API functions can result in exploitable security vulnerabilities."/>
<para text="The most common forms of API abuse are caused by the caller failing to honor its end of this contract.  For example, if a program fails to call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion.  Providing too few arguments to a varargs function such as printf() also violates the API contract and will cause the missing parameters to be populated with unexpected data from the stack."/>
<para text="Another common mishap is when the caller makes false assumptions about the callee's behavior.  One example of this is when a caller expects a DNS-related function to return trustworthy information that can be used for authentication purposes.  This is a bad assumption because DNS responses can be easily spoofed."/>
</desc>
<recommendations>
<para text="When calling API functions, be sure to fully understand and adhere to the specifications to avoid introducing security vulnerabilities.  Do not make assumptions about trustworthiness of the data returned from API calls or use the data in a context that was unintended by that API."/>
</recommendations>
<cwe cweid="245" cwename="J2EE Bad Practices: Direct Management of Connections" pcirelated="false">
<description>
<text text="The J2EE application directly manages connections rather than using the container's resource management facilities to obtain connections as specified in the J2EE standard.  Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="60" module="roller-orig.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConsistencyCheck.java" line="95" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.ConsistencyCheck" functionprototype="java.sql.Connection createConnection(java.util.Properties, java.lang.String)" functionrelativelocation="91"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="218" module="roller-orig.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConsistencyCheck.java" line="99" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.ConsistencyCheck" functionprototype="java.sql.Connection createConnection(java.util.Properties, java.lang.String)" functionrelativelocation="97"/>
</staticflaws>
</cwe>
</category>
<category categoryid="17" categoryname="Code Quality" pcirelated="false">
<desc>
<para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to:">
<bulletitem text="Neglecting to remove debug code or dead code"/>
<bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
<bulletitem text="Using the incorrect operator to compare objects"/>
<bulletitem text="Failing to follow an API or framework specification"/>
<bulletitem text="Using a language feature or API in an unintended manner"/>
</para>
<para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
</desc>
<recommendations>
<para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
</recommendations>
<cwe cweid="404" cwename="Improper Resource Shutdown or Release" pcirelated="false" certc="743" certcpp="876" certjava="857">
<description>
<text text="The application fails to release (or incorrectly releases) a system resource before it is made available for re-use.  This condition often occurs with resources such as database connections or file handles.  Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be possible to launch a denial of service attack by depleting the resource pool."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Improper Resource Shutdown or Release" count="1" issueid="158" module="roller-orig.war" type="java.sql.Connection.createStatement" description="There are total of 25 instances. The program fails to release or incorrectly releases some variables, e.g. the variable websitesStatement, which was previously allocated by a call to java.sql.Connection.createStatement().

Ensure that all code paths properly release this resource.

References: 
CWE (http://cwe.mitre.org/data/definitions/404.html)

" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="nnc" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConsistencyCheck.java" line="160" sourcefilepath="org/apache/roller/business/utils/" scope="org.apache.roller.business.utils.ConsistencyCheck" functionprototype="void correctFolderTrees(java.sql.Connection, byte)" functionrelativelocation="7"/>
</staticflaws>
</cwe>
</category>
<category categoryid="12" categoryname="Cryptographic Issues" pcirelated="true">
<desc>
<para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
<para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
<para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
</desc>
<recommendations>
<para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &quot;security through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate for the data being protected; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
</recommendations>
<cwe cweid="614" cwename="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" pcirelated="true" sans="311">
<description>
<text text="Setting the Secure attribute on an HTTP cookie instructs the web browser to send it only over a secure channel, such as an SSL connection.  Issuing a cookie without the Secure attribute allows the browser to transmit it over unencrypted connections, which are susceptible to eavesdropping.  It is particularly important to set the Secure attribute on any cookies containing sensitive data, such as authentication information (e.g. &quot;remember me&quot; style functionality)."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="247" module="roller-orig.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html) 
WASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RequestUtil.java" line="195" sourcefilepath="org/apache/roller/ui/core/util/" scope="org.apache.roller.ui.core.util.RequestUtil" functionprototype="void setCookie(javax.servlet.http.HttpServletResponse, java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="94"/>
<flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="52" module="roller-orig.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html) 
WASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RequestUtil.java" line="250" sourcefilepath="org/apache/roller/ui/core/util/" scope="org.apache.roller.ui.core.util.RequestUtil" functionprototype="void deleteCookie(javax.servlet.http.HttpServletResponse, javax.servlet.http.Cookie, java.lang.String)" functionrelativelocation="72"/>
</staticflaws>
</cwe>
</category>
<category categoryid="8" categoryname="Information Leakage" pcirelated="true">
<desc>
<para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product's own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
<para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to:">
<bulletitem text="Source code disclosure"/>
<bulletitem text="Browsable directories"/>
<bulletitem text="Log files or backup files in web-accessible directories"/>
<bulletitem text="Unfiltered backend error messages"/>
<bulletitem text="Exception stack traces"/>
<bulletitem text="Server version information"/>
<bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
</para>
</desc>
<recommendations>
<para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
<para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application's web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
</recommendations>
<cwe cweid="209" cwename="Information Exposure Through an Error Message" pcirelated="true" sans="801" certcpp="880" certjava="851">
<description>
<text text="The software generates an error message that includes sensitive information about its environment, users, or associated data.  The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.  For example, file locations disclosed by an exception stack trace may be leveraged by an attacker to exploit a path traversal issue elsewhere in the application."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="193" module="roller-orig.war" type="java.lang.Throwable.printStackTrace" description="While processing an exception, the application calls the java.lang.Throwable.printStackTrace() function, which transmits sensitive data through standard data channels. This may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components.

Capture exceptions for debugging purposes, but ensure that only generic error messages are returned to the end user that do not reveal any additional details.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AtomAdminServlet.java" line="63" sourcefilepath="org/apache/roller/webservices/adminapi/" scope="org.apache.roller.webservices.adminapi.AtomAdminServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="86"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="212" module="roller-orig.war" type="java.lang.Throwable.printStackTrace" description="While processing an exception, the application calls the java.lang.Throwable.printStackTrace() function, which transmits sensitive data through standard data channels. This may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components.

Capture exceptions for debugging purposes, but ensure that only generic error messages are returned to the end user that do not reveal any additional details.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AtomAdminServlet.java" line="87" sourcefilepath="org/apache/roller/webservices/adminapi/" scope="org.apache.roller.webservices.adminapi.AtomAdminServlet" functionprototype="void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="88"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="18" module="roller-orig.war" type="java.lang.Throwable.printStackTrace" description="While processing an exception, the application calls the java.lang.Throwable.printStackTrace() function, which transmits sensitive data through standard data channels. This may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components.

Capture exceptions for debugging purposes, but ensure that only generic error messages are returned to the end user that do not reveal any additional details.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AtomAdminServlet.java" line="111" sourcefilepath="org/apache/roller/webservices/adminapi/" scope="org.apache.roller.webservices.adminapi.AtomAdminServlet" functionprototype="void doPut(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="88"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="277" module="roller-orig.war" type="java.lang.Throwable.printStackTrace" description="While processing an exception, the application calls the java.lang.Throwable.printStackTrace() function, which transmits sensitive data through standard data channels. This may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components.

Capture exceptions for debugging purposes, but ensure that only generic error messages are returned to the end user that do not reveal any additional details.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AtomAdminServlet.java" line="134" sourcefilepath="org/apache/roller/webservices/adminapi/" scope="org.apache.roller.webservices.adminapi.AtomAdminServlet" functionprototype="void doDelete(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="86"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="195" module="roller-orig.war" type="java.io.PrintWriter.println" description="The application calls the java.io.PrintWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains potentially sensitive data from the variable this.getErrorResponse(). The potentially sensitive data originated from an earlier call to java.lang.Throwable.getMessage. The potentially sensitive data is directed into an output stream returned by javax.servlet.ServletResponse.getWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TrackbackServlet.java" line="131" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.TrackbackServlet" functionprototype="void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="36"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="65" module="roller-orig.war" type="java.io.PrintWriter.println" description="The application calls the java.io.PrintWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains potentially sensitive data from the variable this.getErrorResponse(). The potentially sensitive data originated from an earlier call to java.lang.Throwable.getMessage. The potentially sensitive data is directed into an output stream returned by javax.servlet.ServletResponse.getWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-16 17:48:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TrackbackServlet.java" line="220" sourcefilepath="org/apache/roller/ui/rendering/servlets/" scope="org.apache.roller.ui.rendering.servlets.TrackbackServlet" functionprototype="void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="99"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="1"/>
<severity level="0"/>
<flaw-status new="269" reopen="0" open="0" fixed="0" total="269" not_mitigated="269" sev-1-change="0" sev-2-change="11" sev-3-change="251" sev-4-change="7" sev-5-change="0"/>
</detailedreport>
