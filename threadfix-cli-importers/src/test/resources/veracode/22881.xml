<?xml version="1.0" encoding="UTF-8"?>

<detailedreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd" report_format_version="1.4" app_name="Hadoop" app_id="20362" first_build_submitted_date="2011-03-16 17:37:17 UTC" version="0.9.1.0" build_id="22881" submitter="Veracode" platform="Java" assurance_level="4" business_criticality="4" generation_date="2014-06-03 14:43:30 UTC" veracode_level="VL1" total_flaws="284" flaws_not_mitigated="284" teams="" life_cycle_stage="Deployed (In production and actively developed)" planned_deployment_date="" last_update_time="2011-03-17 01:43:18 UTC" is_latest_build="true" policy_name="Veracode Transitional High" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="" legacy_scan_engine="false">
<static-analysis rating="D" score="59" submitted_date="2011-03-16 17:34:16 UTC" published_date="2011-03-17 01:43:15 UTC" analysis_size_bytes="838617">
<modules>
<module name="hadoop-0.9.1.jar" compiler="JAVAC_5" os="Java J2SE 6" architecture="JVM" loc="170887" score="0" numflawssev0="0" numflawssev1="0" numflawssev2="6" numflawssev3="278" numflawssev4="0" numflawssev5="0"/>
</modules>
</static-analysis>
<severity level="5"/>
<severity level="4"/>
<severity level="3">
<category categoryid="21" categoryname="CRLF Injection" pcirelated="true">
<desc>
<para text="The acronym CRLF stands for &quot;Carriage Return, Line Feed&quot; and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  "/>
</desc>
<recommendations>
<para text="Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents."/>
</recommendations>
<cwe cweid="113" cwename="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" pcirelated="false">
<description>
<text text="A function call contains an HTTP response splitting flaw.  Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="271" module="hadoop-0.9.1.jar" type="javax.servlet.http.HttpServletResponse.setHeader" description="This call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The second argument to setHeader() contains tainted data from the variable filename. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="StreamFile.java" line="55" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.StreamFile" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="55"/>
</staticflaws>
</cwe>
<cwe cweid="117" cwename="Improper Output Neutralization for Logs" pcirelated="true" owasp="929">
<description>
<text text="A function call could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="138" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable address. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Client.java" line="157" sourcefilepath="org/apache/hadoop/ipc/" scope="org.apache.hadoop.ipc.Client$Connection" functionprototype="void setupIOstreams()" functionrelativelocation="50"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="255" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable path. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Configuration.java" line="375" sourcefilepath="org/apache/hadoop/conf/" scope="org.apache.hadoop.conf.Configuration" functionprototype="fs.Path getLocalPath(java.lang.String, java.lang.String)" functionrelativelocation="54"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="69" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable dirs. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Configuration.java" line="379" sourcefilepath="org/apache/hadoop/conf/" scope="org.apache.hadoop.conf.Configuration" functionprototype="fs.Path getLocalPath(java.lang.String, java.lang.String)" functionrelativelocation="83"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="144" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable this.getNameNodeAddr(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataNode.java" line="285" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DataNode" functionprototype="void register()" functionrelativelocation="45"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="224" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable origDirs.getName(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataStorage.java" line="136" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DataStorage" functionprototype="void lock(int)" functionrelativelocation="65"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="104" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable clientName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DFSClient.java" line="457" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DFSClient$LeaseChecker" functionprototype="void run()" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="173" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable fs.getName(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FileSystem.java" line="77" sourcefilepath="org/apache/hadoop/fs/" scope="org.apache.hadoop.fs.FileSystem" functionprototype="FileSystem parseArgs(java.lang.String  [], int, conf.Configuration)" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="157" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable cur. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FSDirectory.java" line="691" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.FSDirectory" functionprototype="byte mkdirs(java.lang.String)" functionrelativelocation="52"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="269" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable cur. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FSDirectory.java" line="696" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.FSDirectory" functionprototype="byte mkdirs(java.lang.String)" functionrelativelocation="79"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="185" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable taskid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IsolationRunner.java" line="42" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.IsolationRunner$FakeUmbilical" functionprototype="void done(java.lang.String)" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="277" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable buf. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IsolationRunner.java" line="67" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.IsolationRunner$FakeUmbilical" functionprototype="void progress(java.lang.String, float, java.lang.String, TaskStatus$Phase)" functionrelativelocation="90"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="52" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.error" description="This call to org.apache.commons.logging.Log.error() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable msg. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JobClient.java" line="310" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.JobClient" functionprototype="RunningJob submitJob(JobConf)" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="290" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable taskid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JobInProgress.java" line="464" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.JobInProgress" functionprototype="void completedTask(TaskInProgress, TaskStatus, JobTracker$JobTrackerMetrics)" functionrelativelocation="8"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="242" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable taskid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JobInProgress.java" line="468" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.JobInProgress" functionprototype="void completedTask(TaskInProgress, TaskStatus, JobTracker$JobTrackerMetrics)" functionrelativelocation="17"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="222" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable taskId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JobTracker.java" line="133" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.JobTracker$ExpireLaunchingTasks" functionprototype="void run()" functionrelativelocation="38"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="170" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable taskId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JobTracker.java" line="135" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.JobTracker$ExpireLaunchingTasks" functionprototype="void run()" functionrelativelocation="50"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="127" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable report.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JobTracker.java" line="1189" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.JobTracker" functionprototype="void updateTaskStatuses(TaskTrackerStatus)" functionrelativelocation="70"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="85" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable badFile. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LocalFileSystem.java" line="391" sourcefilepath="org/apache/hadoop/fs/" scope="org.apache.hadoop.fs.LocalFileSystem" functionprototype="void reportChecksumFailure(Path, FSInputStream, long, long, int)" functionrelativelocation="67"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="176" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable state. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LocalJobRunner.java" line="169" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.LocalJobRunner$Job" functionprototype="void progress(java.lang.String, float, java.lang.String, TaskStatus$Phase)" functionrelativelocation="6"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="43" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable clientName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="NameNode.java" line="214" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.NameNode" functionprototype="LocatedBlock create(java.lang.String, java.lang.String, java.lang.String, byte, char, long)" functionrelativelocation="28"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="92" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable clientName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="NameNode.java" line="242" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.NameNode" functionprototype="LocatedBlock addBlock(java.lang.String, java.lang.String)" functionrelativelocation="31"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="258" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable clientName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="NameNode.java" line="289" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.NameNode" functionprototype="byte complete(java.lang.String, java.lang.String)" functionrelativelocation="28"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="130" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variables loc.getMapTaskId(), and access$200().getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="201" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner$MapOutputCopier" functionprototype="void run()" functionrelativelocation="66"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="214" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variables loc.getMapTaskId(), and reduceId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="228" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner$MapOutputCopier" functionprototype="long copyOutput(MapOutputLocation, util.Progressable)" functionrelativelocation="17"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="288" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variables loc.getMapTaskId(), and access$200().getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="248" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner$MapOutputCopier" functionprototype="long copyOutput(MapOutputLocation, util.Progressable)" functionrelativelocation="97"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="212" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable reduceTask.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="318" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner" functionprototype="byte prepare()" functionrelativelocation="19"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="66" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable reduceTask.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="322" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner" functionprototype="byte prepare()" functionrelativelocation="23"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="194" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable reduceTask.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="333" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner" functionprototype="byte prepare()" functionrelativelocation="31"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="150" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable reduceTask.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="338" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner" functionprototype="byte prepare()" functionrelativelocation="34"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="188" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable reduceTask.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="348" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner" functionprototype="byte prepare()" functionrelativelocation="39"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="135" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable reduceTask.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="377" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner" functionprototype="byte prepare()" functionrelativelocation="58"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="83" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable reduceTask.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="391" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner" functionprototype="byte prepare()" functionrelativelocation="64"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="94" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable reduceTask.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="417" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner" functionprototype="byte prepare()" functionrelativelocation="83"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="154" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable addr. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RPC.java" line="229" sourcefilepath="org/apache/hadoop/ipc/" scope="org.apache.hadoop.ipc.RPC" functionprototype="VersionedProtocol waitForProxy(java.lang.Class, long, java.net.InetSocketAddress, conf.Configuration)" functionrelativelocation="42"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="247" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable addr. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RPC.java" line="231" sourcefilepath="org/apache/hadoop/ipc/" scope="org.apache.hadoop.ipc.RPC" functionprototype="VersionedProtocol waitForProxy(java.lang.Class, long, java.net.InetSocketAddress, conf.Configuration)" functionrelativelocation="78"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="193" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variables diagInfo, and taskid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskInProgress.java" line="279" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskInProgress" functionprototype="byte updateStatus(TaskStatus)" functionrelativelocation="32"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="179" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable taskid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskInProgress.java" line="320" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskInProgress" functionprototype="void failedSubTask(java.lang.String, java.lang.String)" functionrelativelocation="14"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="37" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable taskid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskInProgress.java" line="347" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskInProgress" functionprototype="void completed(java.lang.String)" functionrelativelocation="36"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="70" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable currentSplit. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskLog.java" line="210" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskLog$Writer" functionprototype="java.io.OutputStream createLogSplit(int)" functionrelativelocation="58"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="159" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable purgeLogSplit. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskLog.java" line="242" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskLog$Writer" functionprototype="void logRotate()" functionrelativelocation="89"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="257" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable t.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskRunner.java" line="209" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskRunner" functionprototype="void run()" functionrelativelocation="80"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="55" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable t.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskRunner.java" line="215" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskRunner" functionprototype="void run()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="28" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable javaOpts. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskRunner.java" line="262" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskRunner" functionprototype="java.lang.String handleDeprecatedHeapSize(java.lang.String, java.lang.String)" functionrelativelocation="95"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="215" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable t.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskRunner.java" line="348" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskRunner" functionprototype="void logStream(java.io.InputStream)" functionrelativelocation="52"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="208" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable t.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskRunner.java" line="353" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskRunner" functionprototype="void logStream(java.io.InputStream)" functionrelativelocation="72"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="289" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="179" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void removeTaskFromJob(java.lang.String, TaskTracker$TaskInProgress)" functionrelativelocation="41"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="225" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable tip.getTask().getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="564" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void markUnresponsiveTasks()" functionrelativelocation="79"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="153" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable killMe.getTask().getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="613" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void killOverflowingTasks()" functionrelativelocation="67"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="87" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable msg. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="707" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void startNewTask(Task)" functionrelativelocation="68"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="160" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable tip.getTask().getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="712" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void startNewTask(Task)" functionrelativelocation="97"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="234" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable jobTrackAddr. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="737" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void run()" functionrelativelocation="48"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="120" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variables state, and task.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="918" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker$TaskInProgress" functionprototype="void reportProgress(float, java.lang.String, TaskStatus$Phase)" functionrelativelocation="32"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="147" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable task.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="957" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker$TaskInProgress" functionprototype="void reportDone()" functionrelativelocation="55"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="6" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.info" description="This call to org.apache.commons.logging.Log.info() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable task.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1077" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker$TaskInProgress" functionprototype="void mapOutputLost(java.lang.String)" functionrelativelocation="25"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="114" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable task.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1085" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker$TaskInProgress" functionprototype="void mapOutputLost(java.lang.String)" functionrelativelocation="95"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="95" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.debug" description="This call to org.apache.commons.logging.Log.debug() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data from the variable taskId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1096" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker$TaskInProgress" functionprototype="void cleanup()" functionrelativelocation="18"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="189" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable taskid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1154" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void progress(java.lang.String, float, java.lang.String, TaskStatus$Phase)" functionrelativelocation="91"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="219" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable taskid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1167" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void reportDiagnosticInfo(java.lang.String, java.lang.String)" functionrelativelocation="90"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="35" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable taskid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1184" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void done(java.lang.String)" functionrelativelocation="90"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="256" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable taskid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1213" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void reportTaskFinished(java.lang.String)" functionrelativelocation="94"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="64" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable taskid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1226" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void mapOutputLost(java.lang.String, java.lang.String)" functionrelativelocation="90"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="10" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable errorMsg. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1457" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker$MapOutputServlet" functionprototype="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="133" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable string.substring(). The tainted data originated from earlier calls to javax.servlet.ServletRequest.getParameter, and javax.servlet.ServletRequest.getParameterMap.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UTF8.java" line="72" sourcefilepath="org/apache/hadoop/io/" scope="org.apache.hadoop.io.UTF8" functionprototype="void set(java.lang.String)" functionrelativelocation="26"/>
<flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="139" module="hadoop-0.9.1.jar" type="org.apache.commons.logging.Log.warn" description="This call to org.apache.commons.logging.Log.warn() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data from the variable s.substring(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection) 
WASC (http://webappsec.pbworks.com/Improper-Output-Handling)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UTF8.java" line="237" sourcefilepath="org/apache/hadoop/io/" scope="org.apache.hadoop.io.UTF8" functionprototype="int writeString(java.io.DataOutput, java.lang.String)" functionrelativelocation="48"/>
</staticflaws>
</cwe>
</category>
<category categoryid="17" categoryname="Code Quality" pcirelated="false">
<desc>
<para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to:">
<bulletitem text="Neglecting to remove debug code or dead code"/>
<bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
<bulletitem text="Using the incorrect operator to compare objects"/>
<bulletitem text="Failing to follow an API or framework specification"/>
<bulletitem text="Using a language feature or API in an unintended manner"/>
</para>
<para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
</desc>
<recommendations>
<para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
</recommendations>
<cwe cweid="489" cwename="Leftover Debug Code" pcirelated="false">
<description>
<text text="A method may be leftover debug code that creates an unintended entry point in a web application.  Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method.  Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="270" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CompressionCodecFactory.java" line="189" sourcefilepath="org/apache/hadoop/io/compress/" scope="org.apache.hadoop.io.compress.CompressionCodecFactory" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="76" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Configuration.java" line="643" sourcefilepath="org/apache/hadoop/conf/" scope="org.apache.hadoop.conf.Configuration" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="264" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CopyFiles.java" line="826" sourcefilepath="org/apache/hadoop/util/" scope="org.apache.hadoop.util.CopyFiles" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="47" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataNode.java" line="1117" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DataNode" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="171" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DF.java" line="147" sourcefilepath="org/apache/hadoop/fs/" scope="org.apache.hadoop.fs.DF" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="24" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DFSAdmin.java" line="220" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DFSAdmin" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="119" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DFSck.java" line="127" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DFSck" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="27" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DFSShell.java" line="801" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DFSShell" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="60" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IsolationRunner.java" line="126" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.IsolationRunner" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="202" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Job.java" line="331" sourcefilepath="org/apache/hadoop/mapred/jobcontrol/" scope="org.apache.hadoop.mapred.jobcontrol.Job" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="79" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JobClient.java" line="495" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.JobClient" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="57" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JobControl.java" line="167" sourcefilepath="org/apache/hadoop/mapred/jobcontrol/" scope="org.apache.hadoop.mapred.jobcontrol.JobControl" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="267" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JobTracker.java" line="1236" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.JobTracker" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="116" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Logalyzer.java" line="236" sourcefilepath="org/apache/hadoop/tools/" scope="org.apache.hadoop.tools.Logalyzer" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="236" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MapFile.java" line="499" sourcefilepath="org/apache/hadoop/io/" scope="org.apache.hadoop.io.MapFile" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="241" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="NameNode.java" line="561" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.NameNode" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="250" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlatformName.java" line="44" sourcefilepath="org/apache/hadoop/util/" scope="org.apache.hadoop.util.PlatformName" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="58" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PrintJarMainClass.java" line="34" sourcefilepath="org/apache/hadoop/util/" scope="org.apache.hadoop.util.PrintJarMainClass" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="32" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Rcc.java" line="41" sourcefilepath="org/apache/hadoop/record/compiler/generated/" scope="org.apache.hadoop.record.compiler.generated.Rcc" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="196" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RunJar.java" line="73" sourcefilepath="org/apache/hadoop/util/" scope="org.apache.hadoop.util.RunJar" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="49" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1252" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker$Child" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="54" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1391" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="156" module="hadoop-0.9.1.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VersionInfo.java" line="85" sourcefilepath="org/apache/hadoop/util/" scope="org.apache.hadoop.util.VersionInfo" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
</staticflaws>
</cwe>
</category>
<category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="true">
<desc>
<para text="Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
<para text="XSS vulnerabilities can be either persistent or transient (often referred to as stored and reflected, respectively).  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
</desc>
<recommendations>
<para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
<bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code (a common technique in Web 2.0 applications), additional restrictions may be necessary beyond simple HTML encoding."/>
<bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
<bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
</para>
</recommendations>
<cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" pcirelated="true" owasp="931" sans="79">
<description>
<text text="This call contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="56" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="67" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="22">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="93" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="69" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="23">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="75" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="72" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="25">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="233" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="74" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="26">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="262" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="76" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="28">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="89" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="78" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="29">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="192" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="86" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="39">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="118" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="123" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="56">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="201" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="125" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="57">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="71" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable minMap.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="127" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="58">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="44" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable minMap.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="131" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="61">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="125" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="139" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="66">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="140" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="141" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="67">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="39" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable mapTasks.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="143" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="68">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="205" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable mapTasks.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="145" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="70">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="80" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="153" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="75">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="106" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="155" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="76">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="228" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable minReduce.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="157" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="77">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="19" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable minReduce.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="161" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="80">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="237" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="169" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="85">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="42" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="171" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="86">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="90" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable reduceTasks.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="173" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="87">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="105" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable reduceTasks.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="analysejobhistory_jsp.java" line="175" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.analysejobhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="89">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="145" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable filename. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="browseBlock_jsp.java" line="114" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.browseBlock_jsp" functionprototype="void generateFileDetails(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="56">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="165" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable filename. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="browseBlock_jsp.java" line="213" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.browseBlock_jsp" functionprototype="void generateFileChunks(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="21">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="175" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable nextUrl. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter. It was also observed that the tainted data was encoded using java.net.URLEncoder.encode. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="browseBlock_jsp.java" line="271" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.browseBlock_jsp" functionprototype="void generateFileChunks(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="62">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="74" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable prevUrl. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter. It was also observed that the tainted data was encoded using java.net.URLEncoder.encode. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="browseBlock_jsp.java" line="322" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.browseBlock_jsp" functionprototype="void generateFileChunks(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="94">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="182" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable dir. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="browseDirectory_jsp.java" line="71" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.browseDirectory_jsp" functionprototype="void generateDirectoryStructure(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="39">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="178" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable req.getRequestURL(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="browseDirectory_jsp.java" line="76" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.browseDirectory_jsp" functionprototype="void generateDirectoryStructure(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="47">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="98" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable this.NodeHeaderStr(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="dfshealth_jsp.java" line="161" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.dfshealth_jsp" functionprototype="void generateDFSHealthReport(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="83">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="26" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable namenodeLabel. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="dfshealth_jsp.java" line="228" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.dfshealth_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="32">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="22" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable namenodeLabel. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="dfshealth_jsp.java" line="230" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.dfshealth_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="37">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="136" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobconf_jsp.java" line="59" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobconf_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="32">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="113" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobconf_jsp.java" line="61" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobconf_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="34">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="285" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobconf_jsp.java" line="68" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobconf_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="46">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="82" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobconf_jsp.java" line="75" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobconf_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="59">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="190" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobconf_jsp.java" line="89" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobconf_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="78">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="195" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetails_jsp.java" line="44" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetails_jsp" functionprototype="void printTaskSummary(javax.servlet.jsp.JspWriter, java.lang.String, java.lang.String, double, TaskInProgress  [])" functionrelativelocation="98">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="240" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetails_jsp.java" line="62" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetails_jsp" functionprototype="void printJobStatus(javax.servlet.jsp.JspWriter, java.lang.String)" functionrelativelocation="9">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="1" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable profile.getUser(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetails_jsp.java" line="68" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetails_jsp" functionprototype="void printJobStatus(javax.servlet.jsp.JspWriter, java.lang.String)" functionrelativelocation="22">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="7" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable profile.getJobName(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetails_jsp.java" line="69" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetails_jsp" functionprototype="void printJobStatus(javax.servlet.jsp.JspWriter, java.lang.String)" functionrelativelocation="29">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="88" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variables jobId, and profile.getJobFile(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetails_jsp.java" line="71" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetails_jsp" functionprototype="void printJobStatus(javax.servlet.jsp.JspWriter, java.lang.String)" functionrelativelocation="41">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="158" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable profile.getJobFile(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetails_jsp.java" line="74" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetails_jsp" functionprototype="void printJobStatus(javax.servlet.jsp.JspWriter, java.lang.String)" functionrelativelocation="50">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="274" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetails_jsp.java" line="90" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetails_jsp" functionprototype="void printJobStatus(javax.servlet.jsp.JspWriter, java.lang.String)" functionrelativelocation="88">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="162" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetails_jsp.java" line="142" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetails_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="46">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="207" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable trackerName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetails_jsp.java" line="144" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetails_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="52">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="141" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetails_jsp.java" line="146" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetails_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="56">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="151" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable trackerName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetails_jsp.java" line="148" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetails_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="62">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="184" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="61" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="21">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="163" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="63" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="22">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="111" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="65" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="24">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="73" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="67" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="25">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="41" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="75" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="35">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="38" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="77" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="36">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="96" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="79" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="37">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="51" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="124" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="55">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="248" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="126" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="56">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="221" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="132" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="60">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="263" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="134" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="61">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="278" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="142" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="66">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="68" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="144" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="67">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="286" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="156" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="74">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="282" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="158" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="75">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="164" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="164" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="79">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="50" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="166" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="80">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="180" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="174" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="85">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="148" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobdetailshistory_jsp.java" line="176" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="86">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="167" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variables statuses.getTaskId(), and jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobfailures_jsp.java" line="30" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobfailures_jsp" functionprototype="void printFailedAttempts(javax.servlet.jsp.JspWriter, java.lang.String, TaskInProgress)" functionrelativelocation="21">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="12" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable itr.next(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobfailures_jsp.java" line="49" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobfailures_jsp" functionprototype="void printFailedAttempts(javax.servlet.jsp.JspWriter, java.lang.String, TaskInProgress)" functionrelativelocation="51">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="161" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable tailFourKBUrl. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobfailures_jsp.java" line="65" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobfailures_jsp" functionprototype="void printFailedAttempts(javax.servlet.jsp.JspWriter, java.lang.String, TaskInProgress)" functionrelativelocation="84">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="226" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable tailEightKBUrl. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobfailures_jsp.java" line="66" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobfailures_jsp" functionprototype="void printFailedAttempts(javax.servlet.jsp.JspWriter, java.lang.String, TaskInProgress)" functionrelativelocation="89">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="223" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable entireLogUrl. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobfailures_jsp.java" line="67" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobfailures_jsp" functionprototype="void printFailedAttempts(javax.servlet.jsp.JspWriter, java.lang.String, TaskInProgress)" functionrelativelocation="94">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="152" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobfailures_jsp.java" line="83" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobfailures_jsp" functionprototype="void printFailures(javax.servlet.jsp.JspWriter, java.lang.String, java.lang.String)" functionrelativelocation="16">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="268" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable kind. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobfailures_jsp.java" line="99" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobfailures_jsp" functionprototype="void printFailures(javax.servlet.jsp.JspWriter, java.lang.String, java.lang.String)" functionrelativelocation="56">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="53" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobfailures_jsp.java" line="161" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobfailures_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="45">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="203" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable trackerName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobfailures_jsp.java" line="163" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobfailures_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="50">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="108" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobfailures_jsp.java" line="165" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobfailures_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="54">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="132" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobfailures_jsp.java" line="168" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobfailures_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="60">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="231" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable trackerName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobfailures_jsp.java" line="170" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobfailures_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="65">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="5" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobhistory_jsp.java" line="45" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobhistory_jsp" functionprototype="void printJob(java.lang.String, JobHistory$JobInfo, javax.servlet.jsp.JspWriter)" functionrelativelocation="16">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="217" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobhistory_jsp.java" line="47" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobhistory_jsp" functionprototype="void printJob(java.lang.String, JobHistory$JobInfo, javax.servlet.jsp.JspWriter)" functionrelativelocation="26">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="283" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobhistory_jsp.java" line="48" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobhistory_jsp" functionprototype="void printJob(java.lang.String, JobHistory$JobInfo, javax.servlet.jsp.JspWriter)" functionrelativelocation="35">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="103" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobhistory_jsp.java" line="51" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobhistory_jsp" functionprototype="void printJob(java.lang.String, JobHistory$JobInfo, javax.servlet.jsp.JspWriter)" functionrelativelocation="69">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="48" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobhistory_jsp.java" line="52" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobhistory_jsp" functionprototype="void printJob(java.lang.String, JobHistory$JobInfo, javax.servlet.jsp.JspWriter)" functionrelativelocation="78">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="218" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobhistory_jsp.java" line="53" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobhistory_jsp" functionprototype="void printJob(java.lang.String, JobHistory$JobInfo, javax.servlet.jsp.JspWriter)" functionrelativelocation="87">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="31" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable job.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobhistory_jsp.java" line="54" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobhistory_jsp" functionprototype="void printJob(java.lang.String, JobHistory$JobInfo, javax.servlet.jsp.JspWriter)" functionrelativelocation="97">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="16" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable type. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="78" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="27">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="244" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="80" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="29">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="253" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable trackerLabel. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="82" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="30">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="198" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable type. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="84" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="31">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="134" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="86" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="33">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="266" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="89" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="35">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="187" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable trackerLabel. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="91" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="36">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="18" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="95" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="40">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="200" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="113" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="55">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="109" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable report.getState(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="118" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="61">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="129" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable diagnostics. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="124" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="74">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="9" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variables jobid, and type. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="132" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="84">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="13" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variables jobid, and type. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtasks_jsp.java" line="138" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtasks_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="90">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="65" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variables task.get(), jobid, and trackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtaskshistory_jsp.java" line="21" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtaskshistory_jsp" functionprototype="void printTask(java.lang.String, java.lang.String, JobHistory$Task, javax.servlet.jsp.JspWriter)" functionrelativelocation="34">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="260" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable task.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtaskshistory_jsp.java" line="28" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtaskshistory_jsp" functionprototype="void printTask(java.lang.String, java.lang.String, JobHistory$Task, javax.servlet.jsp.JspWriter)" functionrelativelocation="94">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="211" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable taskStatus. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtaskshistory_jsp.java" line="80" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtaskshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="54">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="14" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable taskType. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtaskshistory_jsp.java" line="82" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtaskshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="57">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="186" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtaskshistory_jsp.java" line="84" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtaskshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="59">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="86" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtaskshistory_jsp.java" line="86" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtaskshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="62">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="239" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtaskshistory_jsp.java" line="89" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtaskshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="65">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="143" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable trackerLabel. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtracker_jsp.java" line="113" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtracker_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="28">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="91" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable trackerLabel. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jobtracker_jsp.java" line="115" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.jobtracker_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="32">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="251" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable buf. The tainted data originated from an earlier call to java.net.Socket.getInputStream. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JspHelper.java" line="141" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.JspHelper" functionprototype="void streamBlockInAscii(java.net.InetSocketAddress, long, long, long, long, javax.servlet.jsp.JspWriter)" functionrelativelocation="98">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="246" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable columns. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter. It was also observed that the tainted data was encoded using java.net.URLEncoder.encode. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JspHelper.java" line="165" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.JspHelper" functionprototype="void addTableRow(javax.servlet.jsp.JspWriter, java.lang.String  [], int)" functionrelativelocation="51">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="124" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable columns. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter. It was also observed that the tainted data was encoded using java.net.URLEncoder.encode. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JspHelper.java" line="167" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.JspHelper" functionprototype="void addTableRow(javax.servlet.jsp.JspWriter, java.lang.String  [], int)" functionrelativelocation="84">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="284" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable trackerLabel. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="machines_jsp.java" line="103" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.machines_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="46">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="3" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable trackerLabel. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="machines_jsp.java" line="105" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.machines_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="53">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="254" module="hadoop-0.9.1.jar" type="java.io.PrintWriter.println" description="This call to java.io.PrintWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable path. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterMap. The tainted data is directed into an output stream returned by javax.servlet.ServletResponse.getWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="NamenodeFsck.java" line="132" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.NamenodeFsck" functionprototype="void fsck()" functionrelativelocation="63">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="112" module="hadoop-0.9.1.jar" type="java.io.PrintWriter.println" description="This call to java.io.PrintWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable path. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterMap. The tainted data is directed into an output stream returned by javax.servlet.ServletResponse.getWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="NamenodeFsck.java" line="134" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.NamenodeFsck" functionprototype="void fsck()" functionrelativelocation="84">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="172" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variables filename, and referrer. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tail_jsp.java" line="46" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.tail_jsp" functionprototype="void generateFileChunks(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="27">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="174" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable filename. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tail_jsp.java" line="48" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.tail_jsp" functionprototype="void generateFileChunks(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="34">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="72" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable filename. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tail_jsp.java" line="53" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.tail_jsp" functionprototype="void generateFileChunks(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="49">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="209" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable referrer. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tail_jsp.java" line="56" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.tail_jsp" functionprototype="void generateFileChunks(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="56">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="181" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable filename. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tail_jsp.java" line="64" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.tail_jsp" functionprototype="void generateFileChunks(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="71">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="21" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetails_jsp.java" line="62" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetails_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="15">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="11" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable status.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetails_jsp.java" line="85" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetails_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="26">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="137" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable itr.next(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetails_jsp.java" line="116" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetails_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="67">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="210" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable tailFourKBUrl. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetails_jsp.java" line="132" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetails_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="83">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="101" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable tailEightKBUrl. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetails_jsp.java" line="133" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetails_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="86">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="4" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable entireLogUrl. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetails_jsp.java" line="134" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetails_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="88">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="15" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetails_jsp.java" line="141" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetails_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="91">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="272" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable taskAttempt.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetailshistory_jsp.java" line="21" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetailshistory_jsp" functionprototype="void printTaskAttempt(JobHistory$TaskAttempt, java.lang.String, javax.servlet.jsp.JspWriter)" functionrelativelocation="11">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="45" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable taskAttempt.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetailshistory_jsp.java" line="35" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetailshistory_jsp" functionprototype="void printTaskAttempt(JobHistory$TaskAttempt, java.lang.String, javax.servlet.jsp.JspWriter)" functionrelativelocation="86">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="279" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable taskAttempt.get(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetailshistory_jsp.java" line="36" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetailshistory_jsp" functionprototype="void printTaskAttempt(JobHistory$TaskAttempt, java.lang.String, javax.servlet.jsp.JspWriter)" functionrelativelocation="96">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="46" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable taskid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetailshistory_jsp.java" line="86" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="55">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="117" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetailshistory_jsp.java" line="88" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="58">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="29" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobTrackerId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetailshistory_jsp.java" line="90" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="60">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="63" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable jobid. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="taskdetailshistory_jsp.java" line="94" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.taskdetailshistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="65">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="33" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable taskId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tasklog_jsp.java" line="99" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.tasklog_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="37">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="30" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable taskId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tasklog_jsp.java" line="101" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.tasklog_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="38">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="100" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable taskId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tasklog_jsp.java" line="135" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.tasklog_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="62">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="77" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable taskId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tasklog_jsp.java" line="143" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.tasklog_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="70">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="34" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable taskId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tasklog_jsp.java" line="148" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.tasklog_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="76">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="36" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable taskId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tasklog_jsp.java" line="154" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.tasklog_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="83">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="230" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable taskId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tasklog_jsp.java" line="158" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.tasklog_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="89">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="249" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable status.getTaskId(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tasktracker_jsp.java" line="71" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.tasktracker_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="57">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="126" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable status.getDiagnosticInfo(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tasktracker_jsp.java" line="75" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.tasktracker_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="77">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
<category categoryid="12" categoryname="Cryptographic Issues" pcirelated="false">
<desc>
<para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
<para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
<para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
</desc>
<recommendations>
<para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &quot;security through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate for the data being protected; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
</recommendations>
<cwe cweid="331" cwename="Insufficient Entropy" pcirelated="false" sans="327">
<description>
<text text="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand()."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="191" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="browseBlock_jsp.java" line="133" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.browseBlock_jsp" functionprototype="void generateFileDetails(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="75"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="25" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CopyFiles.java" line="288" sourcefilepath="org/apache/hadoop/util/" scope="org.apache.hadoop.util.CopyFiles$DFSCopyFilesMapper" functionprototype="void setup(conf.Configuration, mapred.JobConf, java.lang.String  [], java.lang.String, byte)" functionrelativelocation="43"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="232" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CopyFiles.java" line="488" sourcefilepath="org/apache/hadoop/util/" scope="org.apache.hadoop.util.CopyFiles$HTTPCopyFilesMapper" functionprototype="void setup(conf.Configuration, mapred.JobConf, java.lang.String  [], java.lang.String, byte)" functionrelativelocation="56"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="102" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataNode.java" line="243" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DataNode" functionprototype="void !ctor(java.lang.String, java.lang.String  [], java.net.InetSocketAddress, conf.Configuration)" functionrelativelocation="94"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="206" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DFSClient.java" line="116" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DFSClient" functionprototype="void !ctor(java.net.InetSocketAddress, conf.Configuration)" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="142" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DFSClient.java" line="434" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DFSClient" functionprototype="DatanodeInfo bestNode(DatanodeInfo  [], java.util.TreeSet)" functionrelativelocation="90"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="168" module="hadoop-0.9.1.jar" type="java.util.Random.nextLong" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DFSClient.java" line="924" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DFSClient$DFSOutputStream" functionprototype="java.io.File newBackupFile()" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="128" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FSImage.java" line="266" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.FSImage" functionprototype="int newNamespaceID()" functionrelativelocation="80"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="17" module="hadoop-0.9.1.jar" type="java.util.Random.nextLong" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FSNamesystem.java" line="739" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.FSNamesystem" functionprototype="Block allocateBlock(io.UTF8)" functionrelativelocation="14"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="238" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FSNamesystem.java" line="1274" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.FSNamesystem" functionprototype="java.lang.String newStorageID()" functionrelativelocation="62"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="280" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FSNamesystem.java" line="2013" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.FSNamesystem" functionprototype="DatanodeDescriptor [] chooseTargets(int, java.util.Collection, io.UTF8, long)" functionrelativelocation="51"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="252" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FSNamesystem.java" line="2029" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.FSNamesystem" functionprototype="DatanodeDescriptor [] chooseTargets(int, java.util.Collection, io.UTF8, long)" functionrelativelocation="73"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="67" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FSNamesystem.java" line="2159" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.FSNamesystem" functionprototype="java.lang.String randomDataNode()" functionrelativelocation="35"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="81" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JobClient.java" line="247" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.JobClient" functionprototype="RunningJob submitJob(JobConf)" functionrelativelocation="7"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="122" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JspHelper.java" line="62" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.JspHelper" functionprototype="DatanodeInfo bestNode(LocatedBlock)" functionrelativelocation="32"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="40" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JspHelper.java" line="65" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.JspHelper" functionprototype="DatanodeInfo bestNode(LocatedBlock)" functionrelativelocation="41"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="99" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LocalFileSystem.java" line="389" sourcefilepath="org/apache/hadoop/fs/" scope="org.apache.hadoop.fs.LocalFileSystem" functionprototype="void reportChecksumFailure(Path, FSInputStream, long, long, int)" functionrelativelocation="46"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="204" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LocalJobRunner.java" line="160" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.LocalJobRunner$Job" functionprototype="java.lang.String newId()" functionrelativelocation="93"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="146" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="NamenodeFsck.java" line="401" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.NamenodeFsck" functionprototype="DatanodeInfo bestNode(DFSClient, DatanodeInfo  [], java.util.TreeSet)" functionrelativelocation="90"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="107" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="414" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner" functionprototype="byte prepare()" functionrelativelocation="77"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="227" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Server.java" line="185" sourcefilepath="org/apache/hadoop/ipc/" scope="org.apache.hadoop.ipc.Server$Listener" functionprototype="void cleanupConnections(byte)" functionrelativelocation="22"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="216" module="hadoop-0.9.1.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Server.java" line="186" sourcefilepath="org/apache/hadoop/ipc/" scope="org.apache.hadoop.ipc.Server$Listener" functionprototype="void cleanupConnections(byte)" functionrelativelocation="27"/>
</staticflaws>
</cwe>
</category>
<category categoryid="1" categoryname="Directory Traversal" pcirelated="false">
<desc>
<para text="Allowing user input to control paths used in filesystem operations may enable an attacker to access or modify otherwise protected system resources that would normally be inaccessible to end users.  In some cases, the user-provided input may be passed directly to the filesystem operation, or it may be concatenated to one or more fixed strings to construct a fully-qualified path."/>
<para text="When an application improperly cleanses special character sequences in user-supplied filenames, a path traversal (or directory traversal) vulnerability may occur.  For example, an attacker could specify a filename such as &quot;../../etc/passwd&quot;, which resolves to a file outside of the intended directory that the attacker would not normally be authorized to view."/>
</desc>
<recommendations>
<para text="Assume all user-supplied input is malicious.  Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters and ensure that the end result is not dangerous."/>
</recommendations>
<cwe cweid="73" cwename="External Control of File Name or Path" pcirelated="false" sans="22" certcpp="877">
<description>
<text text="This call contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="131" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable filename. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="browseBlock_jsp.java" line="214" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.browseBlock_jsp" functionprototype="void generateFileChunks(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="28">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="276" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable dir. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="browseDirectory_jsp.java" line="73" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.browseDirectory_jsp" functionprototype="void generateDirectoryStructure(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="40">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="97" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable dirs. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Configuration.java" line="395" sourcefilepath="org/apache/hadoop/conf/" scope="org.apache.hadoop.conf.Configuration" functionprototype="java.io.File getFile(java.lang.String, java.lang.String)" functionrelativelocation="43">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="265" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable dataDirs. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataNode.java" line="193" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DataNode" functionprototype="void !ctor(java.lang.String, java.lang.String  [], java.net.InetSocketAddress, conf.Configuration)" functionrelativelocation="19">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="59" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable dataDirs. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataNode.java" line="1093" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.DataNode" functionprototype="DataNode makeInstance(java.lang.String  [], conf.Configuration)" functionrelativelocation="25">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="291" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable baseDir. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DistributedCache.java" line="88" sourcefilepath="org/apache/hadoop/filecache/" scope="org.apache.hadoop.filecache.DistributedCache" functionprototype="fs.Path getLocalCache(java.net.URI, conf.Configuration, fs.Path, byte, java.lang.String, fs.Path)" functionrelativelocation="87">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="275" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable link. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DistributedCache.java" line="168" sourcefilepath="org/apache/hadoop/filecache/" scope="org.apache.hadoop.filecache.DistributedCache" functionprototype="fs.Path localizeCache(java.net.URI, DistributedCache$CacheStatus, conf.Configuration, byte, java.lang.String, fs.Path)" functionrelativelocation="12">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="2" issueid="166" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable parchive. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DistributedCache.java" line="211" sourcefilepath="org/apache/hadoop/filecache/" scope="org.apache.hadoop.filecache.DistributedCache" functionprototype="fs.Path localizeCache(java.net.URI, DistributedCache$CacheStatus, conf.Configuration, byte, java.lang.String, fs.Path)" functionrelativelocation="77">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="2" issueid="78" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable parchive.getParent(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DistributedCache.java" line="214" sourcefilepath="org/apache/hadoop/filecache/" scope="org.apache.hadoop.filecache.DistributedCache" functionprototype="fs.Path localizeCache(java.net.URI, DistributedCache$CacheStatus, conf.Configuration, byte, java.lang.String, fs.Path)" functionrelativelocation="84">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="110" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable path. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FSDirectory.java" line="178" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.FSDirectory$INode" functionprototype="FSDirectory$INode addNode(java.lang.String, FSDirectory$INode)" functionrelativelocation="5">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="8" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable src. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FSDirectory.java" line="714" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.FSDirectory" functionprototype="FSDirectory$INode unprotectedMkdir(java.lang.String)" functionrelativelocation="73">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="261" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable filePath. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="loadhistory_jsp.java" line="62" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.loadhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="38">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="155" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable jobLogFile. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="loadhistory_jsp.java" line="83" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.loadhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="79">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="229" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable path. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LocalFileSystem.java" line="75" sourcefilepath="org/apache/hadoop/fs/" scope="org.apache.hadoop.fs.LocalFileSystem" functionprototype="java.io.File pathToFile(Path)" functionrelativelocation="96">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="213" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable dirNames. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="NameNode.java" line="155" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.NameNode" functionprototype="java.io.File [] getDirs(conf.Configuration)" functionrelativelocation="83">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="2" issueid="2" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable finalFilename. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReduceTaskRunner.java" line="242" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.ReduceTaskRunner$MapOutputCopier" functionprototype="long copyOutput(MapOutputLocation, util.Progressable)" functionrelativelocation="62">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="23" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to !operator_javanewinit() contains tainted data from the variable taskId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskLog.java" line="85" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskLog$Writer" functionprototype="void !ctor(JobConf, java.lang.String)" functionrelativelocation="42">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="199" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to !operator_javanewinit() contains tainted data from the variable taskId. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskLog.java" line="275" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskLog$Reader" functionprototype="void !ctor(java.lang.String)" functionrelativelocation="90">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="149" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable t.getJobFile(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskRunner.java" line="85" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskRunner" functionprototype="void run()" functionrelativelocation="2">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="84" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable localJobFile. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="306" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void localizeJob(TaskTracker$TaskInProgress)" functionrelativelocation="76">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="20" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable localJarFile. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="314" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void localizeJob(TaskTracker$TaskInProgress)" functionrelativelocation="90">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="197" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable localDirs. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="674" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="byte enoughFreeSpace(long)" functionrelativelocation="69">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="243" module="hadoop-0.9.1.jar" type="java.io.File.!operator_javanewinit" description="This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable localDirs. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1366" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker" functionprototype="void checkLocalDirs(java.lang.String  [])" functionrelativelocation="27">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
<category categoryid="25" categoryname="Insufficient Input Validation" pcirelated="false">
<desc>
<para text="Weaknesses in this category are related to an absent or incorrect protection mechanism that fails to properly validate input that can affect the control flow or data flow of a program."/>
</desc>
<recommendations>
<para text="Validate input from untrusted sources before it is used. The untrusted data sources may include HTTP requests, file systems, databases, and any external systems that provide data to the application. In the case of HTTP requests, validate all parts of the request, including headers, form fields, cookies, and URL components that are used to transfer information from the browser to the server side application."/>
<para text="Duplicate any client-side checks on the server side. This should be simple to implement in terms of time and difficulty, and will greatly reduce the likelihood of insecure parameter values being used in the application."/>
</recommendations>
<cwe cweid="470" cwename="Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" pcirelated="false" certjava="859">
<description>
<text text="A call uses reflection in an unsafe manner.  An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application.  Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner.  Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the user-supplied class name will have already executed."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" count="1" issueid="220" module="hadoop-0.9.1.jar" type="java.lang.Class.forName" description="This call to java.lang.Class.forName() uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the user-supplied class name will have already executed. The first argument to forName() contains tainted data from the variable name. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Validate the class name against a combination of white and black lists to ensure that only expected behavior is produced.

References: 
CWE (http://cwe.mitre.org/data/definitions/470.html) 
OWASP (http://www.owasp.org/index.php/Unsafe_Reflection)

" note="" cweid="470" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Configuration.java" line="315" sourcefilepath="org/apache/hadoop/conf/" scope="org.apache.hadoop.conf.Configuration" functionprototype="java.lang.Class getClassByName(java.lang.String)" functionrelativelocation="90">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>The class name being passed to the reflection operation is tainted.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
<category categoryid="15" categoryname="Session Fixation" pcirelated="true">
<desc>
<para text="Authenticating a user without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.  Session fixation vulnerabilities occur when: ">
<bulletitem text="A web application authenticates a user without first invalidating the existing session ID, thereby continuing to use the session ID already associated with the user."/>
<bulletitem text="An attacker is able to force a known session ID on a user so that, once the user authenticates, the attacker has access to the authenticated session."/>
</para>
<para text="In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to authenticate against the server using the same session identifier, giving the attacker access to the user's account through the active session.  A similar, passive version of this attack could be carried out by sniffing the session identifier at some point between the victim and the server prior to authentication."/>
<para text="Failing to destroy a session once a user has logged out, or failing to provide a mechanism for logging out of the application, is another form of session fixation. "/>
</desc>
<recommendations>
<para text="Invalidate any existing session after the user has authenticated and issue a new session identifier.  Also, invalidate the session object when a user logs out, otherwise the session will remain valid on the server."/>
</recommendations>
<cwe cweid="384" cwename="Session Fixation" pcirelated="true" owasp="930">
<description>
<text text="The application never invalidates user sessions, which can lead to session fixation attacks.  As a result, the session identifier stays the same before, during, and after a user has logged in or out.  An attacker may attempt to force a user into using a specific session identifier, then hijack the session once the user has logged in."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Session Fixation" count="1" issueid="121" module="hadoop-0.9.1.jar" type="getSession" description="The application calls getSession(), and never invalidates user sessions, which can lead to session fixation attacks. As a result, the session identifier stays the same before, during, and after a user has logged in or out. An attacker may attempt to force a user into using a specific session identifier, then hijack the session once the user has logged in.

Invalidate any existing session after the user has authenticated but before calling methods that establish the UserPrincipal. Also, invalidate the session object when a user logs out, otherwise the session will remain valid on the server.

References: 
CWE (http://cwe.mitre.org/data/definitions/384.html) 
OWASP (http://www.owasp.org/index.php/Session_Fixation) 
WASC (http://webappsec.pbworks.com/Session-Fixation)

" note="" cweid="384" remediationeffort="2" exploitLevel="0" categoryid="15" pcirelated="true" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="loadhistory_jsp.java" line="75" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.loadhistory_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="61"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="2">
<category categoryid="8" categoryname="Information Leakage" pcirelated="true">
<desc>
<para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product's own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
<para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to:">
<bulletitem text="Source code disclosure"/>
<bulletitem text="Browsable directories"/>
<bulletitem text="Log files or backup files in web-accessible directories"/>
<bulletitem text="Unfiltered backend error messages"/>
<bulletitem text="Exception stack traces"/>
<bulletitem text="Server version information"/>
<bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
</para>
</desc>
<recommendations>
<para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
<para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application's web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
</recommendations>
<cwe cweid="201" cwename="Information Exposure Through Sent Data" pcirelated="false">
<description>
<text text="Sensitive information may be exposed as a result of outbound network connections made by the application.  This can manifest in a couple of different ways."/>
<text text="In C/C++ applications, sometimes the developer fails to zero out a buffer before populating it with data.  This can cause information leakage if, for example, the buffer contains a data structure for which only certain fields were populated.  The uninitialized fields would contain whatever data is present at that memory location.  Sensitive information from previously allocated variables could then be leaked when the buffer is sent over the network."/>
<text text="Mobile applications may also transmit sensitive information such as email or SMS messages, address book entries, GPS location data, and anything else that can be accessed by the mobile API.  This behavior is common in mobile spyware applications designed to exfiltrate data to a listening post or other data collection point.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="259" module="hadoop-0.9.1.jar" type="java.io.OutputStream.write" description="The application calls the java.io.OutputStream.write() function, which exposes sensitive information via network transfer externally to the application. The first argument to write() contains potentially sensitive data from the variable indexRecord. The potentially sensitive data originated from an earlier call to javax.servlet.ServletRequest.getParameterjava.lang.System.getProperty.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskLog.java" line="217" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskLog$Writer" functionprototype="void writeIndexRecord()" functionrelativelocation="84"/>
</staticflaws>
</cwe>
<cwe cweid="209" cwename="Information Exposure Through an Error Message" pcirelated="true" sans="801" certcpp="880" certjava="851">
<description>
<text text="The software generates an error message that includes sensitive information about its environment, users, or associated data.  The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.  For example, file locations disclosed by an exception stack trace may be leveraged by an attacker to exploit a path traversal issue elsewhere in the application."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="115" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains potentially sensitive data from the variable e. The potentially sensitive data originated from an earlier call to java.lang.Throwable.toString. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="browseBlock_jsp.java" line="91" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.browseBlock_jsp" functionprototype="void generateFileDetails(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="33"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="123" module="hadoop-0.9.1.jar" type="java.io.PrintWriter.println" description="The application calls the java.io.PrintWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains potentially sensitive data from the variable frame. The potentially sensitive data originated from an earlier call to java.lang.StackTraceElement.toString. The potentially sensitive data is directed into an output stream returned by javax.servlet.ServletResponse.getOutputStream.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReflectionUtils.java" line="128" sourcefilepath="org/apache/hadoop/util/" scope="org.apache.hadoop.util.ReflectionUtils" functionprototype="void printThreadInfo(java.io.PrintWriter, java.lang.String)" functionrelativelocation="95"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="235" module="hadoop-0.9.1.jar" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains potentially sensitive data from the variable e. The potentially sensitive data originated from an earlier call to java.lang.Throwable.toString. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tail_jsp.java" line="75" sourcefilepath="org/apache/hadoop/dfs/" scope="org.apache.hadoop.dfs.tail_jsp" functionprototype="void generateFileChunks(javax.servlet.jsp.JspWriter, javax.servlet.http.HttpServletRequest)" functionrelativelocation="84"/>
</staticflaws>
</cwe>
</category>
<category categoryid="14" categoryname="Time and State" pcirelated="false">
<desc>
<para text="Time and State flaws are related to unexpected interactions between threads, processes, time, and information. These interactions happen through shared state: semaphores, variables, the filesystem, and basically anything that can store information.  Vulnerabilities occur when there is a discrepancy between the programmer's assumption of how a program executes and what happens in reality. "/>
<para text="State issues result from improper management or invalid assumptions about system state, such as assuming mutable objects are immutable.  Though these conditions are less commonly exploited by attackers, state issues can lead to unpredictable or undefined application behavior."/>
</desc>
<recommendations>
<para text="Limit the interleaving of operations on resources from multiple processes.  Use locking mechanisms to protect resources effectively.  Follow best practices with respect to mutable objects and internal references.  Pay close attention to asynchronous actions in processes and make copious use of sanity checks in systems that may be subject to synchronization errors."/>
</recommendations>
<cwe cweid="382" cwename="J2EE Bad Practices: Use of System.exit()" pcirelated="false" certjava="851">
<description>
<text text="A web applications should not attempt to shut down its container.  A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application.  Non-web applications may contain a main() method that calls System.exit(), but generally should not call it from other locations in the code."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="J2EE Bad Practices: Use of System.exit()" count="1" issueid="177" module="hadoop-0.9.1.jar" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main() method that calls System.exit(), but generally should not call it from other locations in the code.

Ensure that System.exit() is never called by web applications.

References: 
CWE (http://cwe.mitre.org/data/definitions/382.html)

" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1297" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker$Child$1" functionprototype="void run()" functionrelativelocation="32"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Use of System.exit()" count="1" issueid="245" module="hadoop-0.9.1.jar" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main() method that calls System.exit(), but generally should not call it from other locations in the code.

Ensure that System.exit() is never called by web applications.

References: 
CWE (http://cwe.mitre.org/data/definitions/382.html)

" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2011-03-16 17:24:29 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TaskTracker.java" line="1307" sourcefilepath="org/apache/hadoop/mapred/" scope="org.apache.hadoop.mapred.TaskTracker$Child$1" functionprototype="void run()" functionrelativelocation="89"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="1"/>
<severity level="0"/>
<flaw-status new="284" reopen="0" open="0" fixed="0" total="284" not_mitigated="284" sev-1-change="0" sev-2-change="6" sev-3-change="278" sev-4-change="0" sev-5-change="0"/>
</detailedreport>
