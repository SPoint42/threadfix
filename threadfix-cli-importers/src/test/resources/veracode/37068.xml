<?xml version="1.0" encoding="UTF-8"?>

<detailedreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd" report_format_version="1.4" app_name="Lunar Lander" app_id="28243" first_build_submitted_date="2011-11-16 19:56:09 UTC" version="1.0.0" build_id="37068" submitter="Veracode" platform="Android" assurance_level="4" business_criticality="4" generation_date="2014-06-03 14:43:25 UTC" veracode_level="VL3" total_flaws="8" flaws_not_mitigated="8" teams="" life_cycle_stage="Deployed (In production and actively developed)" planned_deployment_date="" last_update_time="2011-11-17 16:11:57 UTC" is_latest_build="true" policy_name="Veracode Transitional Very High" policy_version="1" policy_compliance_status="Pass" policy_rules_status="Pass" grace_period_expired="false" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="" legacy_scan_engine="false">
<static-analysis rating="A" score="98" submitted_date="2011-11-16 19:52:27 UTC" published_date="2011-11-17 16:11:42 UTC" analysis_size_bytes="136168">
<modules>
<module name="LunarLander.apk" compiler="Android" os="Android" architecture="Android" loc="98132" score="98" numflawssev0="0" numflawssev1="0" numflawssev2="4" numflawssev3="4" numflawssev4="0" numflawssev5="0"/>
</modules>
</static-analysis>
<severity level="5"/>
<severity level="4"/>
<severity level="3">
<category categoryid="12" categoryname="Cryptographic Issues" pcirelated="false">
<desc>
<para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
<para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
<para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
</desc>
<recommendations>
<para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &quot;security through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate for the data being protected; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
</recommendations>
<cwe cweid="331" cwename="Insufficient Entropy" pcirelated="false" sans="327">
<description>
<text text="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand()."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="7" module="LunarLander.apk" type="java.lang.Math.random" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-11-16 19:50:52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LunarView.java" line="540" sourcefilepath="com/example/android/lunarlander/" scope="com.example.android.lunarlander.LunarView$LunarThread" functionprototype="void doStart()" functionrelativelocation="45"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="2" module="LunarLander.apk" type="java.lang.Math.random" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-11-16 19:50:52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LunarView.java" line="543" sourcefilepath="com/example/android/lunarlander/" scope="com.example.android.lunarlander.LunarView$LunarThread" functionprototype="void doStart()" functionrelativelocation="46"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="5" module="LunarLander.apk" type="java.lang.Math.random" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-11-16 19:50:52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LunarView.java" line="651" sourcefilepath="com/example/android/lunarlander/" scope="com.example.android.lunarlander.LunarView$LunarThread" functionprototype="void doStart()" functionrelativelocation="61"/>
</staticflaws>
</cwe>
</category>
<category categoryid="14" categoryname="Time and State" pcirelated="false">
<desc>
<para text="Time and State flaws are related to unexpected interactions between threads, processes, time, and information. These interactions happen through shared state: semaphores, variables, the filesystem, and basically anything that can store information.  Vulnerabilities occur when there is a discrepancy between the programmer's assumption of how a program executes and what happens in reality. "/>
<para text="State issues result from improper management or invalid assumptions about system state, such as assuming mutable objects are immutable.  Though these conditions are less commonly exploited by attackers, state issues can lead to unpredictable or undefined application behavior."/>
</desc>
<recommendations>
<para text="Limit the interleaving of operations on resources from multiple processes.  Use locking mechanisms to protect resources effectively.  Follow best practices with respect to mutable objects and internal references.  Pay close attention to asynchronous actions in processes and make copious use of sanity checks in systems that may be subject to synchronization errors."/>
</recommendations>
<cwe cweid="377" cwename="Insecure Temporary File" pcirelated="false" certjava="857">
<description>
<text text="Creating and using insecure temporary files can leave application and system data vulnerable to attack.  In particular, file names created by the tmpnam family of functions can be easily guessed by an attacker.  If an attacker can predict the filename and create a malicious collision, he may be able to manipulate the behavior of the application."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Insecure Temporary File" count="1" issueid="3" module="LunarLander.apk" type="java.io.File.createTempFile" description="This call to java.io.File.createTempFile() may create insecure temporary files depending on which version of the Java runtime is in use. In versions before 1.6.0_11, filenames are predictable under certain conditions. Creating and using insecure temporary files can leave application and system data vulnerable to attack.

Be sure to use the latest version of the Java runtime. If the application has the potential to be deployed in environments with outdated Java installations, consider implementing a custom function that uses SecureRandom() to generate temporary filenames.

References: 
CWE (http://cwe.mitre.org/data/definitions/377.html)

" note="" cweid="377" remediationeffort="2" exploitLevel="0" categoryid="14" pcirelated="false" date_first_occurrence="2011-11-16 19:50:52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="androidSpy.java" line="634" sourcefilepath="com/example/android/lunarlander/" scope="com.example.android.lunarlander.androidSpy" functionprototype="void dumpAudio()" functionrelativelocation="30"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="2">
<category categoryid="17" categoryname="Code Quality" pcirelated="false">
<desc>
<para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to:">
<bulletitem text="Neglecting to remove debug code or dead code"/>
<bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
<bulletitem text="Using the incorrect operator to compare objects"/>
<bulletitem text="Failing to follow an API or framework specification"/>
<bulletitem text="Using a language feature or API in an unintended manner"/>
</para>
<para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
</desc>
<recommendations>
<para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
</recommendations>
<cwe cweid="404" cwename="Improper Resource Shutdown or Release" pcirelated="false" certc="743" certcpp="876" certjava="857">
<description>
<text text="The application fails to release (or incorrectly releases) a system resource before it is made available for re-use.  This condition often occurs with resources such as database connections or file handles.  Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be possible to launch a denial of service attack by depleting the resource pool."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Improper Resource Shutdown or Release" count="1" issueid="6" module="LunarLander.apk" type="java.io.BufferedWriter.!operator_javanewinit" description="There are total of 3 instances. The program fails to release or incorrectly releases some variables, e.g. the variable run, which was previously allocated by a call to java.io.BufferedWriter.!operator_javanewinit().

Ensure that all code paths properly release this resource.

References: 
CWE (http://cwe.mitre.org/data/definitions/404.html)

" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2011-11-16 19:50:52 UTC" remediation_status="New" cia_impact="nnc" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="androidSpy.java" line="397" sourcefilepath="com/example/android/lunarlander/" scope="com.example.android.lunarlander.androidSpy$3" functionprototype="void run()" functionrelativelocation="34"/>
</staticflaws>
</cwe>
</category>
<category categoryid="8" categoryname="Information Leakage" pcirelated="false">
<desc>
<para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product's own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
<para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to:">
<bulletitem text="Source code disclosure"/>
<bulletitem text="Browsable directories"/>
<bulletitem text="Log files or backup files in web-accessible directories"/>
<bulletitem text="Unfiltered backend error messages"/>
<bulletitem text="Exception stack traces"/>
<bulletitem text="Server version information"/>
<bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
</para>
</desc>
<recommendations>
<para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
<para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application's web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
</recommendations>
<cwe cweid="201" cwename="Information Exposure Through Sent Data" pcirelated="false">
<description>
<text text="Sensitive information may be exposed as a result of outbound network connections made by the application.  This can manifest in a couple of different ways."/>
<text text="In C/C++ applications, sometimes the developer fails to zero out a buffer before populating it with data.  This can cause information leakage if, for example, the buffer contains a data structure for which only certain fields were populated.  The uninitialized fields would contain whatever data is present at that memory location.  Sensitive information from previously allocated variables could then be leaked when the buffer is sent over the network."/>
<text text="Mobile applications may also transmit sensitive information such as email or SMS messages, address book entries, GPS location data, and anything else that can be accessed by the mobile API.  This behavior is common in mobile spyware applications designed to exfiltrate data to a listening post or other data collection point.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="4" module="LunarLander.apk" type="android.telephony.SmsManager.sendTextMessage" description="The application calls the android.telephony.SmsManager.sendTextMessage() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The third argument to sendTextMessage() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to android.telephony.TelephonyManager.getVoiceMailAlphaTag.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2011-11-16 19:50:52 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="androidSpy.java" line="763" sourcefilepath="com/example/android/lunarlander/" scope="com.example.android.lunarlander.androidSpy" functionprototype="void exfiltrate_sms(java.lang.String)" functionrelativelocation="90"/>
<flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="1" module="LunarLander.apk" type="java.net.DatagramSocket.send" description="The application calls the java.net.DatagramSocket.send() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The first argument to send() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to android.telephony.TelephonyManager.getVoiceMailAlphaTag.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2011-11-16 19:50:52 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="androidSpy.java" line="866" sourcefilepath="com/example/android/lunarlander/" scope="com.example.android.lunarlander.androidSpy" functionprototype="void exfiltrate_udp(java.lang.String)" functionrelativelocation="59"/>
<flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="8" module="LunarLander.apk" type="java.net.InetAddress.getByName" description="The application calls the java.net.InetAddress.getByName() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The first argument to getByName() contains potentially sensitive data. The potentially sensitive data originated from an earlier call to android.telephony.TelephonyManager.getVoiceMailAlphaTag.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2011-11-16 19:50:52 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="androidSpy.java" line="940" sourcefilepath="com/example/android/lunarlander/" scope="com.example.android.lunarlander.androidSpy" functionprototype="void exfiltrate_dns(java.lang.String)" functionrelativelocation="80"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="1"/>
<severity level="0"/>
<flaw-status new="8" reopen="0" open="0" fixed="0" total="8" not_mitigated="8" sev-1-change="0" sev-2-change="4" sev-3-change="4" sev-4-change="0" sev-5-change="0"/>
</detailedreport>
