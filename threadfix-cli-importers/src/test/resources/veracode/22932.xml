<?xml version="1.0" encoding="UTF-8"?>

<detailedreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd" report_format_version="1.4" app_name="HSQLdb" app_id="20393" first_build_submitted_date="2011-03-17 01:18:17 UTC" version="1.8.0.337" build_id="22932" submitter="Veracode" platform="Java" assurance_level="4" business_criticality="4" generation_date="2014-06-03 14:43:27 UTC" veracode_level="VL2" total_flaws="73" flaws_not_mitigated="73" teams="" life_cycle_stage="Deployed (In production and actively developed)" planned_deployment_date="" last_update_time="2011-03-17 01:51:02 UTC" is_latest_build="true" policy_name="Veracode Transitional High" policy_version="1" policy_compliance_status="Pass" policy_rules_status="Pass" grace_period_expired="false" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="" legacy_scan_engine="false">
<static-analysis rating="B" score="87" submitted_date="2011-03-17 01:07:27 UTC" published_date="2011-03-17 01:51:00 UTC" analysis_size_bytes="1580496">
<modules>
<module name="hsqldb.jar" compiler="JAVAC_5" os="Java J2SE 6" architecture="JVM" loc="390194" score="0" numflawssev0="0" numflawssev1="0" numflawssev2="49" numflawssev3="22" numflawssev4="2" numflawssev5="0"/>
</modules>
</static-analysis>
<severity level="5"/>
<severity level="4">
<category categoryid="19" categoryname="SQL Injection" pcirelated="true">
<desc>
<para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
</desc>
<recommendations>
<para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
<bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
<bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
<bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded (%xx), HTML-encoded (&amp;#xx;), or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
<bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
</para>
</recommendations>
<cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" pcirelated="true" owasp="929" sans="801">
<description>
<text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
</description>
<staticflaws>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="35" module="hsqldb.jar" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable s. The tainted data originated from an earlier call to java.awt.TextComponent.getText.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManagerCommon.java" line="416" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.DatabaseManagerCommon" functionprototype="long testStatement(java.sql.Statement, java.lang.String, int)" functionrelativelocation="89">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="36" module="hsqldb.jar" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sCmd. The tainted data originated from an earlier call to java.awt.TextComponent.getText.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QueryTool.java" line="265" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.QueryTool" functionprototype="byte action(java.awt.Event, java.lang.Object)" functionrelativelocation="12">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="3">
<category categoryid="17" categoryname="Code Quality" pcirelated="false">
<desc>
<para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to:">
<bulletitem text="Neglecting to remove debug code or dead code"/>
<bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
<bulletitem text="Using the incorrect operator to compare objects"/>
<bulletitem text="Failing to follow an API or framework specification"/>
<bulletitem text="Using a language feature or API in an unintended manner"/>
</para>
<para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
</desc>
<recommendations>
<para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
</recommendations>
<cwe cweid="489" cwename="Leftover Debug Code" pcirelated="false">
<description>
<text text="A method may be leftover debug code that creates an unintended entry point in a web application.  Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method.  Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="12" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="222" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.DatabaseManager" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="50" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManagerSwing.java" line="491" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.DatabaseManagerSwing" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="58" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IntervalType.java" line="1682" sourcefilepath="org/hsqldb/types/" scope="org.hsqldb.types.IntervalType" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="28" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MainInvoker.java" line="76" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.MainInvoker" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="52" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QueryTool.java" line="131" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.QueryTool" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="33" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScriptTool.java" line="73" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ScriptTool" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="16" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Server.java" line="347" sourcefilepath="org/hsqldb/server/" scope="org.hsqldb.server.Server" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="43" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ServerAcl.java" line="137" sourcefilepath="org/hsqldb/server/" scope="org.hsqldb.server.ServerAcl" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="76" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ShutdownServer.java" line="51" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ShutdownServer" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="70" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SqlTool.java" line="251" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.SqlTool" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="38" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SqltoolRB.java" line="63" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.SqltoolRB" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="77" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SqlToolSprayer.java" line="79" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.SqlToolSprayer" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="7" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Transfer.java" line="200" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.Transfer" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="29" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WebServer.java" line="143" sourcefilepath="org/hsqldb/server/" scope="org.hsqldb.server.WebServer" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="48" module="hsqldb.jar" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ZaurusDatabaseManager.java" line="138" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ZaurusDatabaseManager" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
</staticflaws>
</cwe>
</category>
<category categoryid="10" categoryname="Credentials Management" pcirelated="true">
<desc>
<para text="Improper management of credentials, such as usernames and passwords, may compromise system security.  In particular, storing passwords in plaintext or hard-coding passwords directly into application code are design issues that cannot be easily remedied.  Not only does embedding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult.  Once the code is in production, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack, putting customers at risk."/>
<para text="One variation on hard-coding plaintext passwords is to hard-code a constant string which is the result of a cryptographic one-way hash.  For example, instead of storing the word &quot;secret,&quot; the application stores an MD5 hash of the word.  This is a common mechanism for obscuring hard-coded passwords from casual viewing but does not significantly reduce risk.  However, using cryptographic hashes for data stored outside the application code can be an effective practice."/>
</desc>
<recommendations>
<para text="Avoid storing passwords in easily accessible locations, and never store any type of sensitive data in plaintext.  Avoid using hard-coded usernames, passwords, or hash constants whenever possible, particularly in relation to security-critical components.   Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in alternate locations such as configuration or properties files."/>
</recommendations>
<cwe cweid="256" cwename="Plaintext Storage of a Password" pcirelated="true" owasp="930">
<description>
<text text="A method reads and/or stores sensitive information in plaintext, making the data more susceptible to compromise."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Plaintext Storage of a Password" count="1" issueid="49" module="hsqldb.jar" type="java.sql.DriverManager.getConnection" description="The java.sql.DriverManager.getConnection() method reads and/or stores sensitive information in plaintext, making the data more susceptible to compromise.

Never store sensitive data in plaintext. Consider using cryptographic hashes as an alternative to plaintext. The third argument to getConnection() contains data from server-side storage from the variable passwordString. The data from server-side storage originated from an earlier call to java.io.FileInputStream.!ctor.

References: 
CWE (http://cwe.mitre.org/data/definitions/256.html)

" note="" cweid="256" remediationeffort="4" exploitLevel="0" categoryid="10" pcirelated="true" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RCData.java" line="359" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.RCData" functionprototype="java.sql.Connection getConnection(java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="99"/>
</staticflaws>
</cwe>
</category>
<category categoryid="12" categoryname="Cryptographic Issues" pcirelated="false">
<desc>
<para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
<para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
<para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
</desc>
<recommendations>
<para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &quot;security through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate for the data being protected; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
</recommendations>
<cwe cweid="331" cwename="Insufficient Entropy" pcirelated="false" sans="327">
<description>
<text text="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand()."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="4" module="hsqldb.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManagerCommon.java" line="220" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.DatabaseManagerCommon" functionprototype="int random(int)" functionrelativelocation="40"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="32" module="hsqldb.jar" type="java.lang.Math.random" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManagerCommon.java" line="402" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.DatabaseManagerCommon" functionprototype="long testStatement(java.sql.Statement, java.lang.String, int)" functionrelativelocation="50"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="25" module="hsqldb.jar" type="java.util.Random.nextDouble" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Library.java" line="315" sourcefilepath="org/hsqldb/" scope="org.hsqldb.Library" functionprototype="double rand(java.lang.Integer)" functionrelativelocation="68"/>
</staticflaws>
</cwe>
</category>
<category categoryid="25" categoryname="Insufficient Input Validation" pcirelated="false">
<desc>
<para text="Weaknesses in this category are related to an absent or incorrect protection mechanism that fails to properly validate input that can affect the control flow or data flow of a program."/>
</desc>
<recommendations>
<para text="Validate input from untrusted sources before it is used. The untrusted data sources may include HTTP requests, file systems, databases, and any external systems that provide data to the application. In the case of HTTP requests, validate all parts of the request, including headers, form fields, cookies, and URL components that are used to transfer information from the browser to the server side application."/>
<para text="Duplicate any client-side checks on the server side. This should be simple to implement in terms of time and difficulty, and will greatly reduce the likelihood of insecure parameter values being used in the application."/>
</recommendations>
<cwe cweid="470" cwename="Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" pcirelated="false" certjava="859">
<description>
<text text="A call uses reflection in an unsafe manner.  An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application.  Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner.  Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the user-supplied class name will have already executed."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" count="1" issueid="69" module="hsqldb.jar" type="java.lang.Class.forName" description="This call to java.lang.Class.forName() uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the user-supplied class name will have already executed. The first argument to forName() contains tainted data from the variable driver. The tainted data originated from an earlier call to java.awt.TextComponent.getText.

Validate the class name against a combination of white and black lists to ensure that only expected behavior is produced.

References: 
CWE (http://cwe.mitre.org/data/definitions/470.html) 
OWASP (http://www.owasp.org/index.php/Unsafe_Reflection)

" note="" cweid="470" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConnectionDialog.java" line="94" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ConnectionDialog" functionprototype="java.sql.Connection createConnection(java.lang.String, java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="26">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>The class name being passed to the reflection operation is tainted.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
<category categoryid="14" categoryname="Time and State" pcirelated="false">
<desc>
<para text="Time and State flaws are related to unexpected interactions between threads, processes, time, and information. These interactions happen through shared state: semaphores, variables, the filesystem, and basically anything that can store information.  Vulnerabilities occur when there is a discrepancy between the programmer's assumption of how a program executes and what happens in reality. "/>
<para text="State issues result from improper management or invalid assumptions about system state, such as assuming mutable objects are immutable.  Though these conditions are less commonly exploited by attackers, state issues can lead to unpredictable or undefined application behavior."/>
</desc>
<recommendations>
<para text="Limit the interleaving of operations on resources from multiple processes.  Use locking mechanisms to protect resources effectively.  Follow best practices with respect to mutable objects and internal references.  Pay close attention to asynchronous actions in processes and make copious use of sanity checks in systems that may be subject to synchronization errors."/>
</recommendations>
<cwe cweid="377" cwename="Insecure Temporary File" pcirelated="false" certjava="857">
<description>
<text text="Creating and using insecure temporary files can leave application and system data vulnerable to attack.  In particular, file names created by the tmpnam family of functions can be easily guessed by an attacker.  If an attacker can predict the filename and create a malicious collision, he may be able to manipulate the behavior of the application."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Insecure Temporary File" count="1" issueid="65" module="hsqldb.jar" type="java.io.File.createTempFile" description="This call to java.io.File.createTempFile() creates an insecure temporary file. Creating and using insecure temporary files can leave application and system data vulnerable to attack.

Some languages provide an API for creating secure temporary files. For example, in C/C++, mkstemp() will attempt to create and open a unique file based on a filename template provided by the user, combined with a series of randomly generated characters. Note that mkstemp() is safe if only the descriptor is used and the returned filename is not used in a subsequent function call with extra privileges. Using mkstemp() does not completely eliminate race conditions but does provide better protection than other methods. Other languages may provide similar mechanisms, or you may need to implement one yourself using a combination of a cryptographic RNG to avoid predictability and synchronization to avoid race conditions. Also, be sure to assign restrictive file permissions to temporary files and to delete them immediately after use.

References: 
CWE (http://cwe.mitre.org/data/definitions/377.html) 
US-CERT (https://buildsecurityin.us-cert.gov/daisy/bsi-rules/home/g1/861.html)

" note="" cweid="377" remediationeffort="2" exploitLevel="0" categoryid="14" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SqlFile.java" line="2235" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.SqlFile" functionprototype="java.io.File plBlockFile(java.lang.String)" functionrelativelocation="15"/>
<flaw severity="3" categoryname="Insecure Temporary File" count="1" issueid="34" module="hsqldb.jar" type="java.io.File.createTempFile" description="This call to java.io.File.createTempFile() creates an insecure temporary file. Creating and using insecure temporary files can leave application and system data vulnerable to attack.

Some languages provide an API for creating secure temporary files. For example, in C/C++, mkstemp() will attempt to create and open a unique file based on a filename template provided by the user, combined with a series of randomly generated characters. Note that mkstemp() is safe if only the descriptor is used and the returned filename is not used in a subsequent function call with extra privileges. Using mkstemp() does not completely eliminate race conditions but does provide better protection than other methods. Other languages may provide similar mechanisms, or you may need to implement one yourself using a combination of a cryptographic RNG to avoid predictability and synchronization to avoid race conditions. Also, be sure to assign restrictive file permissions to temporary files and to delete them immediately after use.

References: 
CWE (http://cwe.mitre.org/data/definitions/377.html) 
US-CERT (https://buildsecurityin.us-cert.gov/daisy/bsi-rules/home/g1/861.html)

" note="" cweid="377" remediationeffort="2" exploitLevel="0" categoryid="14" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SqlTool.java" line="402" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.SqlTool" functionprototype="void objectMain(java.lang.String  [])" functionrelativelocation="28"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="2">
<category categoryid="7" categoryname="API Abuse" pcirelated="false">
<desc>
<para text="An API is a contract between a caller and a callee. Incorrect usage of certain API functions can result in exploitable security vulnerabilities."/>
<para text="The most common forms of API abuse are caused by the caller failing to honor its end of this contract.  For example, if a program fails to call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion.  Providing too few arguments to a varargs function such as printf() also violates the API contract and will cause the missing parameters to be populated with unexpected data from the stack."/>
<para text="Another common mishap is when the caller makes false assumptions about the callee's behavior.  One example of this is when a caller expects a DNS-related function to return trustworthy information that can be used for authentication purposes.  This is a bad assumption because DNS responses can be easily spoofed."/>
</desc>
<recommendations>
<para text="When calling API functions, be sure to fully understand and adhere to the specifications to avoid introducing security vulnerabilities.  Do not make assumptions about trustworthiness of the data returned from API calls or use the data in a context that was unintended by that API."/>
</recommendations>
<cwe cweid="245" cwename="J2EE Bad Practices: Direct Management of Connections" pcirelated="false">
<description>
<text text="The J2EE application directly manages connections rather than using the container's resource management facilities to obtain connections as specified in the J2EE standard.  Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="11" module="hsqldb.jar" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConnectionDialog.java" line="96" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ConnectionDialog" functionprototype="java.sql.Connection createConnection(java.lang.String, java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="93"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="19" module="hsqldb.jar" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConnectionDialogSwing.java" line="106" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ConnectionDialogSwing" functionprototype="java.sql.Connection createConnection(java.lang.String, java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="93"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="30" module="hsqldb.jar" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QueryTool.java" line="219" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.QueryTool" functionprototype="void init()" functionrelativelocation="73"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="2" module="hsqldb.jar" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RCData.java" line="359" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.RCData" functionprototype="java.sql.Connection getConnection(java.lang.String, java.lang.String, java.lang.String)" functionrelativelocation="99"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="45" module="hsqldb.jar" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScriptTool.java" line="135" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ScriptTool" functionprototype="void execute(java.lang.String  [])" functionrelativelocation="57"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="57" module="hsqldb.jar" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ShutdownServer.java" line="87" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ShutdownServer" functionprototype="void main(java.lang.String  [])" functionrelativelocation="71"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="62" module="hsqldb.jar" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ZaurusDatabaseManager.java" line="233" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ZaurusDatabaseManager" functionprototype="void main(java.lang.String  [])" functionrelativelocation="84"/>
</staticflaws>
</cwe>
</category>
<category categoryid="17" categoryname="Code Quality" pcirelated="false">
<desc>
<para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to:">
<bulletitem text="Neglecting to remove debug code or dead code"/>
<bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
<bulletitem text="Using the incorrect operator to compare objects"/>
<bulletitem text="Failing to follow an API or framework specification"/>
<bulletitem text="Using a language feature or API in an unintended manner"/>
</para>
<para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
</desc>
<recommendations>
<para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
</recommendations>
<cwe cweid="597" cwename="Use of Wrong Operator in String Comparison" pcirelated="false" certjava="847">
<description>
<text text="Using '==' to compare two strings for equality or '!=' for inequality actually compares the object references rather than their values.  It is unlikely that this reflects the intended application logic."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="40" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConnectionSetting.java" line="86" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ConnectionSetting" functionprototype="byte equals(java.lang.Object)" functionrelativelocation="40"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="24" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Database.java" line="205" sourcefilepath="org/hsqldb/" scope="org.hsqldb.Database" functionprototype="void !ctor(java.lang.String, java.lang.String, java.lang.String, persist.HsqlProperties)" functionrelativelocation="15"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="31" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Database.java" line="685" sourcefilepath="org/hsqldb/" scope="org.hsqldb.Database" functionprototype="java.lang.String getTempDirectoryPath()" functionrelativelocation="19"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="8" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="256" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseManager" functionprototype="Database getDatabaseObject(java.lang.String, java.lang.String, persist.HsqlProperties)" functionrelativelocation="4"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="6" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="259" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseManager" functionprototype="Database getDatabaseObject(java.lang.String, java.lang.String, persist.HsqlProperties)" functionrelativelocation="18"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="37" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="261" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseManager" functionprototype="Database getDatabaseObject(java.lang.String, java.lang.String, persist.HsqlProperties)" functionrelativelocation="28"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="5" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="294" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseManager" functionprototype="Database lookupDatabaseObject(java.lang.String, java.lang.String)" functionrelativelocation="7"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="42" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="297" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseManager" functionprototype="Database lookupDatabaseObject(java.lang.String, java.lang.String)" functionrelativelocation="35"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="3" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="299" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseManager" functionprototype="Database lookupDatabaseObject(java.lang.String, java.lang.String)" functionrelativelocation="56"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="66" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="320" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseManager" functionprototype="void addDatabaseObject(java.lang.String, java.lang.String, Database)" functionrelativelocation="6"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="51" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="323" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseManager" functionprototype="void addDatabaseObject(java.lang.String, java.lang.String, Database)" functionrelativelocation="30"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="64" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="325" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseManager" functionprototype="void addDatabaseObject(java.lang.String, java.lang.String, Database)" functionrelativelocation="48"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="14" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="349" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseManager" functionprototype="void removeDatabase(Database)" functionrelativelocation="23"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="80" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="352" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseManager" functionprototype="void removeDatabase(Database)" functionrelativelocation="41"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="27" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManager.java" line="354" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseManager" functionprototype="void removeDatabase(Database)" functionrelativelocation="54"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="68" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseManagerSwing.java" line="2455" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.DatabaseManagerSwing" functionprototype="void setLF(java.lang.String)" functionrelativelocation="2"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="55" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseURL.java" line="67" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseURL" functionprototype="byte isFileBasedDatabaseType(java.lang.String)" functionrelativelocation="18"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="20" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DatabaseURL.java" line="79" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DatabaseURL" functionprototype="byte isInProcessDatabaseType(java.lang.String)" functionrelativelocation="13"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="15" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DDLParser.java" line="2004" sourcefilepath="org/hsqldb/" scope="org.hsqldb.DDLParser" functionprototype="void readColumnConstraints(Table, Column, lib.HsqlArrayList)" functionrelativelocation="73"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="71" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jdbcConnection.java" line="3302" sourcefilepath="org/hsqldb/jdbc/" scope="org.hsqldb.jdbc.jdbcConnection" functionprototype="void !ctor(persist.HsqlProperties)" functionrelativelocation="36"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="73" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jdbcConnection.java" line="3324" sourcefilepath="org/hsqldb/jdbc/" scope="org.hsqldb.jdbc.jdbcConnection" functionprototype="void !ctor(persist.HsqlProperties)" functionrelativelocation="57"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="67" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="jdbcConnection.java" line="3329" sourcefilepath="org/hsqldb/jdbc/" scope="org.hsqldb.jdbc.jdbcConnection" functionprototype="void !ctor(persist.HsqlProperties)" functionrelativelocation="75"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="47" module="hsqldb.jar" type="span.equ" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Parser.java" line="1162" sourcefilepath="org/hsqldb/" scope="org.hsqldb.Parser" functionprototype="RangeVariable readSimpleRangeVariable(int)" functionrelativelocation="22"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="22" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Parser.java" line="3305" sourcefilepath="org/hsqldb/" scope="org.hsqldb.Parser" functionprototype="Column readColumnName(Table)" functionrelativelocation="17"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="74" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Parser.java" line="3309" sourcefilepath="org/hsqldb/" scope="org.hsqldb.Parser" functionprototype="Column readColumnName(Table)" functionrelativelocation="52"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="53" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ZaurusTableForm.java" line="263" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ZaurusTableForm" functionprototype="java.lang.String getPrimaryKeysString()" functionrelativelocation="23"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="23" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ZaurusTableForm.java" line="336" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ZaurusTableForm" functionprototype="byte saveChanges()" functionrelativelocation="13"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="78" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ZaurusTableForm.java" line="787" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ZaurusTableForm" functionprototype="java.lang.String generateWhere(java.lang.String  [], byte, byte, byte)" functionrelativelocation="12"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="10" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ZaurusTableForm.java" line="810" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ZaurusTableForm" functionprototype="java.lang.String generateWhere(java.lang.String  [], byte, byte, byte)" functionrelativelocation="75"/>
<flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="21" module="hsqldb.jar" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ZaurusTableForm.java" line="817" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.ZaurusTableForm" functionprototype="java.lang.String generateWhere(java.lang.String  [], byte, byte, byte)" functionrelativelocation="92"/>
</staticflaws>
</cwe>
</category>
<category categoryid="8" categoryname="Information Leakage" pcirelated="false">
<desc>
<para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product's own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
<para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to:">
<bulletitem text="Source code disclosure"/>
<bulletitem text="Browsable directories"/>
<bulletitem text="Log files or backup files in web-accessible directories"/>
<bulletitem text="Unfiltered backend error messages"/>
<bulletitem text="Exception stack traces"/>
<bulletitem text="Server version information"/>
<bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
</para>
</desc>
<recommendations>
<para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
<para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application's web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
</recommendations>
<cwe cweid="201" cwename="Information Exposure Through Sent Data" pcirelated="false">
<description>
<text text="Sensitive information may be exposed as a result of outbound network connections made by the application.  This can manifest in a couple of different ways."/>
<text text="In C/C++ applications, sometimes the developer fails to zero out a buffer before populating it with data.  This can cause information leakage if, for example, the buffer contains a data structure for which only certain fields were populated.  The uninitialized fields would contain whatever data is present at that memory location.  Sensitive information from previously allocated variables could then be leaked when the buffer is sent over the network."/>
<text text="Mobile applications may also transmit sensitive information such as email or SMS messages, address book entries, GPS location data, and anything else that can be accessed by the mobile API.  This behavior is common in mobile spyware applications designed to exfiltrate data to a listening post or other data collection point.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="17" module="hsqldb.jar" type="java.io.DataOutput.write" description="The application calls the java.io.DataOutput.write() function, which exposes sensitive information via network transfer externally to the application. The first argument to write() contains potentially sensitive data from the variable b. The potentially sensitive data originated from an earlier call to java.lang.System.getProperty.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="HsqlByteArrayOutputStream.java" line="197" sourcefilepath="org/hsqldb/lib/" scope="org.hsqldb.lib.HsqlByteArrayOutputStream" functionprototype="void write(byte  [])" functionrelativelocation="55"/>
<flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="79" module="hsqldb.jar" type="java.io.DataOutput.write" description="The application calls the java.io.DataOutput.write() function, which exposes sensitive information via network transfer externally to the application. The first argument to write() contains potentially sensitive data from the variable BYTES_LINE_SEP. The potentially sensitive data originated from an earlier call to java.lang.System.getProperty.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScriptWriterText.java" line="130" sourcefilepath="org/hsqldb/scriptio/" scope="org.hsqldb.scriptio.ScriptWriterText" functionprototype="void writeSchemaStatement(HsqlNameManager$HsqlName)" functionrelativelocation="87"/>
<flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="9" module="hsqldb.jar" type="java.io.DataOutput.write" description="The application calls the java.io.DataOutput.write() function, which exposes sensitive information via network transfer externally to the application. The first argument to write() contains potentially sensitive data from the variable BYTES_LINE_SEP. The potentially sensitive data originated from an earlier call to java.lang.System.getProperty.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScriptWriterText.java" line="143" sourcefilepath="org/hsqldb/scriptio/" scope="org.hsqldb.scriptio.ScriptWriterText" functionprototype="void writeLogStatement(Session, java.lang.String)" functionrelativelocation="36"/>
<flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="59" module="hsqldb.jar" type="java.io.DataOutput.write" description="The application calls the java.io.DataOutput.write() function, which exposes sensitive information via network transfer externally to the application. The first argument to write() contains potentially sensitive data from the variable BYTES_LINE_SEP. The potentially sensitive data originated from an earlier call to java.lang.System.getProperty.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScriptWriterText.java" line="168" sourcefilepath="org/hsqldb/scriptio/" scope="org.hsqldb.scriptio.ScriptWriterText" functionprototype="void writeRow(Session, Table, java.lang.Object  [])" functionrelativelocation="51"/>
<flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="61" module="hsqldb.jar" type="java.io.DataOutput.write" description="The application calls the java.io.DataOutput.write() function, which exposes sensitive information via network transfer externally to the application. The first argument to write() contains potentially sensitive data from the variable BYTES_LINE_SEP. The potentially sensitive data originated from an earlier call to java.lang.System.getProperty.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScriptWriterText.java" line="221" sourcefilepath="org/hsqldb/scriptio/" scope="org.hsqldb.scriptio.ScriptWriterText" functionprototype="void writeDeleteStatement(Session, Table, java.lang.Object  [])" functionrelativelocation="56"/>
<flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="75" module="hsqldb.jar" type="java.io.DataOutput.write" description="The application calls the java.io.DataOutput.write() function, which exposes sensitive information via network transfer externally to the application. The first argument to write() contains potentially sensitive data from the variable BYTES_LINE_SEP. The potentially sensitive data originated from an earlier call to java.lang.System.getProperty.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScriptWriterText.java" line="246" sourcefilepath="org/hsqldb/scriptio/" scope="org.hsqldb.scriptio.ScriptWriterText" functionprototype="void writeSequenceStatement(Session, NumberSequence)" functionrelativelocation="52"/>
<flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="13" module="hsqldb.jar" type="java.io.DataOutput.write" description="The application calls the java.io.DataOutput.write() function, which exposes sensitive information via network transfer externally to the application. The first argument to write() contains potentially sensitive data from the variable BYTES_LINE_SEP. The potentially sensitive data originated from an earlier call to java.lang.System.getProperty.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScriptWriterText.java" line="266" sourcefilepath="org/hsqldb/scriptio/" scope="org.hsqldb.scriptio.ScriptWriterText" functionprototype="void writeCommitStatement(Session)" functionrelativelocation="32"/>
<flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="44" module="hsqldb.jar" type="java.io.DataOutput.write" description="The application calls the java.io.DataOutput.write() function, which exposes sensitive information via network transfer externally to the application. The first argument to write() contains potentially sensitive data from the variable BYTES_LINE_SEP. The potentially sensitive data originated from an earlier call to java.lang.System.getProperty.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TextCache.java" line="416" sourcefilepath="org/hsqldb/persist/" scope="org.hsqldb.persist.TextCache" functionprototype="void clearRowImage(CachedObject)" functionrelativelocation="52"/>
</staticflaws>
</cwe>
</category>
<category categoryid="14" categoryname="Time and State" pcirelated="false">
<desc>
<para text="Time and State flaws are related to unexpected interactions between threads, processes, time, and information. These interactions happen through shared state: semaphores, variables, the filesystem, and basically anything that can store information.  Vulnerabilities occur when there is a discrepancy between the programmer's assumption of how a program executes and what happens in reality. "/>
<para text="State issues result from improper management or invalid assumptions about system state, such as assuming mutable objects are immutable.  Though these conditions are less commonly exploited by attackers, state issues can lead to unpredictable or undefined application behavior."/>
</desc>
<recommendations>
<para text="Limit the interleaving of operations on resources from multiple processes.  Use locking mechanisms to protect resources effectively.  Follow best practices with respect to mutable objects and internal references.  Pay close attention to asynchronous actions in processes and make copious use of sanity checks in systems that may be subject to synchronization errors."/>
</recommendations>
<cwe cweid="382" cwename="J2EE Bad Practices: Use of System.exit()" pcirelated="false" certjava="851">
<description>
<text text="A web applications should not attempt to shut down its container.  A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application.  Non-web applications may contain a main() method that calls System.exit(), but generally should not call it from other locations in the code."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="J2EE Bad Practices: Use of System.exit()" count="1" issueid="46" module="hsqldb.jar" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main() method that calls System.exit(), but generally should not call it from other locations in the code.

Ensure that System.exit() is never called by web applications.

References: 
CWE (http://cwe.mitre.org/data/definitions/382.html)

" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QueryTool.java" line="308" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.QueryTool" functionprototype="byte action(java.awt.Event, java.lang.Object)" functionrelativelocation="94"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Use of System.exit()" count="1" issueid="26" module="hsqldb.jar" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main() method that calls System.exit(), but generally should not call it from other locations in the code.

Ensure that System.exit() is never called by web applications.

References: 
CWE (http://cwe.mitre.org/data/definitions/382.html)

" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QueryTool.java" line="602" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.QueryTool" functionprototype="void printHelp(void)" functionrelativelocation="69"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Use of System.exit()" count="1" issueid="63" module="hsqldb.jar" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main() method that calls System.exit(), but generally should not call it from other locations in the code.

Ensure that System.exit() is never called by web applications.

References: 
CWE (http://cwe.mitre.org/data/definitions/382.html)

" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Server.java" line="2285" sourcefilepath="org/hsqldb/server/" scope="org.hsqldb.server.Server" functionprototype="void shutdown(byte)" functionrelativelocation="94"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Use of System.exit()" count="1" issueid="56" module="hsqldb.jar" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main() method that calls System.exit(), but generally should not call it from other locations in the code.

Ensure that System.exit() is never called by web applications.

References: 
CWE (http://cwe.mitre.org/data/definitions/382.html)

" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2011-03-17 01:02:13 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Transfer.java" line="1280" sourcefilepath="org/hsqldb/util/" scope="org.hsqldb.util.Transfer" functionprototype="void Exit()" functionrelativelocation="81"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="1"/>
<severity level="0"/>
<flaw-status new="73" reopen="0" open="0" fixed="0" total="73" not_mitigated="73" sev-1-change="0" sev-2-change="49" sev-3-change="22" sev-4-change="2" sev-5-change="0"/>
</detailedreport>
