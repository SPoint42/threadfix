<?xml version="1.0" encoding="UTF-8"?>

<detailedreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd" report_format_version="1.4" app_name="BlogEngine.NET" app_id="20392" first_build_submitted_date="2011-03-17 01:06:58 UTC" version="1.3.1.0" build_id="22931" submitter="Veracode" platform="Windows" assurance_level="4" business_criticality="4" generation_date="2014-06-03 14:40:18 UTC" veracode_level="VL1" total_flaws="328" flaws_not_mitigated="328" teams="" life_cycle_stage="External or Beta Testing" planned_deployment_date="" last_update_time="2011-03-17 01:50:47 UTC" is_latest_build="true" policy_name="Veracode Transitional High" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="" legacy_scan_engine="false">
<static-analysis rating="D" score="59" submitted_date="2011-03-17 01:02:12 UTC" published_date="2011-03-17 01:50:46 UTC" analysis_size_bytes="1189376">
<modules>
<module name="App_Code.dll" compiler="MSIL_MSVC8_X86" os="CLR 2.0" architecture="CIL" loc="35603906" score="0" numflawssev0="0" numflawssev1="0" numflawssev2="4" numflawssev3="324" numflawssev4="0" numflawssev5="0"/>
</modules>
</static-analysis>
<severity level="5"/>
<severity level="4"/>
<severity level="3">
<category categoryid="21" categoryname="CRLF Injection" pcirelated="false">
<desc>
<para text="The acronym CRLF stands for &quot;Carriage Return, Line Feed&quot; and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  "/>
</desc>
<recommendations>
<para text="Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents."/>
</recommendations>
<cwe cweid="113" cwename="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" pcirelated="false">
<description>
<text text="A function call contains an HTTP response splitting flaw.  Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="121" module="App_Code.dll" type="system_web_dll.System.Web.HttpCookieCollection.Add" description="This call to system_web_dll.System.Web.HttpCookieCollection.Add() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. Add() was called on the this.get_Response().get_Cookies() object, which contains tainted data. The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_Cookies, and system_web_dll.System.Web.HttpRequest.get_Url.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx.cs" line="342" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/user controls/" scope="app_web_commentview_ascx_f2f6c41d_dll.User_controls_CommentView" functionprototype="void SetCookie(string, string, string, string)" functionrelativelocation="94"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="196" module="App_Code.dll" type="system_web_dll.System.Web.HttpCookieCollection.Add" description="This call to system_web_dll.System.Web.HttpCookieCollection.Add() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. Add() was called on the this.get_Response().get_Cookies() object, which contains tainted data. The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_web_dll.System.Web.HttpRequest.get_Cookies.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.aspx.cs" line="159" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="contact" functionprototype="void SetCookie()" functionrelativelocation="95"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="159" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.AppendHeader" description="This call to system_web_dll.System.Web.HttpResponse.AppendHeader() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The second argument to AppendHeader() contains tainted data from the variables page, and rewrite. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="default.aspx.cs" line="88" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="_default" functionprototype="void Redirect()" functionrelativelocation="95"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="223" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.AppendHeader" description="This call to system_web_dll.System.Web.HttpResponse.AppendHeader() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The second argument to AppendHeader() contains tainted data from the variable fileName. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="filehandler.cs" line="58" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.FileHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="63"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="210" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.set_ContentType" description="This call to system_web_dll.System.Web.HttpResponse.set_ContentType() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The first argument to set_ContentType() contains tainted data from the variable extension. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="imagehandler.cs" line="63" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.ImageHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="45"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="86" module="App_Code.dll" type="system_web_dll.System.Web.HttpCachePolicy.SetETag" description="This call to system_web_dll.System.Web.HttpCachePolicy.SetETag() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The first argument to SetETag() contains tainted data from the variable md5. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="monsterhandler.cs" line="86" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.MonsterHandler" functionprototype="void SetHttpHeaders(System.Web.HttpContext, string)" functionrelativelocation="69"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="161" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.AppendHeader" description="This call to system_web_dll.System.Web.HttpResponse.AppendHeader() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The second argument to AppendHeader() contains tainted data from the variable post.get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="post.aspx.cs" line="27" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="post" functionprototype="void Page_Init(object, System.EventArgs)" functionrelativelocation="24"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="96" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.AppendHeader" description="This call to system_web_dll.System.Web.HttpResponse.AppendHeader() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The second argument to AppendHeader() contains tainted data from the variable this.get_Request().get_Url().get_Authority(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="post.aspx.cs" line="64" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="post" functionprototype="void Page_Init(object, System.EventArgs)" functionrelativelocation="95"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="340" module="App_Code.dll" type="system_web_dll.System.Web.HttpCookieCollection.Add" description="This call to system_web_dll.System.Web.HttpCookieCollection.Add() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. Add() was called on the context.get_Response().get_Cookies() object, which contains tainted data. The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_QueryString, and system_web_dll.System.Web.HttpRequest.get_Cookies.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ratinghandler.cs" line="69" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.RatingHandler" functionprototype="void SetCookie(string, System.Web.HttpContext)" functionrelativelocation="94"/>
<flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="344" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.AppendHeader" description="This call to system_web_dll.System.Web.HttpResponse.AppendHeader() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks. The second argument to AppendHeader() contains tainted data from the variable url. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting) 
WASC (http://webappsec.pbworks.com/HTTP-Response-Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="wwwsubdomainmodule.cs" line="95" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httpmodules/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpModules.WwwSubDomainModule" functionprototype="void PermanentRedirect(string, System.Web.HttpContext)" functionrelativelocation="80"/>
</staticflaws>
</cwe>
</category>
<category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="true">
<desc>
<para text="Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
<para text="XSS vulnerabilities can be either persistent or transient (often referred to as stored and reflected, respectively).  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
</desc>
<recommendations>
<para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
<bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code (a common technique in Web 2.0 applications), additional restrictions may be necessary beyond simple HTML encoding."/>
<bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
<bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
</para>
</recommendations>
<cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" pcirelated="true" owasp="931" sans="79">
<description>
<text text="This call contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="136" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="This call to system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_InnerHtml() contains tainted data from the variable post.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlAnchor.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="add_entry.aspx.cs" line="280" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/pages/" scope="admin_entry" functionprototype="void BindDrafts()" functionrelativelocation="50">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="98" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="This call to system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_InnerHtml() contains tainted data from the variable cat.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlAnchor.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="archive.aspx.cs" line="33" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="archive" functionprototype="void CreateAdminMenu()" functionrelativelocation="21">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="168" module="App_Code.dll" type="system_web_dll.System.Web.UI.AttributeCollection.set_Item" description="This call to system_web_dll.System.Web.UI.AttributeCollection.set_Item() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to set_Item() contains tainted data from the variable RemoveIllegalCharacters(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="archive.aspx.cs" line="72" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="archive" functionprototype="void CreateArchive()" functionrelativelocation="22">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="299" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="This call to system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_InnerHtml() contains tainted data from the variables post.get_Title(), and post.get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlTableCell.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="archive.aspx.cs" line="96" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="archive" functionprototype="void CreateArchive()" functionrelativelocation="56">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="219" module="App_Code.dll" type="system_web_dll.System.Web.UI.AttributeCollection.Add" description="This call to system_web_dll.System.Web.UI.AttributeCollection.Add() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to Add() contains tainted data from the variable name. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="archive.aspx.cs" line="126" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="archive" functionprototype="System.Web.UI.HtmlControls.HtmlTable CreateTable(string)" functionrelativelocation="6">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="31" module="App_Code.dll" type="system_web_dll.System.Web.UI.AttributeCollection.set_Item" description="This call to system_web_dll.System.Web.UI.AttributeCollection.set_Item() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to set_Item() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogbasepage.cs" line="137" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/controls/" scope="blogengine_core_dll.BlogEngine.Core.Web.Controls.BlogBasePage" functionprototype="void AddSyndicationLink()" functionrelativelocation="58">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="276" module="App_Code.dll" type="system_web_dll.System.Web.UI.AttributeCollection.set_Item" description="This call to system_web_dll.System.Web.UI.AttributeCollection.set_Item() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to set_Item() contains tainted data from the variable get_FeedUrl(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogbasepage.cs" line="138" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/controls/" scope="blogengine_core_dll.BlogEngine.Core.Web.Controls.BlogBasePage" functionprototype="void AddSyndicationLink()" functionrelativelocation="75">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="118" module="App_Code.dll" type="system_web_dll.System.Web.UI.AttributeCollection.set_Item" description="This call to system_web_dll.System.Web.UI.AttributeCollection.set_Item() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to set_Item() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogbasepage.cs" line="175" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/controls/" scope="blogengine_core_dll.BlogEngine.Core.Web.Controls.BlogBasePage" functionprototype="void AddRsdLinkHeader()" functionrelativelocation="76">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="9" module="App_Code.dll" type="system_web_dll.System.Web.UI.AttributeCollection.set_Item" description="This call to system_web_dll.System.Web.UI.AttributeCollection.set_Item() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to set_Item() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogbasepage.cs" line="211" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/controls/" scope="blogengine_core_dll.BlogEngine.Core.Web.Controls.BlogBasePage" functionprototype="void AddOpenSearchLinkInHeader()" functionrelativelocation="41">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="292" module="App_Code.dll" type="system_web_dll.System.Web.UI.AttributeCollection.set_Item" description="This call to system_web_dll.System.Web.UI.AttributeCollection.set_Item() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to set_Item() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogbasepage.cs" line="213" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/controls/" scope="blogengine_core_dll.BlogEngine.Core.Web.Controls.BlogBasePage" functionprototype="void AddOpenSearchLinkInHeader()" functionrelativelocation="77">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="269" module="App_Code.dll" type="system_web_dll.System.Web.UI.AttributeCollection.set_Item" description="This call to system_web_dll.System.Web.UI.AttributeCollection.set_Item() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to set_Item() contains tainted data from the variable title. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogbasepage.cs" line="224" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/controls/" scope="blogengine_core_dll.BlogEngine.Core.Web.Controls.BlogBasePage" functionprototype="void AddGenericLink(string, string, string)" functionrelativelocation="43">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="68" module="App_Code.dll" type="system_web_dll.System.Web.UI.AttributeCollection.set_Item" description="This call to system_web_dll.System.Web.UI.AttributeCollection.set_Item() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to set_Item() contains tainted data from the variable href. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogbasepage.cs" line="225" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/controls/" scope="blogengine_core_dll.BlogEngine.Core.Web.Controls.BlogBasePage" functionprototype="void AddGenericLink(string, string, string)" functionrelativelocation="64">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="170" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteCData" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteCData() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteCData() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="88" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddTitle(System.Xml.XmlWriter)" functionrelativelocation="74">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="102" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteCData" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteCData() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteCData() contains tainted data from the variable get_Instance().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="96" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddSubTitle(System.Xml.XmlWriter)" functionrelativelocation="74">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="201" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable category.get_Description(). The tainted data originated from an earlier call to system_data_dll.System.Data.Common.DbDataAdapter.Fill. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="158" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddCategories(System.Xml.XmlWriter)" functionrelativelocation="67">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="69" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteCData" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteCData() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteCData() contains tainted data from the variable category.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="163" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddCategories(System.Xml.XmlWriter)" functionrelativelocation="80">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="21" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable post.get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="184" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPosts(System.Xml.XmlWriter)" functionrelativelocation="48">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="231" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteCData" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteCData() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteCData() contains tainted data from the variable post.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="211" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPostTitle(System.Xml.XmlWriter, Post)" functionrelativelocation="72">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="289" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteCData" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteCData() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteCData() contains tainted data from the variable post.get_Content(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="219" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPostContent(System.Xml.XmlWriter, Post)" functionrelativelocation="72">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="258" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteCData" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteCData() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteCData() contains tainted data from the variable post.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="230" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPostName(System.Xml.XmlWriter, Post)" functionrelativelocation="72">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="343" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteCData" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteCData() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteCData() contains tainted data from the variable post.get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="240" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPostExcerpt(System.Xml.XmlWriter, Post)" functionrelativelocation="77">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="331" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable post.get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="249" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPostAuthor(System.Xml.XmlWriter, Post)" functionrelativelocation="63">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="85" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable tag. The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="278" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPostTags(System.Xml.XmlWriter, Post)" functionrelativelocation="60">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="143" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable comment.get_Author(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, BlogImporter.AddComment, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="300" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPostComments(System.Xml.XmlWriter, Post)" functionrelativelocation="54">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="298" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable comment.get_Website(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="304" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPostComments(System.Xml.XmlWriter, Post)" functionrelativelocation="63">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="178" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteCData" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteCData() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteCData() contains tainted data from the variable post.get_Title(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.HttpRequest.get_QueryString, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="313" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPostComments(System.Xml.XmlWriter, Post)" functionrelativelocation="78">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="345" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteCData" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteCData() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteCData() contains tainted data from the variable comment.get_Content(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="318" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPostComments(System.Xml.XmlWriter, Post)" functionrelativelocation="87">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="297" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable comment.get_Website(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="342" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPostTrackbacks(System.Xml.XmlWriter, Post)" functionrelativelocation="73">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="147" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteCData" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteCData() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteCData() contains tainted data from the variable comment.get_Content(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogmlexporthandler.cs" line="346" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler" functionprototype="void AddPostTrackbacks(System.Xml.XmlWriter, Post)" functionrelativelocation="84">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="77" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable cat.get_Description(). The tainted data originated from an earlier call to system_data_dll.System.Data.Common.DbDataAdapter.Fill. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="categories.cs" line="68" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertCategory(Category)" functionrelativelocation="62">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="325" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteValue" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteValue() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteValue() contains tainted data from the variable cat.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="categories.cs" line="69" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertCategory(Category)" functionrelativelocation="67">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="192" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable cat.get_Description(). The tainted data originated from an earlier call to system_data_dll.System.Data.Common.DbDataAdapter.Fill. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="categories.cs" line="101" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void UpdateCategory(Category)" functionrelativelocation="63">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="167" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteValue" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteValue() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteValue() contains tainted data from the variable cat.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="categories.cs" line="102" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void UpdateCategory(Category)" functionrelativelocation="68">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="67" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable cat.get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="categories.cs" line="139" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void DeleteCategory(Category)" functionrelativelocation="68">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="177" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteValue" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteValue() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteValue() contains tainted data from the variable cat.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="categories.cs" line="140" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void DeleteCategory(Category)" functionrelativelocation="73">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="80" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.Gravatar(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Cookies. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="43">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="115" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.Gravatar(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Url, BlogImporter.AddComment, system_web_dll.System.Web.HttpRequest.get_Cookies, system_web_dll.System.Web.HttpRequest.get_Params, and system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="46">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="226" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.Gravatar(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Cookies. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/indigo/" scope="ASP.themes_indigo_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="46">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="17" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.Gravatar(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Cookies. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/mobile/" scope="ASP.themes_mobile_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="46">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="309" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.Gravatar(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Url, BlogImporter.AddComment, system_web_dll.System.Web.HttpRequest.get_Cookies, system_web_dll.System.Web.HttpRequest.get_Params, and system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="43">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="130" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.Gravatar(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Cookies. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="42">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="347" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.Gravatar(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Cookies. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="46">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="316" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.Gravatar(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Cookies. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="46">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="179" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Text(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_Url, and BlogImporter.AddComment. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="6" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="50">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="145" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Text(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_Url, and BlogImporter.AddComment. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="6" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="50">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="3" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Text(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_Url, and BlogImporter.AddComment. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="6" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="53">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="41" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Text(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_Url, and BlogImporter.AddComment. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="6" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/indigo/" scope="ASP.themes_indigo_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="53">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="151" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Text(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_Url, and BlogImporter.AddComment. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="6" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="53">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="229" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Text(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_Url, and BlogImporter.AddComment. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="6" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="53">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="341" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Text(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_Url, and BlogImporter.AddComment. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="6" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/mobile/" scope="ASP.themes_mobile_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="53">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="199" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Text(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_Url, and BlogImporter.AddComment. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="6" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="49">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="137" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="6" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="52">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="74" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Flag(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="7" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="58">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="288" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="8" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="87">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="109" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="8" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="87">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="79" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="8" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="81">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="333" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UserHostAddress. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="8" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="65">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="45" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="8" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="80">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="51" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="8" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="81">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="307" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="8" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/mobile/" scope="ASP.themes_mobile_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="87">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="346" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="8" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="87">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="60" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="8" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/indigo/" scope="ASP.themes_indigo_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="87">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="29" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UserHostAddress. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="9" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/mobile/" scope="ASP.themes_mobile_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="94">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="215" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Flag(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="9" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="88">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="256" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Flag(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="9" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="88">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="46" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Flag(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="9" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="87">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="87" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UserHostAddress. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="9" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="94">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="160" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UserHostAddress. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="9" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="94">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="126" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UserHostAddress. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="9" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="94">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="205" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UserHostAddress. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="9" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/indigo/" scope="ASP.themes_indigo_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="94">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="250" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UserHostAddress. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="10" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="94">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="11" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UserHostAddress. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="10" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="94">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="131" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UserHostAddress. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="10" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="94">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="166" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.Gravatar(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Cookies. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="12" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="88">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="268" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Text(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_Url, and BlogImporter.AddComment. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="13" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_commentview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="95">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="91" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="115" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/user controls/" scope="app_web_commentview_ascx_f2f6c41d_dll.ASP.user_controls_commentview_ascx" functionprototype="void __RenderphAddComment(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="81">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="270" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="129" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/user controls/" scope="app_web_commentview_ascx_f2f6c41d_dll.ASP.user_controls_commentview_ascx" functionprototype="void __RenderphAddComment(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="86">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="71" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="130" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/user controls/" scope="app_web_commentview_ascx_f2f6c41d_dll.ASP.user_controls_commentview_ascx" functionprototype="void __RenderphAddComment(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="88">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="106" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Request().get_Url(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="131" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/user controls/" scope="app_web_commentview_ascx_f2f6c41d_dll.ASP.user_controls_commentview_ascx" functionprototype="void __RenderphAddComment(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="90">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="236" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="132" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/user controls/" scope="app_web_commentview_ascx_f2f6c41d_dll.ASP.user_controls_commentview_ascx" functionprototype="void __RenderphAddComment(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="91">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="61" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx" line="133" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/user controls/" scope="app_web_commentview_ascx_f2f6c41d_dll.ASP.user_controls_commentview_ascx" functionprototype="void __RenderphAddComment(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="93">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="33" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.Write" description="This call to system_web_dll.System.Web.HttpResponse.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Request().get_Url(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.UserControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx.cs" line="186" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/user controls/" scope="app_web_commentview_ascx_f2f6c41d_dll.User_controls_CommentView" functionprototype="void DeleteComment()" functionrelativelocation="44">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="76" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_ContactThankMessage(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.aspx" line="40" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="ASP.contact_aspx" functionprototype="void __RenderdivThank(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="55">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="208" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable _extensionName. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="editor.ascx" line="2" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/extension manager/" scope="ASP.admin_extension_manager_editor_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="19">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="64" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Request().get_UrlReferrer(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UrlReferrer. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="error404.aspx" line="8" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="ASP.error404_aspx" functionprototype="void __RenderdivSearchEngine(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="18">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="314" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable SearchTerm. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UrlReferrer. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="error404.aspx" line="9" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="ASP.error404_aspx" functionprototype="void __RenderdivSearchEngine(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="62">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="190" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Request().get_UrlReferrer().get_Host(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UrlReferrer. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="error404.aspx" line="19" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="ASP.error404_aspx" functionprototype="void __RenderdivExternalReferrer(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="23">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="198" module="App_Code.dll" type="system_web_dll.System.Web.UI.WebControls.Label.set_Text" description="This call to system_web_dll.System.Web.UI.WebControls.Label.set_Text() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data from the variable this.GetExtensions(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.WebControls.Label.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="extensions.ascx.cs" line="21" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/extension manager/" scope="User_controls_xmanager_ExtensionsList" functionprototype="void Page_Load(object, System.EventArgs)" functionrelativelocation="25">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="253" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="opensearchhandler.cs" line="33" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.OpenSearchHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="14">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="247" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable get_Instance().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="opensearchhandler.cs" line="34" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.OpenSearchHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="19">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="318" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteRaw" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteRaw() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteRaw() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="opensearchhandler.cs" line="36" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.OpenSearchHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="25">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="4" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="opensearchhandler.cs" line="40" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.OpenSearchHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="38">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="241" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="opensearchhandler.cs" line="44" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.OpenSearchHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="51">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="2" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="This call to system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_InnerHtml() contains tainted data from the variable Page.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlGenericControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="page.aspx.cs" line="51" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="page" functionprototype="void ServePage(System.Guid)" functionrelativelocation="45">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="315" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="This call to system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_InnerHtml() contains tainted data from the variable arg.get_Body(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlGenericControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="page.aspx.cs" line="65" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="page" functionprototype="void ServePage(System.Guid)" functionrelativelocation="96">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="221" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="This call to system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_InnerHtml() contains tainted data from the variable page.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlAnchor.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pagelist.cs" line="80" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/app_code/controls/" scope="app_code_dll.Controls.PageList" functionprototype="System.Web.UI.HtmlControls.HtmlGenericControl BindPages()" functionrelativelocation="60">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="146" module="App_Code.dll" type="system_web_dll.System.Web.UI.WebControls.ListItemCollection.Add" description="This call to system_web_dll.System.Web.UI.WebControls.ListItemCollection.Add() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. Add() was called on the ddlParent.get_Items() object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.WebControls.ListItemCollection.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pages.aspx.cs" line="136" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/pages/" scope="admin_Pages_pages" functionprototype="void BindParents(System.Guid)" functionrelativelocation="36">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="227" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="This call to system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_InnerHtml() contains tainted data from the variable page.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlAnchor.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pages.aspx.cs" line="152" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/pages/" scope="admin_Pages_pages" functionprototype="void BindPageList()" functionrelativelocation="33">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="291" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable page.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pages.cs" line="76" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPage(Page)" functionrelativelocation="36">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="280" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable page.get_Description(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pages.cs" line="77" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPage(Page)" functionrelativelocation="40">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="193" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable page.get_Content(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Url, and system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pages.cs" line="78" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPage(Page)" functionrelativelocation="43">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="174" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable page.get_Keywords(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pages.cs" line="79" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPage(Page)" functionrelativelocation="47">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="4" issueid="233" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable Post.get_TrackbackLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="post.aspx" line="17" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="ASP.post_aspx" functionprototype="void __RenderphRDF(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="85">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="165" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable post.get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="148" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="15">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="337" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable post.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="149" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="17">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="212" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable post.get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="150" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="18">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="28" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable post.get_Content(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="151" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="20">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="110" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable post.get_Slug(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="158" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="40">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="27" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable tag. The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="164" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="45">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="261" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable comment.get_Author(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, BlogImporter.AddComment, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="176" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="64">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="19" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable comment.get_Email(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="177" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="66">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="327" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable comment.get_Country(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="178" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="67">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="99" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable comment.get_IP(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UserHostAddress. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="179" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="69">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="278" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable comment.get_Website(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Params. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="181" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="73">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="40" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable comment.get_Content(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="182" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="74">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="294" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable email. The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="posts.cs" line="202" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/providers/xmlprovider/" scope="blogengine_core_dll.BlogEngine.Core.Providers.XmlBlogProvider" functionprototype="void InsertPost(Post)" functionrelativelocation="92">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="213" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="4" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="2">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="284" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="4" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="4">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="254" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="4" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="2">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="338" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="4" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/indigo/" scope="ASP.themes_indigo_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="3">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="237" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="4" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="9">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="16" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="4" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="4">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="313" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="4" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/mobile/" scope="ASP.themes_mobile_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="19">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="100" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="4" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="9">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="183" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="28">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="12" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/mobile/" scope="ASP.themes_mobile_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="37">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="122" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/indigo/" scope="ASP.themes_indigo_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="32">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="127" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="30">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="271" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="17">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="58" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="4">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="101" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="5" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="10">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="30" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="8" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="42">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="351" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="9" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="26">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="158" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="10" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="32">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="218" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Url, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, and system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="11" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="57">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="323" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Url, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, and system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="12" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/indigo/" scope="ASP.themes_indigo_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="51">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="154" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="12" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="63">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="230" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_PermaLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="13" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="75">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="93" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="13" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/indigo/" scope="ASP.themes_indigo_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="55">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="255" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="14" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="80">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="138" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="15" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="33">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="328" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_TrackbackLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="15" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="96">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="24" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_PermaLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="15" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/indigo/" scope="ASP.themes_indigo_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="75">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="150" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Url, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, and system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="16" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="55">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="238" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="16" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/indigo/" scope="ASP.themes_indigo_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="79">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="246" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="16" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="39">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="252" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="17" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="60">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="81" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_PermaLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="18" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="71">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="200" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_AbsoluteLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="18" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="43">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="234" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="19" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="76">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="5" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_PermaLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="20" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="45">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="72" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Url, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, and system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="24" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="77">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="119" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Url, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, and system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="25" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="79">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="133" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_PermaLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="25" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="80">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="117" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Url, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, and system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="26" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="52">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="8" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="26" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="84">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="3" issueid="141" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_AbsoluteLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="27" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="64">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="352" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Url, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, and system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="28" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="58">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="114" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_AbsoluteLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="29" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="68">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="182" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Author(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="30" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="33">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="37" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_PermaLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="30" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="73">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="140" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="31" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="78">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="108" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="34" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="46">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="35" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_AdminLinks(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Url, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, and system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="40" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="79">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="248" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_PermaLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="41" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="83">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="310" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postview.ascx" line="42" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_postview_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="86">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="334" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.Write" description="This call to system_web_dll.System.Web.HttpResponse.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable rating. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpContext.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ratinghandler.cs" line="36" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.RatingHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="43">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="135" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.Write" description="This call to system_web_dll.System.Web.HttpResponse.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable rating. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpContext.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ratinghandler.cs" line="47" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.RatingHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="84">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="273" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="This call to system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_InnerHtml() contains tainted data from the variable comment.get_Author(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, BlogImporter.AddComment, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlAnchor.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="recentcomments.cs" line="113" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/app_code/controls/" scope="app_code_dll.Controls.RecentComments" functionprototype="string RenderComments()" functionrelativelocation="43">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="149" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable html. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="recentposts.cs" line="104" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/app_code/controls/" scope="app_code_dll.Controls.RecentPosts" functionprototype="void RenderControl(System.Web.UI.HtmlTextWriter)" functionrelativelocation="80">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="73" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="rsdhandler.cs" line="46" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.RsdHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="36">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="113" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="rsdhandler.cs" line="55" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.RsdHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="57">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="162" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="rsdhandler.cs" line="56" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.RsdHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="62">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="142" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="rsdhandler.cs" line="63" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.RsdHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="80">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="279" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="rsdhandler.cs" line="64" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.RsdHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="85">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="176" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Request().get_QueryString().get_Item(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.aspx" line="9" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="ASP.search_aspx" functionprototype="void __RenderContent1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="21">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="63" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_SearchCommentLabelText(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.aspx" line="12" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="ASP.search_aspx" functionprototype="void __RenderContent1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="48">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="139" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="This call to system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_InnerHtml() contains tainted data from the variable text. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlGenericControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.aspx.cs" line="78" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="search" functionprototype="void rep_ItemDataBound(object, System.Web.UI.WebControls.RepeaterItemEventArgs)" functionrelativelocation="78">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="220" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="This call to system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_InnerHtml() contains tainted data from the variable text. The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlGenericControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.aspx.cs" line="90" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="search" functionprototype="void rep_ItemDataBound(object, System.Web.UI.WebControls.RepeaterItemEventArgs)" functionrelativelocation="98">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="228" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Html(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="searchbox.cs" line="77" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/app_code/controls/" scope="app_code_dll.Controls.SearchBox" functionprototype="void RenderControl(System.Web.UI.HtmlTextWriter)" functionrelativelocation="53">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="90" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable html. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_UrlReferrer. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="searchonsearch.cs" line="134" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/app_code/controls/" scope="app_code_dll.Controls.SearchOnSearch" functionprototype="void RenderControl(System.Web.UI.HtmlTextWriter)" functionrelativelocation="72">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="302" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable _extensionName. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.ascx" line="2" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/extension manager/" scope="ASP.admin_extension_manager_settings_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="7">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="104" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="This call to system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_InnerHtml() contains tainted data from the variable updateValues.get_Item(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlGenericControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.ascx.cs" line="153" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/extension manager/" scope="User_controls_xmanager_Parameters" functionprototype="void grid_RowUpdating(object, System.Web.UI.WebControls.GridViewUpdateEventArgs)" functionrelativelocation="76">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="128" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="This call to system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_InnerHtml() contains tainted data from the variable txt.get_Text(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlGenericControl.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.ascx.cs" line="287" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/extension manager/" scope="User_controls_xmanager_Parameters" functionprototype="bool IsValidForm()" functionrelativelocation="79">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="283" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.aspx" line="231" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/pages/" scope="ASP.admin_pages_settings_aspx" functionprototype="void __RenderContent1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="97">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="164" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sidepanel.ascx" line="16" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="app_web_sidepanel_ascx_64377460_dll.ASP.themes_standard_sidepanel_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="5">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="293" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sidepanel.ascx" line="26" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="app_web_sidepanel_ascx_fd9e9aa9_dll.ASP.themes_thegreenhouse_sidepanel_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="22">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="281" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sidepanel.ascx" line="38" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="app_web_sidepanel_ascx_64377460_dll.ASP.themes_standard_sidepanel_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="30">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="322" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sidepanel.ascx" line="80" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="app_web_sidepanel_ascx_64377460_dll.ASP.themes_standard_sidepanel_ascx" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="85">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="134" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="14" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_site_master" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="24">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="262" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="15" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/mobile/" scope="ASP.themes_mobile_site_master" functionprototype="void __Render__control5(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="8">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="89" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="15" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_site_master" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="33">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="290" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="16" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_site_master" functionprototype="void __Render__control5(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="63">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="111" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="16" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/mobile/" scope="ASP.themes_mobile_site_master" functionprototype="void __Render__control5(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="18">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="335" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="16" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/indigo/" scope="ASP.themes_indigo_site_master" functionprototype="void __Render__control5(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="63">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="62" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="16" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_site_master" functionprototype="void __Render__control6(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="63">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="84" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="17" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_site_master" functionprototype="void __Renderform1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="7">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="55" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="17" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_site_master" functionprototype="void __Render__control5(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="9">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="59" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="17" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/indigo/" scope="ASP.themes_indigo_site_master" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="52">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="180" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="18" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_site_master" functionprototype="void __Render__control5(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="63">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="204" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="19" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_site_master" functionprototype="void __RenderForm1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="9">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="144" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_FeedUrl(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="23" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/mobile/" scope="ASP.themes_mobile_site_master" functionprototype="void __Render__control5(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="60">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="202" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_FeedUrl(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="23" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/standard/" scope="ASP.themes_standard_site_master" functionprototype="void __Render__control1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="70">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="239" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="23" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_site_master" functionprototype="void __Render__control5(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="63">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="39" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_FeedUrl(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="24" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/cogitation/" scope="ASP.themes_cogitation_site_master" functionprototype="void __Renderform1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="22">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="15" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="24" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_site_master" functionprototype="void __RenderForm1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="11">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="172" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_FeedUrl(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="25" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/leaves/" scope="ASP.themes_leaves_site_master" functionprototype="void __Render__control5(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="34">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="321" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_FeedUrl(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="28" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_site_master" functionprototype="void __RenderForm1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="31">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="52" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_FeedUrl(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="28" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/dirtylicious/" scope="ASP.themes_dirtylicious_site_master" functionprototype="void __RenderForm1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="29">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="112" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="36" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_site_master" functionprototype="void __Render__control5(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="63">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="56" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_FeedUrl(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="36" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/terrafirma/" scope="ASP.themes_terrafirma_site_master" functionprototype="void __RenderForm1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="34">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="36" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="37" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_site_master" functionprototype="void __RenderForm1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="8">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="48" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="37" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_site_master" functionprototype="void __RenderA4(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="55">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="10" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="38" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_site_master" functionprototype="void __RenderForm1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="12">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="242" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_Instance().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="41" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/thegreenhouse/" scope="ASP.themes_thegreenhouse_site_master" functionprototype="void __RenderForm1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="60">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="153" module="App_Code.dll" type="mscorlib_dll.System.IO.TextWriter.Write" description="This call to mscorlib_dll.System.IO.TextWriter.Write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable get_FeedUrl(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlTextWriter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="site.master" line="50" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/themes/girlgeek/" scope="ASP.themes_girlgeek_site_master" functionprototype="void __RenderForm1(System.Web.UI.HtmlTextWriter, System.Web.UI.Control)" functionrelativelocation="30">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="303" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable post.get_AbsoluteLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sitemap.cs" line="39" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.SiteMap" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="13">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="282" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable page.get_AbsoluteLink(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sitemap.cs" line="52" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.SiteMap" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="36">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="152" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sitemap.cs" line="61" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.SiteMap" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="54">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="243" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sitemap.cs" line="68" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.SiteMap" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="68">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="123" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sitemap.cs" line="77" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.SiteMap" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="85">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="175" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable title. The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_data_dll.System.Data.Common.DbDataAdapter.Fill, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_InputStream, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="396" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssChannel(System.Xml.XmlWriter, System.Collections.Generic.List&lt;IPublishable&gt;, string)" functionrelativelocation="12">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="124" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable this.get_Settings().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="397" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssChannel(System.Xml.XmlWriter, System.Collections.Generic.List&lt;IPublishable&gt;, string)" functionrelativelocation="27">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="306" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="398" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssChannel(System.Xml.XmlWriter, System.Collections.Generic.List&lt;IPublishable&gt;, string)" functionrelativelocation="40">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="195" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable this.get_Settings().get_Language(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="437" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssChannelCommonElements(System.Xml.XmlWriter)" functionrelativelocation="19">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="94" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable this.get_Settings().get_AuthorName(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="463" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssChannelCommonElements(System.Xml.XmlWriter)" functionrelativelocation="59">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="214" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable this.get_Settings().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="471" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssChannelCommonElements(System.Xml.XmlWriter)" functionrelativelocation="70">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="339" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable publishable.get_Title(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="524" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssItem(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="11">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="22" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable content. The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_Url, and BlogImporter.AddComment. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="525" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssItem(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="13">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="348" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable ConvertToAbsolute(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="526" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssItem(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="16">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="116" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable publishable.get_Author(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, BlogImporter.AddComment, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="531" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssItem(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="18">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="312" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable ConvertToAbsolute(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="534" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssItem(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="25">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="251" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable GetPermaLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="536" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssItem(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="28">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="311" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable category.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="546" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssItem(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="39">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="163" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable publishable.get_Author(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, BlogImporter.AddComment, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="555" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssItem(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="48">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="245" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable GetPermaLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="569" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssItem(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="63">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="216" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable post.get_TrackbackLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="585" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssItem(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="81">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="342" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable ConvertToAbsolute(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="591" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssItem(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="87">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="264" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="592" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteRssItem(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="98">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="38" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="616" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomContent(System.Xml.XmlWriter, System.Collections.Generic.List&lt;IPublishable&gt;, string)" functionrelativelocation="4">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="308" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable title. The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_data_dll.System.Data.Common.DbDataAdapter.Fill, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_InputStream, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="617" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomContent(System.Xml.XmlWriter, System.Collections.Generic.List&lt;IPublishable&gt;, string)" functionrelativelocation="8">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="18" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="624" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomContent(System.Xml.XmlWriter, System.Collections.Generic.List&lt;IPublishable&gt;, string)" functionrelativelocation="34">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="296" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="629" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomContent(System.Xml.XmlWriter, System.Collections.Generic.List&lt;IPublishable&gt;, string)" functionrelativelocation="50">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="286" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable get_FeedUrl(). The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, and system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="634" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomContent(System.Xml.XmlWriter, System.Collections.Generic.List&lt;IPublishable&gt;, string)" functionrelativelocation="67">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="44" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable this.get_Settings().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="640" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomContent(System.Xml.XmlWriter, System.Collections.Generic.List&lt;IPublishable&gt;, string)" functionrelativelocation="75">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="275" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable this.get_Settings().get_AuthorName(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="676" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomContentCommonElements(System.Xml.XmlWriter)" functionrelativelocation="4">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="169" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable this.get_Settings().get_AuthorName(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="708" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomContentCommonElements(System.Xml.XmlWriter)" functionrelativelocation="49">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="350" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable this.get_Settings().get_Description(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="712" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomContentCommonElements(System.Xml.XmlWriter)" functionrelativelocation="57">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="211" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable this.get_Settings().get_Language(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="716" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomContentCommonElements(System.Xml.XmlWriter)" functionrelativelocation="66">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="203" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable this.get_Settings().get_Name(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="720" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomContentCommonElements(System.Xml.XmlWriter)" functionrelativelocation="74">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="13" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable ConvertToAbsolute(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="770" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="9">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="224" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable publishable.get_Title(). The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="771" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="11">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="47" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable GetPermaLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="779" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="19">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="244" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable ConvertToAbsolute(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="783" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="23">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="7" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable publishable.get_Author(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, BlogImporter.AddComment, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="787" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="27">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="120" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteString() contains tainted data from the variable content. The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.HttpRequest.get_Url, and BlogImporter.AddComment. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="792" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="31">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="78" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable ConvertToAbsolute(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Url, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, and system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="802" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="41">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="207" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteAttributeString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteAttributeString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteAttributeString() contains tainted data from the variable category.get_Title(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="813" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="48">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="25" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable publishable.get_Author(). The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Params, system_web_dll.System.Web.HttpRequest.get_InputStream, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, BlogImporter.AddComment, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="823" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="56">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="304" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable GetPermaLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="837" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="72">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="249" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable post.get_TrackbackLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="853" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="86">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="97" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable ConvertToAbsolute(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="859" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="90">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="103" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The fourth argument to WriteElementString() contains tainted data from the variable get_AbsoluteWebRoot(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_Filter, and system_web_dll.System.Web.HttpResponse.get_OutputStream.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="syndicationgenerator.cs" line="860" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/" scope="blogengine_core_dll.BlogEngine.Core.SyndicationGenerator" functionprototype="void WriteAtomEntry(System.Xml.XmlWriter, IPublishable)" functionrelativelocation="98">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="75" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable description. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="290" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WriteGetCategories(System.Xml.XmlTextWriter)" functionrelativelocation="31">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="92" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable title. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="302" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WriteGetCategories(System.Xml.XmlTextWriter)" functionrelativelocation="55">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="186" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable htmlUrl. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="308" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WriteGetCategories(System.Xml.XmlTextWriter)" functionrelativelocation="68">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="191" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable url. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="344" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WriteMediaInfo(System.Xml.XmlTextWriter)" functionrelativelocation="69">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="125" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable title. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="401" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePost(System.Xml.XmlTextWriter)" functionrelativelocation="14">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="105" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable description. The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="409" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePost(System.Xml.XmlTextWriter)" functionrelativelocation="21">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="32" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable link. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="417" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePost(System.Xml.XmlTextWriter)" functionrelativelocation="27">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="260" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable slug. The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="425" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePost(System.Xml.XmlTextWriter)" functionrelativelocation="34">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="232" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable excerpt. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="433" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePost(System.Xml.XmlTextWriter)" functionrelativelocation="41">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="83" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable commentPolicy. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="441" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePost(System.Xml.XmlTextWriter)" functionrelativelocation="47">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="326" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable tagList. The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="474" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePost(System.Xml.XmlTextWriter)" functionrelativelocation="77">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="332" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable cat. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="489" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePost(System.Xml.XmlTextWriter)" functionrelativelocation="91">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="317" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable title. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="525" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePage(System.Xml.XmlTextWriter)" functionrelativelocation="32">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="88" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable description. The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Url, and system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="533" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePage(System.Xml.XmlTextWriter)" functionrelativelocation="47">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="324" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable link. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="541" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePage(System.Xml.XmlTextWriter)" functionrelativelocation="62">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="185" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable title. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="602" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePosts(System.Xml.XmlTextWriter)" functionrelativelocation="25">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="6" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable description. The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="609" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePosts(System.Xml.XmlTextWriter)" functionrelativelocation="30">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="209" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable link. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="616" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePosts(System.Xml.XmlTextWriter)" functionrelativelocation="35">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="189" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable slug. The tainted data originated from an earlier call to system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="624" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePosts(System.Xml.XmlTextWriter)" functionrelativelocation="41">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="171" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable excerpt. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="632" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePosts(System.Xml.XmlTextWriter)" functionrelativelocation="47">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="267" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable commentPolicy. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="640" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePosts(System.Xml.XmlTextWriter)" functionrelativelocation="53">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="95" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable tagList. The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_web_dll.System.Web.HttpRequest.get_InputStream, and system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="654" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePosts(System.Xml.XmlTextWriter)" functionrelativelocation="65">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="157" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable cat. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="680" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePosts(System.Xml.XmlTextWriter)" functionrelativelocation="87">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="82" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable title. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="726" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePages(System.Xml.XmlTextWriter)" functionrelativelocation="30">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="194" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable description. The tainted data originated from earlier calls to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName, system_web_dll.System.Web.HttpRequest.get_QueryString, system_web_dll.System.Web.UI.WebControls.TextBox.get_Text, system_data_dll.System.Data.SqlClient.SqlCommand.ExecuteReader, system_web_dll.System.Web.HttpRequest.get_Url, and system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="734" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePages(System.Xml.XmlTextWriter)" functionrelativelocation="41">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="42" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable link. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="742" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePages(System.Xml.XmlTextWriter)" functionrelativelocation="51">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="300" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable pageParentID. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="768" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WritePages(System.Xml.XmlTextWriter)" functionrelativelocation="86">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="305" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable title. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="809" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WriteShortPages(System.Xml.XmlTextWriter)" functionrelativelocation="40">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="65" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable pageParentID. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="817" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WriteShortPages(System.Xml.XmlTextWriter)" functionrelativelocation="54">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="235" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable url. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Url. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="868" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WriteGetUsersBlogs(System.Xml.XmlTextWriter)" functionrelativelocation="41">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="181" module="App_Code.dll" type="system_xml_dll.System.Xml.XmlWriter.WriteElementString" description="This call to system_xml_dll.System.Xml.XmlWriter.WriteElementString() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The second argument to WriteElementString() contains tainted data from the variable blogName. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.HttpResponse.get_OutputStream, and system_web_dll.System.Web.HttpResponse.get_Filter.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="xmlrpcresponse.cs" line="880" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.XMLRPCResponse" functionprototype="void WriteGetUsersBlogs(System.Xml.XmlTextWriter)" functionrelativelocation="73">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
<category categoryid="12" categoryname="Cryptographic Issues" pcirelated="false">
<desc>
<para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
<para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
<para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
</desc>
<recommendations>
<para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &quot;security through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate for the data being protected; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
</recommendations>
<cwe cweid="331" cwename="Insufficient Entropy" pcirelated="false" sans="327">
<description>
<text text="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand()."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="43" module="App_Code.dll" type="mscorlib_dll.System.Random.Next" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="monsterhandler.cs" line="115" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.MonsterHandler" functionprototype="void CreateMonster(int, int, string)" functionrelativelocation="14"/>
</staticflaws>
</cwe>
</category>
<category categoryid="1" categoryname="Directory Traversal" pcirelated="false">
<desc>
<para text="Allowing user input to control paths used in filesystem operations may enable an attacker to access or modify otherwise protected system resources that would normally be inaccessible to end users.  In some cases, the user-provided input may be passed directly to the filesystem operation, or it may be concatenated to one or more fixed strings to construct a fully-qualified path."/>
<para text="When an application improperly cleanses special character sequences in user-supplied filenames, a path traversal (or directory traversal) vulnerability may occur.  For example, an attacker could specify a filename such as &quot;../../etc/passwd&quot;, which resolves to a file outside of the intended directory that the attacker would not normally be authorized to view."/>
</desc>
<recommendations>
<para text="Assume all user-supplied input is malicious.  Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters and ensure that the end result is not dangerous."/>
</recommendations>
<cwe cweid="73" cwename="External Control of File Name or Path" pcirelated="false" sans="22" certcpp="877">
<description>
<text text="This call contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="34" module="App_Code.dll" type="system_web_dll.System.Web.HttpPostedFile.SaveAs" description="This call to system_web_dll.System.Web.HttpPostedFile.SaveAs() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to SaveAs() contains tainted data from the variable control.get_FileName(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="add_entry.aspx.cs" line="97" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/pages/" scope="admin_entry" functionprototype="void Upload(string, System.Web.UI.WebControls.FileUpload)" functionrelativelocation="82">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="206" module="App_Code.dll" type="mscorlib_dll.System.IO.Directory.CreateDirectory" description="This call to mscorlib_dll.System.IO.Directory.CreateDirectory() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to CreateDirectory() contains tainted data from the variable saveFolder. The tainted data originated from an earlier call to BlogImporter.GetFile.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogimporter.asmx" line="173" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/api/" scope="BlogImporter" functionprototype="bool GetFile(string, string)" functionrelativelocation="66">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="107" module="App_Code.dll" type="mscorlib_dll.System.IO.StreamReader.!newinit_0_1" description="This call to mscorlib_dll.System.IO.StreamReader.!newinit_0_1() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !newinit_0_1() contains tainted data from the variable file. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="csshandler.cs" line="52" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.CssHandler" functionprototype="void ReduceCss(string, System.Web.HttpContext)" functionrelativelocation="33">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="285" module="App_Code.dll" type="mscorlib_dll.System.IO.File.ReadAllText" description="This call to mscorlib_dll.System.IO.File.ReadAllText() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to ReadAllText() contains tainted data from the variable fileName. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="editor.ascx.cs" line="73" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/extension manager/" scope="User_controls_xmanager_SourceEditor" functionprototype="string ReadFile(string)" functionrelativelocation="37">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="49" module="App_Code.dll" type="mscorlib_dll.System.IO.File.CreateText" description="This call to mscorlib_dll.System.IO.File.CreateText() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to CreateText() contains tainted data from the variable fileName. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="editor.ascx.cs" line="92" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/extension manager/" scope="User_controls_xmanager_SourceEditor" functionprototype="bool WriteFile(string, string)" functionrelativelocation="5">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="336" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.TransmitFile" description="This call to system_web_dll.System.Web.HttpResponse.TransmitFile() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to TransmitFile() contains tainted data from the variable info.get_FullName(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="filehandler.cs" line="61" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.FileHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="72">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="225" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.TransmitFile" description="This call to system_web_dll.System.Web.HttpResponse.TransmitFile() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to TransmitFile() contains tainted data from the variable fi.get_FullName(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="imagehandler.cs" line="79" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.ImageHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="84">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="274" module="App_Code.dll" type="mscorlib_dll.System.IO.StreamReader.!newinit_0_1" description="This call to mscorlib_dll.System.IO.StreamReader.!newinit_0_1() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !newinit_0_1() contains tainted data from the variable path. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="javascripthandler.cs" line="75" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.JavaScriptHandler" functionprototype="string RetrieveLocalScript(string)" functionrelativelocation="43">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="54" module="App_Code.dll" type="mscorlib_dll.System.IO.Directory.CreateDirectory" description="This call to mscorlib_dll.System.IO.Directory.CreateDirectory() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to CreateDirectory() contains tainted data from the variable saveFolder. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="metawebloghandler.cs" line="310" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler" functionprototype="MWAMediaInfo NewMediaObject(string, string, string, MWAMediaObject, System.Web.HttpContext)" functionrelativelocation="46">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="129" module="App_Code.dll" type="mscorlib_dll.System.IO.FileStream.!newinit_0_2" description="This call to mscorlib_dll.System.IO.FileStream.!newinit_0_2() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !newinit_0_2() contains tainted data from the variables saveFolder, and fileName. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_InputStream.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="metawebloghandler.cs" line="314" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/api/metaweblog/" scope="blogengine_core_dll.BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler" functionprototype="MWAMediaInfo NewMediaObject(string, string, string, MWAMediaObject, System.Web.HttpContext)" functionrelativelocation="52">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="197" module="App_Code.dll" type="system_web_dll.System.Web.HttpPostedFile.SaveAs" description="This call to system_web_dll.System.Web.HttpPostedFile.SaveAs() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to SaveAs() contains tainted data from the variable control.get_FileName(). The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html) 
WASC (http://webappsec.pbworks.com/Path-Traversal)

" note="" cweid="73" remediationeffort="2" exploitLevel="2" categoryid="1" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pages.aspx.cs" line="56" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/pages/" scope="admin_Pages_pages" functionprototype="void Upload(string, System.Web.UI.WebControls.FileUpload)" functionrelativelocation="82">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
<category categoryid="25" categoryname="Insufficient Input Validation" pcirelated="true">
<desc>
<para text="Weaknesses in this category are related to an absent or incorrect protection mechanism that fails to properly validate input that can affect the control flow or data flow of a program."/>
</desc>
<recommendations>
<para text="Validate input from untrusted sources before it is used. The untrusted data sources may include HTTP requests, file systems, databases, and any external systems that provide data to the application. In the case of HTTP requests, validate all parts of the request, including headers, form fields, cookies, and URL components that are used to transfer information from the browser to the server side application."/>
<para text="Duplicate any client-side checks on the server side. This should be simple to implement in terms of time and difficulty, and will greatly reduce the likelihood of insecure parameter values being used in the application."/>
</recommendations>
<cwe cweid="601" cwename="URL Redirection to Untrusted Site ('Open Redirect')" pcirelated="true" owasp="938" sans="801">
<description>
<text text="A web application accepts a user-controlled input that specifies a link to an external site, and uses that link to generate a redirect.  This enables phishing attacks."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="URL Redirection to Untrusted Site ('Open Redirect')" count="1" issueid="320" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.Redirect" description="This call to system_web_dll.System.Web.HttpResponse.Redirect() contains a URL redirection to untrusted site flaw. Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.

Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable post.get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

References: 
CWE (http://cwe.mitre.org/data/definitions/601.html) 
OWASP (http://www.owasp.org/index.php/Open_redirect) 
WASC (http://webappsec.pbworks.com/URL-Redirector-Abuse)

" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="add_entry.aspx.cs" line="187" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/pages/" scope="admin_entry" functionprototype="void btnSave_Click(object, System.EventArgs)" functionrelativelocation="99"/>
<flaw severity="3" categoryname="URL Redirection to Untrusted Site ('Open Redirect')" count="1" issueid="319" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.Redirect" description="This call to system_web_dll.System.Web.HttpResponse.Redirect() contains a URL redirection to untrusted site flaw. Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.

Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable this.get_Request().get_FilePath(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_FilePath.

References: 
CWE (http://cwe.mitre.org/data/definitions/601.html) 
OWASP (http://www.owasp.org/index.php/Open_redirect) 
WASC (http://webappsec.pbworks.com/URL-Redirector-Abuse)

" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogroll.aspx.cs" line="25" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/pages/" scope="admin_Pages_blogroll" functionprototype="void Page_Load(object, System.EventArgs)" functionrelativelocation="40"/>
<flaw severity="3" categoryname="URL Redirection to Untrusted Site ('Open Redirect')" count="1" issueid="222" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.Redirect" description="This call to system_web_dll.System.Web.HttpResponse.Redirect() contains a URL redirection to untrusted site flaw. Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.

Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable this.get_Request().get_FilePath(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_FilePath.

References: 
CWE (http://cwe.mitre.org/data/definitions/601.html) 
OWASP (http://www.owasp.org/index.php/Open_redirect) 
WASC (http://webappsec.pbworks.com/URL-Redirector-Abuse)

" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogroll.aspx.cs" line="45" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/pages/" scope="admin_Pages_blogroll" functionprototype="void btnSaveSettings_Click(object, System.EventArgs)" functionrelativelocation="94"/>
<flaw severity="3" categoryname="URL Redirection to Untrusted Site ('Open Redirect')" count="1" issueid="272" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.Redirect" description="This call to system_web_dll.System.Web.HttpResponse.Redirect() contains a URL redirection to untrusted site flaw. Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.

Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable this.get_Request().get_FilePath(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_FilePath.

References: 
CWE (http://cwe.mitre.org/data/definitions/601.html) 
OWASP (http://www.owasp.org/index.php/Open_redirect) 
WASC (http://webappsec.pbworks.com/URL-Redirector-Abuse)

" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blogroll.aspx.cs" line="51" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/pages/" scope="admin_Pages_blogroll" functionprototype="void btnSave_Click(object, System.EventArgs)" functionrelativelocation="78"/>
<flaw severity="3" categoryname="URL Redirection to Untrusted Site ('Open Redirect')" count="1" issueid="148" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.Redirect" description="This call to system_web_dll.System.Web.HttpResponse.Redirect() contains a URL redirection to untrusted site flaw. Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.

Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

References: 
CWE (http://cwe.mitre.org/data/definitions/601.html) 
OWASP (http://www.owasp.org/index.php/Open_redirect) 
WASC (http://webappsec.pbworks.com/URL-Redirector-Abuse)

" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx.cs" line="199" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/user controls/" scope="app_web_commentview_ascx_f2f6c41d_dll.User_controls_CommentView" functionprototype="void btnSave_Click(object, System.EventArgs)" functionrelativelocation="32"/>
<flaw severity="3" categoryname="URL Redirection to Untrusted Site ('Open Redirect')" count="1" issueid="188" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.Redirect" description="This call to system_web_dll.System.Web.HttpResponse.Redirect() contains a URL redirection to untrusted site flaw. Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.

Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable this.get_Post().get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

References: 
CWE (http://cwe.mitre.org/data/definitions/601.html) 
OWASP (http://www.owasp.org/index.php/Open_redirect) 
WASC (http://webappsec.pbworks.com/URL-Redirector-Abuse)

" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="commentview.ascx.cs" line="203" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/user controls/" scope="app_web_commentview_ascx_f2f6c41d_dll.User_controls_CommentView" functionprototype="void btnSave_Click(object, System.EventArgs)" functionrelativelocation="95"/>
<flaw severity="3" categoryname="URL Redirection to Untrusted Site ('Open Redirect')" count="1" issueid="57" module="App_Code.dll" type="system_web_dll.System.Web.HttpResponse.Redirect" description="This call to system_web_dll.System.Web.HttpResponse.Redirect() contains a URL redirection to untrusted site flaw. Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.

Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable post.get_RelativeLink(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

References: 
CWE (http://cwe.mitre.org/data/definitions/601.html) 
OWASP (http://www.owasp.org/index.php/Open_redirect) 
WASC (http://webappsec.pbworks.com/URL-Redirector-Abuse)

" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="true" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="trackbackhandler.cs" line="89" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.core/web/httphandlers/" scope="blogengine_core_dll.BlogEngine.Core.Web.HttpHandlers.TrackbackHandler" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="95"/>
</staticflaws>
</cwe>
<cwe cweid="470" cwename="Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" pcirelated="false" certjava="859">
<description>
<text text="A call uses reflection in an unsafe manner.  An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application.  Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner.  Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the user-supplied class name will have already executed."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" count="1" issueid="66" module="App_Code.dll" type="system_web_dll.System.Web.UI.TemplateControl.LoadControl" description="This call to system_web_dll.System.Web.UI.TemplateControl.LoadControl() uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the user-supplied class name will have already executed. The first argument to LoadControl() contains tainted data from the variable path. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.

Validate the class name against a combination of white and black lists to ensure that only expected behavior is produced.

References: 
CWE (http://cwe.mitre.org/data/definitions/470.html) 
OWASP (http://www.owasp.org/index.php/Unsafe_Reflection)

" note="" cweid="470" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="postlist.ascx.cs" line="64" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/user controls/" scope="app_web_postlist_ascx_f2f6c41d_dll.User_controls_PostList" functionprototype="void BindPosts()" functionrelativelocation="73">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>The class name being passed to the reflection operation is tainted.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="2">
<category categoryid="8" categoryname="Information Leakage" pcirelated="true">
<desc>
<para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product's own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
<para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to:">
<bulletitem text="Source code disclosure"/>
<bulletitem text="Browsable directories"/>
<bulletitem text="Log files or backup files in web-accessible directories"/>
<bulletitem text="Unfiltered backend error messages"/>
<bulletitem text="Exception stack traces"/>
<bulletitem text="Server version information"/>
<bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
</para>
</desc>
<recommendations>
<para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
<para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application's web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
</recommendations>
<cwe cweid="209" cwename="Information Exposure Through an Error Message" pcirelated="true" sans="801" certcpp="880" certjava="851">
<description>
<text text="The software generates an error message that includes sensitive information about its environment, users, or associated data.  The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.  For example, file locations disclosed by an exception stack trace may be leveraged by an attacker to exploit a path traversal issue elsewhere in the application."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="132" module="App_Code.dll" type="system_web_dll.System.Web.UI.WebControls.Label.set_Text" description="The application calls the system_web_dll.System.Web.UI.WebControls.Label.set_Text() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_Text() contains potentially sensitive data from the variable ex.get_InnerException().get_Message(). The potentially sensitive data originated from an earlier call to mscorlib_dll.System.Exception.get_Message. The potentially sensitive data is directed into an output stream returned by system_web_dll.System.Web.UI.WebControls.Label.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.aspx.cs" line="120" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="contact" functionprototype="bool SendEmail()" functionrelativelocation="95"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="26" module="App_Code.dll" type="system_web_dll.System.Web.UI.WebControls.Label.set_Text" description="The application calls the system_web_dll.System.Web.UI.WebControls.Label.set_Text() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_Text() contains potentially sensitive data from the variable ex.get_Message(). The potentially sensitive data originated from an earlier call to mscorlib_dll.System.Exception.get_Message. The potentially sensitive data is directed into an output stream returned by system_web_dll.System.Web.UI.WebControls.Label.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.aspx.cs" line="122" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/" scope="contact" functionprototype="bool SendEmail()" functionrelativelocation="98"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="173" module="App_Code.dll" type="system_web_dll.System.Web.UI.WebControls.TextBox.set_Text" description="The application calls the system_web_dll.System.Web.UI.WebControls.TextBox.set_Text() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_Text() contains potentially sensitive data from the variable _errorMsg. The potentially sensitive data originated from an earlier call to mscorlib_dll.System.Exception.get_Message. The potentially sensitive data is directed into an output stream returned by system_web_dll.System.Web.UI.WebControls.TextBox.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="editor.ascx.cs" line="46" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/extension manager/" scope="User_controls_xmanager_SourceEditor" functionprototype="void btnSave_Click(object, System.EventArgs)" functionrelativelocation="69"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="301" module="App_Code.dll" type="system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml" description="The application calls the system_web_dll.System.Web.UI.HtmlControls.HtmlContainerControl.set_InnerHtml() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_InnerHtml() contains potentially sensitive data from the variable e.get_Message(). The potentially sensitive data originated from an earlier call to mscorlib_dll.System.Exception.get_Message. The potentially sensitive data is directed into an output stream returned by system_web_dll.System.Web.UI.HtmlControls.HtmlGenericControl.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:43:02 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="extensions.ascx.cs" line="189" sourcefilepath="documents and settings/tjarrett/my documents/demo/blogenginedotnet/1.3/blogengine.web/admin/extension manager/" scope="User_controls_xmanager_ExtensionsList" functionprototype="void ShowError(System.Exception)" functionrelativelocation="83"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="1"/>
<severity level="0"/>
<flaw-status new="328" reopen="0" open="0" fixed="0" total="328" not_mitigated="328" sev-1-change="0" sev-2-change="4" sev-3-change="324" sev-4-change="0" sev-5-change="0"/>
</detailedreport>
