<?xml version="1.0" encoding="UTF-8"?>

<detailedreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd" report_format_version="1.4" app_name="Galleon" app_id="20391" first_build_submitted_date="2011-04-04 17:26:54 UTC" version="1.0.0" build_id="22930" submitter="Veracode" platform="ColdFusion" assurance_level="4" business_criticality="4" generation_date="2014-06-03 14:42:57 UTC" veracode_level="VL2" total_flaws="248" flaws_not_mitigated="248" teams="" life_cycle_stage="Deployed (In production and actively developed)" planned_deployment_date="" last_update_time="2011-04-04 18:55:50 UTC" is_latest_build="true" policy_name="Veracode Transitional High" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="" legacy_scan_engine="false">
<static-analysis rating="C" score="60" submitted_date="2011-04-04 17:28:16 UTC" published_date="2011-04-04 18:55:48 UTC" analysis_size_bytes="83939263">
<modules>
<module name="galleon-2.2.0.war" compiler="ColdFusion" os="ColdFusion" architecture="ColdFusion" loc="156210" score="0" numflawssev0="0" numflawssev1="0" numflawssev2="14" numflawssev3="233" numflawssev4="1" numflawssev5="0"/>
</modules>
</static-analysis>
<severity level="5"/>
<severity level="4">
<category categoryid="19" categoryname="SQL Injection" pcirelated="true">
<desc>
<para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
</desc>
<recommendations>
<para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
<bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
<bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
<bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded (%xx), HTML-encoded (&amp;#xx;), or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
<bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
</para>
</recommendations>
<cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" pcirelated="true" owasp="929" sans="801">
<description>
<text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
</description>
<staticflaws>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="177" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This database query contains a SQL injection flaw. The call to java.io.Writer.write() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to write() contains tainted data from the variable _escapeSingleQuotes(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="34" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="14"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="3">
<category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="true">
<desc>
<para text="Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
<para text="XSS vulnerabilities can be either persistent or transient (often referred to as stored and reflected, respectively).  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
</desc>
<recommendations>
<para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
<bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code (a common technique in Web 2.0 applications), additional restrictions may be necessary beyond simple HTML encoding."/>
<bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
<bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
</para>
</recommendations>
<cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" pcirelated="true" owasp="931" sans="79">
<description>
<text text="This call contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="41" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._Date" description="This call to coldfusion.runtime.Cast._Date() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _Date() contains tainted data from the variable parentPage._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="conference.cfc" line="259" sourcefilepath="ColdFusionTests/galleon220/galleon2/cfcs/" scope="cfconference2ecfc2039629151$funcUPDATESTATS" functionprototype="java.lang.Object runFunction(coldfusion.runtime.LocalScope, java.lang.Object, coldfusion.runtime.CFPage, coldfusion.runtime.ArgumentCollection, coldfusion.runtime.Variable)" functionrelativelocation="20"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="112" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="conferences_edit.cfm" line="81" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfconferences_edit2ecfm1372325391" functionprototype="java.lang.Object runPage()" functionrelativelocation="65"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="78" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="conferences_edit.cfm" line="91" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfconferences_edit2ecfm1372325391" functionprototype="java.lang.Object runPage()" functionrelativelocation="67"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="146" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="conferences_edit.cfm" line="96" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfconferences_edit2ecfm1372325391" functionprototype="java.lang.Object runPage()" functionrelativelocation="68"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="47" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="conferences_edit.cfm" line="103" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfconferences_edit2ecfm1372325391" functionprototype="java.lang.Object runPage()" functionrelativelocation="69"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="190" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="conferences_edit.cfm" line="104" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfconferences_edit2ecfm1372325391" functionprototype="java.lang.Object runPage()" functionrelativelocation="70"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="131" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="conferences_edit.cfm" line="114" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfconferences_edit2ecfm1372325391" functionprototype="java.lang.Object runPage()" functionrelativelocation="73"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="197" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="conferences_edit.cfm" line="125" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfconferences_edit2ecfm1372325391" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="215" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="conferences_edit.cfm" line="136" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfconferences_edit2ecfm1372325391" functionprototype="java.lang.Object runPage()" functionrelativelocation="89"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="191" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="84" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="27"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="62" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._double" description="This call to coldfusion.runtime.Cast._double() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _double() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="84" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="26"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="82" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._double" description="This call to coldfusion.runtime.Cast._double() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _double() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="89" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="30"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="46" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._double" description="This call to coldfusion.runtime.Cast._double() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _double() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="90" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="31"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="171" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="90" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="33"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="25" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="108" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="39"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="211" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="115" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="44"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="31" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="121" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="46"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="64" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="130" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="54"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="205" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._double" description="This call to coldfusion.runtime.Cast._double() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _double() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="146" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="63"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="32" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="148" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="66"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="156" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="155" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="70"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="35" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatable.cfm" line="166" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatable2ecfm1324835314" functionprototype="java.lang.Object runPage()" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="73" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatablenew.cfm" line="75" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatablenew2ecfm1697288379" functionprototype="java.lang.Object runPage()" functionrelativelocation="21"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="28" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatablenew.cfm" line="81" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatablenew2ecfm1697288379" functionprototype="java.lang.Object runPage()" functionrelativelocation="28"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="169" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatablenew.cfm" line="98" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatablenew2ecfm1697288379" functionprototype="java.lang.Object runPage()" functionrelativelocation="34"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="168" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatablenew.cfm" line="100" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatablenew2ecfm1697288379" functionprototype="java.lang.Object runPage()" functionrelativelocation="37"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="223" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatablenew.cfm" line="124" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatablenew2ecfm1697288379" functionprototype="java.lang.Object runPage()" functionrelativelocation="54"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="65" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatablenew.cfm" line="142" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatablenew2ecfm1697288379" functionprototype="java.lang.Object runPage()" functionrelativelocation="64"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="110" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatablenew.cfm" line="149" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatablenew2ecfm1697288379" functionprototype="java.lang.Object runPage()" functionrelativelocation="69"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="161" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="datatablenew.cfm" line="160" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfdatatablenew2ecfm1697288379" functionprototype="java.lang.Object runPage()" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="155" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="error.cfm" line="22" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cferror2ecfm1609391663" functionprototype="java.lang.Object runPage()" functionrelativelocation="20"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="17" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="error.cfm" line="26" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cferror2ecfm1609391663" functionprototype="java.lang.Object runPage()" functionrelativelocation="21"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="16" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="error.cfm" line="30" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cferror2ecfm1609391663" functionprototype="java.lang.Object runPage()" functionrelativelocation="23"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="93" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="error.cfm" line="34" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cferror2ecfm1609391663" functionprototype="java.lang.Object runPage()" functionrelativelocation="25"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="2" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="error.cfm" line="38" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cferror2ecfm1609391663" functionprototype="java.lang.Object runPage()" functionrelativelocation="27"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="160" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="error.cfm" line="69" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cferror2ecfm1609391663" functionprototype="java.lang.Object runPage()" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="221" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums.cfm" line="62" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfforums2ecfm267239269" functionprototype="java.lang.Object runPage()" functionrelativelocation="59"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="136" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums.cfm" line="64" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfforums2ecfm267239269" functionprototype="java.lang.Object runPage()" functionrelativelocation="63"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="133" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums.cfm" line="65" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfforums2ecfm267239269" functionprototype="java.lang.Object runPage()" functionrelativelocation="65"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="30" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._double" description="This call to coldfusion.runtime.Cast._double() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _double() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums.cfm" line="70" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfforums2ecfm267239269" functionprototype="java.lang.Object runPage()" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="176" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums.cfm" line="71" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfforums2ecfm267239269" functionprototype="java.lang.Object runPage()" functionrelativelocation="76"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="142" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums.cfm" line="73" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfforums2ecfm267239269" functionprototype="java.lang.Object runPage()" functionrelativelocation="77"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="95" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums.cfm" line="74" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfforums2ecfm267239269" functionprototype="java.lang.Object runPage()" functionrelativelocation="78"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="43" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._Date" description="This call to coldfusion.runtime.Cast._Date() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _Date() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums.cfm" line="79" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfforums2ecfm267239269" functionprototype="java.lang.Object runPage()" functionrelativelocation="86"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="58" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums.cfm" line="79" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfforums2ecfm267239269" functionprototype="java.lang.Object runPage()" functionrelativelocation="84"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="79" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums_edit.cfm" line="100" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfforums_edit2ecfm29966606" functionprototype="java.lang.Object runPage()" functionrelativelocation="63"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="97" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums_edit.cfm" line="110" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfforums_edit2ecfm29966606" functionprototype="java.lang.Object runPage()" functionrelativelocation="64"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="138" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums_edit.cfm" line="118" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfforums_edit2ecfm29966606" functionprototype="java.lang.Object runPage()" functionrelativelocation="66"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="116" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums_edit.cfm" line="126" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfforums_edit2ecfm29966606" functionprototype="java.lang.Object runPage()" functionrelativelocation="70"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="104" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums_edit.cfm" line="133" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfforums_edit2ecfm29966606" functionprototype="java.lang.Object runPage()" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="59" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums_edit.cfm" line="134" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfforums_edit2ecfm29966606" functionprototype="java.lang.Object runPage()" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="127" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data. The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums_edit.cfm" line="142" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfforums_edit2ecfm29966606" functionprototype="java.lang.Object runPage()" functionrelativelocation="73"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="44" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums_edit.cfm" line="143" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfforums_edit2ecfm29966606" functionprototype="java.lang.Object runPage()" functionrelativelocation="74"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="172" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums_edit.cfm" line="153" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfforums_edit2ecfm29966606" functionprototype="java.lang.Object runPage()" functionrelativelocation="78"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="108" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums_edit.cfm" line="164" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfforums_edit2ecfm29966606" functionprototype="java.lang.Object runPage()" functionrelativelocation="84"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="117" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums_edit.cfm" line="175" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfforums_edit2ecfm29966606" functionprototype="java.lang.Object runPage()" functionrelativelocation="91"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="39" module="galleon-2.2.0.war" type="coldfusion.runtime.CFPage.NumberFormat" description="This call to coldfusion.runtime.CFPage.NumberFormat() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to NumberFormat() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="gen_stats.cfm" line="52" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfgen_stats2ecfm702830536" functionprototype="java.lang.Object runPage()" functionrelativelocation="76"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="145" module="galleon-2.2.0.war" type="coldfusion.runtime.CFPage.NumberFormat" description="This call to coldfusion.runtime.CFPage.NumberFormat() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to NumberFormat() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="gen_stats.cfm" line="59" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfgen_stats2ecfm702830536" functionprototype="java.lang.Object runPage()" functionrelativelocation="78"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="115" module="galleon-2.2.0.war" type="coldfusion.runtime.CFPage.NumberFormat" description="This call to coldfusion.runtime.CFPage.NumberFormat() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to NumberFormat() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="gen_stats.cfm" line="65" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfgen_stats2ecfm702830536" functionprototype="java.lang.Object runPage()" functionrelativelocation="79"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="33" module="galleon-2.2.0.war" type="coldfusion.runtime.CFPage.NumberFormat" description="This call to coldfusion.runtime.CFPage.NumberFormat() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to NumberFormat() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="gen_stats.cfm" line="71" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfgen_stats2ecfm702830536" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="158" module="galleon-2.2.0.war" type="coldfusion.runtime.CFPage.NumberFormat" description="This call to coldfusion.runtime.CFPage.NumberFormat() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to NumberFormat() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="gen_stats.cfm" line="78" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfgen_stats2ecfm702830536" functionprototype="java.lang.Object runPage()" functionrelativelocation="83"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="4" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._Date" description="This call to coldfusion.runtime.Cast._Date() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _Date() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="gen_stats.cfm" line="85" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfgen_stats2ecfm702830536" functionprototype="java.lang.Object runPage()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="226" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._Date" description="This call to coldfusion.runtime.Cast._Date() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _Date() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="gen_stats.cfm" line="91" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfgen_stats2ecfm702830536" functionprototype="java.lang.Object runPage()" functionrelativelocation="91"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="81" module="galleon-2.2.0.war" type="coldfusion.runtime.CFPage.NumberFormat" description="This call to coldfusion.runtime.CFPage.NumberFormat() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to NumberFormat() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="gen_stats.cfm" line="97" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfgen_stats2ecfm702830536" functionprototype="java.lang.Object runPage()" functionrelativelocation="93"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="50" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="groups_edit.cfm" line="56" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfgroups_edit2ecfm257105232" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="213" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="groups_edit.cfm" line="67" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfgroups_edit2ecfm257105232" functionprototype="java.lang.Object runPage()" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="20" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="groups_edit.cfm" line="70" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfgroups_edit2ecfm257105232" functionprototype="java.lang.Object runPage()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="61" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.cfm" line="53" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfindex2ecfm472627225" functionprototype="java.lang.Object runPage()" functionrelativelocation="53"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="188" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.cfm" line="54" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfindex2ecfm472627225" functionprototype="java.lang.Object runPage()" functionrelativelocation="56"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="122" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._double" description="This call to coldfusion.runtime.Cast._double() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _double() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.cfm" line="61" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfindex2ecfm472627225" functionprototype="java.lang.Object runPage()" functionrelativelocation="63"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="42" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.cfm" line="62" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfindex2ecfm472627225" functionprototype="java.lang.Object runPage()" functionrelativelocation="69"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="85" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.cfm" line="63" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfindex2ecfm472627225" functionprototype="java.lang.Object runPage()" functionrelativelocation="70"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="196" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.cfm" line="64" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfindex2ecfm472627225" functionprototype="java.lang.Object runPage()" functionrelativelocation="72"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="98" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._Date" description="This call to coldfusion.runtime.Cast._Date() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _Date() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.cfm" line="68" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfindex2ecfm472627225" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="37" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.cfm" line="68" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfindex2ecfm472627225" functionprototype="java.lang.Object runPage()" functionrelativelocation="79"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="225" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.cfm" line="18" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cflogin2ecfm1133296316" functionprototype="java.lang.Object runPage()" functionrelativelocation="53"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="179" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.cfm" line="170" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cflogin2ecfm437009137" functionprototype="java.lang.Object runPage()" functionrelativelocation="89"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="187" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.cfm" line="207" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cflogin2ecfm437009137" functionprototype="java.lang.Object runPage()" functionrelativelocation="91"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="181" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.cfm" line="259" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cflogin2ecfm437009137" functionprototype="java.lang.Object runPage()" functionrelativelocation="95"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="242" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main_header.cfm" line="76" sourcefilepath="ColdFusionTests/galleon220/galleon2/pagetemplates/" scope="cfmain_header2ecfm668825305" functionprototype="java.lang.Object runPage()" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="129" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="message_edit.cfm" line="84" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessage_edit2ecfm1958479914" functionprototype="java.lang.Object runPage()" functionrelativelocation="53"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="214" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="message_edit.cfm" line="147" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessage_edit2ecfm1958479914" functionprototype="java.lang.Object runPage()" functionrelativelocation="89"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="132" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="message_edit.cfm" line="151" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessage_edit2ecfm1958479914" functionprototype="java.lang.Object runPage()" functionrelativelocation="90"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="139" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="message_edit.cfm" line="155" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessage_edit2ecfm1958479914" functionprototype="java.lang.Object runPage()" functionrelativelocation="91"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="182" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="message_edit.cfm" line="167" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessage_edit2ecfm1958479914" functionprototype="java.lang.Object runPage()" functionrelativelocation="93"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="26" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="message_edit.cfm" line="169" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessage_edit2ecfm1958479914" functionprototype="java.lang.Object runPage()" functionrelativelocation="94"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="218" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="message_edit.cfm" line="170" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessage_edit2ecfm1958479914" functionprototype="java.lang.Object runPage()" functionrelativelocation="95"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="21" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="35" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfmessages2ecfm396298410" functionprototype="java.lang.Object runPage()" functionrelativelocation="56"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="163" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="36" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfmessages2ecfm396298410" functionprototype="java.lang.Object runPage()" functionrelativelocation="58"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="27" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="81" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor1(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="86"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="105" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="116" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor7(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="72"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="243" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._double" description="This call to coldfusion.runtime.Cast._double() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _double() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="173" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor4(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="33"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="101" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="179" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor2(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="8"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="130" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="183" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor2(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="33"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="170" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="185" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor2(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="44"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="34" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="198" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor2(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="74"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="157" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="200" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor2(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="8" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._Date" description="This call to coldfusion.runtime.Cast._Date() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _Date() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="201" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor2(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="90" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="202" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor2(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="96"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="52" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="220" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor3(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="98"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="113" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="233" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor4(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="135" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="276" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor5(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="57"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="49" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="280" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor5(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="63"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="208" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="284" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor5(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="65"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="126" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="291" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor5(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="201" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="298" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor5(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="76"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="207" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="310" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor5(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="89"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="53" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="311" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor5(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="91"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="60" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="313" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor5(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="93"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="241" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._Date" description="This call to coldfusion.runtime.Cast._Date() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _Date() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages_edit.cfm" line="1" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfmessages_edit2ecfm488363496" functionprototype="java.lang.Object runPage()" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="125" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages_edit.cfm" line="71" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfmessages_edit2ecfm488363496" functionprototype="java.lang.Object runPage()" functionrelativelocation="79"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="238" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages_edit.cfm" line="81" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfmessages_edit2ecfm488363496" functionprototype="java.lang.Object runPage()" functionrelativelocation="82"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="231" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages_edit.cfm" line="87" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfmessages_edit2ecfm488363496" functionprototype="java.lang.Object runPage()" functionrelativelocation="83"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="143" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages_edit.cfm" line="99" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfmessages_edit2ecfm488363496" functionprototype="java.lang.Object runPage()" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="86" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages_edit.cfm" line="112" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfmessages_edit2ecfm488363496" functionprototype="java.lang.Object runPage()" functionrelativelocation="91"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="56" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="newpost.cfm" line="64" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfnewpost2ecfm1470561511" functionprototype="java.lang.Object runPage()" functionrelativelocation="42"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="144" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="newpost.cfm" line="102" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfnewpost2ecfm1470561511" functionprototype="java.lang.Object runPage()" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="166" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="newpost.cfm" line="137" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfnewpost2ecfm1470561511" functionprototype="java.lang.Object runPage()" functionrelativelocation="84"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="224" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="newpost.cfm" line="143" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfnewpost2ecfm1470561511" functionprototype="java.lang.Object runPage()" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="89" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="newpost.cfm" line="150" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfnewpost2ecfm1470561511" functionprototype="java.lang.Object runPage()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="83" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="newpost.cfm" line="155" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfnewpost2ecfm1470561511" functionprototype="java.lang.Object runPage()" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="230" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="newpost.cfm" line="161" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfnewpost2ecfm1470561511" functionprototype="java.lang.Object runPage()" functionrelativelocation="91"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="63" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="newpost.cfm" line="162" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfnewpost2ecfm1470561511" functionprototype="java.lang.Object runPage()" functionrelativelocation="92"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="45" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="newpost.cfm" line="164" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfnewpost2ecfm1470561511" functionprototype="java.lang.Object runPage()" functionrelativelocation="92"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="114" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pagination.cfm" line="43" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfpagination2ecfm1898752098" functionprototype="java.lang.Object runPage()" functionrelativelocation="34"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="66" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pagination.cfm" line="50" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfpagination2ecfm1898752098" functionprototype="java.lang.Object runPage()" functionrelativelocation="41"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="103" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._double" description="This call to coldfusion.runtime.Cast._double() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _double() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pagination.cfm" line="61" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfpagination2ecfm1898752098" functionprototype="java.lang.Object runPage()" functionrelativelocation="52"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="12" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pagination.cfm" line="61" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfpagination2ecfm1898752098" functionprototype="java.lang.Object runPage()" functionrelativelocation="50"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="123" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pagination.cfm" line="67" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfpagination2ecfm1898752098" functionprototype="java.lang.Object runPage()" functionrelativelocation="60"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="7" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pagination.cfm" line="72" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfpagination2ecfm1898752098" functionprototype="java.lang.Object runPage()" functionrelativelocation="78"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="18" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._double" description="This call to coldfusion.runtime.Cast._double() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _double() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pagination.cfm" line="79" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfpagination2ecfm1898752098" functionprototype="java.lang.Object runPage()" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="216" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pagination.cfm" line="79" sourcefilepath="ColdFusionTests/galleon220/galleon2/tags/" scope="cfpagination2ecfm1898752098" functionprototype="java.lang.Object runPage()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="109" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pm.cfm" line="81" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpm2ecfm1119568750" functionprototype="java.lang.Object runPage()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="198" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pm.cfm" line="87" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpm2ecfm1119568750" functionprototype="java.lang.Object runPage()" functionrelativelocation="89"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="165" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pms.cfm" line="49" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpms2ecfm372223709" functionprototype="java.lang.Object runPage()" functionrelativelocation="51"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="202" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pms.cfm" line="50" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpms2ecfm372223709" functionprototype="java.lang.Object runPage()" functionrelativelocation="54"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="173" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pms.cfm" line="51" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpms2ecfm372223709" functionprototype="java.lang.Object runPage()" functionrelativelocation="57"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="164" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._double" description="This call to coldfusion.runtime.Cast._double() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _double() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pms.cfm" line="57" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpms2ecfm372223709" functionprototype="java.lang.Object runPage()" functionrelativelocation="69"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="149" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pms.cfm" line="58" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpms2ecfm372223709" functionprototype="java.lang.Object runPage()" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="91" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pms.cfm" line="60" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpms2ecfm372223709" functionprototype="java.lang.Object runPage()" functionrelativelocation="76"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="174" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pms.cfm" line="60" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpms2ecfm372223709" functionprototype="java.lang.Object runPage()" functionrelativelocation="74"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="121" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pms.cfm" line="61" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpms2ecfm372223709" functionprototype="java.lang.Object runPage()" functionrelativelocation="77"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="10" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._Date" description="This call to coldfusion.runtime.Cast._Date() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _Date() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pms.cfm" line="62" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpms2ecfm372223709" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="19" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pms.cfm" line="63" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpms2ecfm372223709" functionprototype="java.lang.Object runPage()" functionrelativelocation="82"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="38" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="profile.cfm" line="94" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfprofile2ecfm301157937" functionprototype="java.lang.Object runPage()" functionrelativelocation="42"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="220" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data. The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="profile.cfm" line="126" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfprofile2ecfm301157937" functionprototype="java.lang.Object runPage()" functionrelativelocation="64"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="185" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="profile.cfm" line="195" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfprofile2ecfm301157937" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="200" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="profile.cfm" line="205" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfprofile2ecfm301157937" functionprototype="java.lang.Object runPage()" functionrelativelocation="82"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="229" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="profile.cfm" line="268" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfprofile2ecfm301157937" functionprototype="java.lang.Object runPage()" functionrelativelocation="94"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="119" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="profile.cfm" line="269" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfprofile2ecfm301157937" functionprototype="java.lang.Object runPage()" functionrelativelocation="94"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="248" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ranks_edit.cfm" line="50" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfranks_edit2ecfm609330208" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="3" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ranks_edit.cfm" line="60" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfranks_edit2ecfm609330208" functionprototype="java.lang.Object runPage()" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="244" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ranks_edit.cfm" line="66" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfranks_edit2ecfm609330208" functionprototype="java.lang.Object runPage()" functionrelativelocation="86"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="141" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable XMLFormat(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="rss.cfm" line="49" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfrss2ecfm1974087654" functionprototype="java.lang.Object runPage()" functionrelativelocation="56"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="203" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._Date" description="This call to coldfusion.runtime.Cast._Date() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _Date() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="rss.cfm" line="61" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfrss2ecfm1974087654" functionprototype="java.lang.Object runPage()" functionrelativelocation="73"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="88" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._Date" description="This call to coldfusion.runtime.Cast._Date() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _Date() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="rss.cfm" line="63" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfrss2ecfm1974087654" functionprototype="java.lang.Object runPage()" functionrelativelocation="78"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="99" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable XMLFormat(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="rss.cfm" line="65" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfrss2ecfm1974087654" functionprototype="java.lang.Object runPage()" functionrelativelocation="83"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="239" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable XMLFormat(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="rss.cfm" line="66" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfrss2ecfm1974087654" functionprototype="java.lang.Object runPage()" functionrelativelocation="84"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="151" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable XMLFormat(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="rss.cfm" line="67" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfrss2ecfm1974087654" functionprototype="java.lang.Object runPage()" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="184" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable XMLFormat(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="rss.cfm" line="68" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfrss2ecfm1974087654" functionprototype="java.lang.Object runPage()" functionrelativelocation="89"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="74" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.cfm" line="53" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfsearch2ecfm380206011" functionprototype="java.lang.Object runPage()" functionrelativelocation="28"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="23" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.cfm" line="56" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfsearch2ecfm380206011" functionprototype="java.lang.Object runPage()" functionrelativelocation="29"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="178" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.cfm" line="84" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfsearch2ecfm380206011" functionprototype="java.lang.Object runPage()" functionrelativelocation="41"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="246" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.cfm" line="102" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfsearch2ecfm380206011" functionprototype="java.lang.Object runPage()" functionrelativelocation="56"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="107" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.cfm" line="120" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfsearch2ecfm380206011" functionprototype="java.lang.Object runPage()" functionrelativelocation="72"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="234" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.cfm" line="138" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfsearch2ecfm380206011" functionprototype="java.lang.Object runPage()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="228" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._Date" description="This call to coldfusion.runtime.Cast._Date() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _Date() contains tainted data from the variable _arrayGetAt().

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search_stats.cfm" line="72" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsearch_stats2ecfm815296038" functionprototype="java.lang.Object runPage()" functionrelativelocation="72"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="120" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search_stats.cfm" line="80" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsearch_stats2ecfm815296038" functionprototype="java.lang.Object runPage()" functionrelativelocation="75"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="2" issueid="69" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search_stats.cfm" line="88" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsearch_stats2ecfm815296038" functionprototype="java.lang.Object runPage()" functionrelativelocation="79"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="55" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search_stats.cfm" line="96" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsearch_stats2ecfm815296038" functionprototype="java.lang.Object runPage()" functionrelativelocation="82"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="186" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search_stats.cfm" line="106" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsearch_stats2ecfm815296038" functionprototype="java.lang.Object runPage()" functionrelativelocation="84"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="180" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search_stats.cfm" line="108" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsearch_stats2ecfm815296038" functionprototype="java.lang.Object runPage()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="183" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search_stats.cfm" line="113" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsearch_stats2ecfm815296038" functionprototype="java.lang.Object runPage()" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="134" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search_stats.cfm" line="114" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsearch_stats2ecfm815296038" functionprototype="java.lang.Object runPage()" functionrelativelocation="89"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="75" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sendpm.cfm" line="74" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfsendpm2ecfm1893992425" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="13" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sendpm.cfm" line="79" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfsendpm2ecfm1893992425" functionprototype="java.lang.Object runPage()" functionrelativelocation="83"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="237" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sendpm.cfm" line="84" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfsendpm2ecfm1893992425" functionprototype="java.lang.Object runPage()" functionrelativelocation="84"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="159" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="95" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="68"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="106" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="98" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="69"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="24" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="104" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="69"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="232" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="110" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="70"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="192" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="116" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="71"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="210" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="122" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="72"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="15" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="128" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="73"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="77" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="135" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="74"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="70" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="141" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="75"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="100" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="147" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="76"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="96" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="148" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="77"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="54" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="153" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="78"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="217" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="160" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="79"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="199" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="161" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="222" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="168" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="82"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="162" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="169" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="83"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="167" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="175" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="84"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="247" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="176" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="204" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="182" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="245" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="183" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="209" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="189" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="89"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="236" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="195" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="90"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="233" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="settings.cfm" line="196" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfsettings2ecfm2095677180" functionprototype="java.lang.Object runPage()" functionrelativelocation="91"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="102" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="35" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfthreads2ecfm1877075900" functionprototype="java.lang.Object runPage()" functionrelativelocation="56"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="152" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="36" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfthreads2ecfm1877075900" functionprototype="java.lang.Object runPage()" functionrelativelocation="58"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="219" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="78" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfthreads2ecfm1471765454" functionprototype="java.lang.Object runPage()" functionrelativelocation="63"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="36" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="79" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfthreads2ecfm1471765454" functionprototype="java.lang.Object runPage()" functionrelativelocation="64"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="189" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="80" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfthreads2ecfm1471765454" functionprototype="java.lang.Object runPage()" functionrelativelocation="66"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="92" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.URLEncodedFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="81" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfthreads2ecfm1471765454" functionprototype="java.lang.Object runPage()" functionrelativelocation="68"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="14" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._double" description="This call to coldfusion.runtime.Cast._double() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _double() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="85" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfthreads2ecfm1471765454" functionprototype="java.lang.Object runPage()" functionrelativelocation="72"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="9" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="92" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfthreads2ecfm1471765454" functionprototype="java.lang.Object runPage()" functionrelativelocation="78"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="94" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="94" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfthreads2ecfm1471765454" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="111" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data. The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="94" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfthreads2ecfm1471765454" functionprototype="java.lang.Object runPage()" functionrelativelocation="80"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="206" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="95" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfthreads2ecfm1471765454" functionprototype="java.lang.Object runPage()" functionrelativelocation="82"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="227" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._Date" description="This call to coldfusion.runtime.Cast._Date() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _Date() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="100" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfthreads2ecfm1471765454" functionprototype="java.lang.Object runPage()" functionrelativelocation="88"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="1" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads.cfm" line="100" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfthreads2ecfm1471765454" functionprototype="java.lang.Object runPage()" functionrelativelocation="86"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="87" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads_edit.cfm" line="68" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfthreads_edit2ecfm1779760929" functionprototype="java.lang.Object runPage()" functionrelativelocation="70"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="51" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads_edit.cfm" line="79" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfthreads_edit2ecfm1779760929" functionprototype="java.lang.Object runPage()" functionrelativelocation="72"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="11" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads_edit.cfm" line="87" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfthreads_edit2ecfm1779760929" functionprototype="java.lang.Object runPage()" functionrelativelocation="75"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="137" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads_edit.cfm" line="95" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfthreads_edit2ecfm1779760929" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="194" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads_edit.cfm" line="110" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfthreads_edit2ecfm1779760929" functionprototype="java.lang.Object runPage()" functionrelativelocation="84"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="29" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads_edit.cfm" line="111" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfthreads_edit2ecfm1779760929" functionprototype="java.lang.Object runPage()" functionrelativelocation="85"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="175" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data. The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads_edit.cfm" line="120" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfthreads_edit2ecfm1779760929" functionprototype="java.lang.Object runPage()" functionrelativelocation="87"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="240" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads_edit.cfm" line="121" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfthreads_edit2ecfm1779760929" functionprototype="java.lang.Object runPage()" functionrelativelocation="90"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="80" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="update.cfm" line="14" sourcefilepath="ColdFusionTests/galleon220/galleon2/installation/to2/" scope="cfupdate2ecfm725944535" functionprototype="java.lang.Object runPage()" functionrelativelocation="9"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="76" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._int" description="This call to coldfusion.runtime.Cast._int() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _int() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="update.cfm" line="88" sourcefilepath="ColdFusionTests/galleon220/galleon2/installation/to2/" scope="cfupdate2ecfm725944535" functionprototype="java.lang.Object runPage()" functionrelativelocation="90"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="68" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="users.cfm" line="42" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfusers2ecfm942740064" functionprototype="java.lang.Object runPage()" functionrelativelocation="58"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="154" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="users.cfm" line="43" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfusers2ecfm942740064" functionprototype="java.lang.Object runPage()" functionrelativelocation="60"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="147" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="users_edit.cfm" line="87" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfusers_edit2ecfm1543996161" functionprototype="java.lang.Object runPage()" functionrelativelocation="75"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="193" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="users_edit.cfm" line="99" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfusers_edit2ecfm1543996161" functionprototype="java.lang.Object runPage()" functionrelativelocation="79"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="22" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="users_edit.cfm" line="101" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfusers_edit2ecfm1543996161" functionprototype="java.lang.Object runPage()" functionrelativelocation="80"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="195" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="users_edit.cfm" line="108" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfusers_edit2ecfm1543996161" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="235" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="users_edit.cfm" line="114" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfusers_edit2ecfm1543996161" functionprototype="java.lang.Object runPage()" functionrelativelocation="81"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="140" module="galleon-2.2.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable _String(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable. It was also observed that the tainted data was encoded using coldfusion.runtime.CFPage.HTMLEditFormat. Manual review is necessary to determine whether the appropriate contextual encoding method was applied.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="users_edit.cfm" line="123" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfusers_edit2ecfm1543996161" functionprototype="java.lang.Object runPage()" functionrelativelocation="83"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="150" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="users_edit.cfm" line="141" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfusers_edit2ecfm1543996161" functionprototype="java.lang.Object runPage()" functionrelativelocation="92"/>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="71" module="galleon-2.2.0.war" type="coldfusion.runtime.Cast._boolean" description="This call to coldfusion.runtime.Cast._boolean() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to _boolean() contains tainted data from the variable this._autoscalarize(). The tainted data originated from an earlier call to coldfusion.runtime.CfJspPage.bindUrlVariable.

Properly encode all untrusted data before using it to construct an HTTP response. The encoding method should be chosen based on the specific use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding (e.g. StringEscapeUtils.escapeHtml() in J2EE or HttpUtility.HtmlEncode() in ASP.NET). In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="users_edit.cfm" line="142" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfusers_edit2ecfm1543996161" functionprototype="java.lang.Object runPage()" functionrelativelocation="93"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="2">
<category categoryid="8" categoryname="Information Leakage" pcirelated="true">
<desc>
<para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product's own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
<para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to:">
<bulletitem text="Source code disclosure"/>
<bulletitem text="Browsable directories"/>
<bulletitem text="Log files or backup files in web-accessible directories"/>
<bulletitem text="Unfiltered backend error messages"/>
<bulletitem text="Exception stack traces"/>
<bulletitem text="Server version information"/>
<bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
</para>
</desc>
<recommendations>
<para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
<para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application's web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
</recommendations>
<cwe cweid="209" cwename="Information Exposure Through an Error Message" pcirelated="true" sans="801" certcpp="880" certjava="851">
<description>
<text text="The software generates an error message that includes sensitive information about its environment, users, or associated data.  The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.  For example, file locations disclosed by an exception stack trace may be leveraged by an attacker to exploit a path traversal issue elsewhere in the application."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="6" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="conferences_edit.cfm" line="83" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfconferences_edit2ecfm1372325391" functionprototype="java.lang.Object runPage()" functionrelativelocation="66"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="48" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="forums_edit.cfm" line="102" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfforums_edit2ecfm29966606" functionprototype="java.lang.Object runPage()" functionrelativelocation="63"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="40" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="groups_edit.cfm" line="58" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfgroups_edit2ecfm257105232" functionprototype="java.lang.Object runPage()" functionrelativelocation="83"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="72" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.cfm" line="202" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cflogin2ecfm437009137" functionprototype="java.lang.Object runPage()" functionrelativelocation="90"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="124" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="message_edit.cfm" line="142" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessage_edit2ecfm1958479914" functionprototype="java.lang.Object runPage()" functionrelativelocation="88"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="148" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages.cfm" line="269" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfmessages2ecfm1138097119" functionprototype="java.lang.Object _factor5(javax.servlet.jsp.tagext.Tag, javax.servlet.jsp.JspWriter)" functionrelativelocation="42"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="5" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="messages_edit.cfm" line="73" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfmessages_edit2ecfm488363496" functionprototype="java.lang.Object runPage()" functionrelativelocation="80"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="128" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="newpost.cfm" line="132" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfnewpost2ecfm1470561511" functionprototype="java.lang.Object runPage()" functionrelativelocation="83"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="118" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="pm.cfm" line="66" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfpm2ecfm1119568750" functionprototype="java.lang.Object runPage()" functionrelativelocation="83"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="153" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="profile.cfm" line="162" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfprofile2ecfm301157937" functionprototype="java.lang.Object runPage()" functionrelativelocation="79"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="57" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ranks_edit.cfm" line="52" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfranks_edit2ecfm609330208" functionprototype="java.lang.Object runPage()" functionrelativelocation="83"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="212" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="sendpm.cfm" line="61" sourcefilepath="ColdFusionTests/galleon220/galleon2/" scope="cfsendpm2ecfm1893992425" functionprototype="java.lang.Object runPage()" functionrelativelocation="76"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="67" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="threads_edit.cfm" line="71" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfthreads_edit2ecfm1779760929" functionprototype="java.lang.Object runPage()" functionrelativelocation="71"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="84" module="galleon-2.2.0.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to write() contains potentially sensitive data from the variable _String(). The potentially sensitive data originated from earlier calls to coldfusion.runtime.NeoException.unwrap, and coldfusion.runtime.CfJspPage.bindSensitiveVariable.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2011-03-17 00:38:41 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="users_edit.cfm" line="90" sourcefilepath="ColdFusionTests/galleon220/galleon2/admin/" scope="cfusers_edit2ecfm1543996161" functionprototype="java.lang.Object runPage()" functionrelativelocation="76"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="1"/>
<severity level="0"/>
<flaw-status new="248" reopen="0" open="0" fixed="0" total="248" not_mitigated="248" sev-1-change="0" sev-2-change="14" sev-3-change="233" sev-4-change="1" sev-5-change="0"/>
</detailedreport>
