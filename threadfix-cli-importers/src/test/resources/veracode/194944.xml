<?xml version="1.0" encoding="UTF-8"?>

<detailedreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd" report_format_version="1.4" app_name="Bodgeit" app_id="90470" first_build_submitted_date="2014-01-21 16:07:15 UTC" version="21 Jan 2014 Static" build_id="194944" submitter="James Tomsett" platform="Not Specified" assurance_level="5" business_criticality="5" generation_date="2014-06-03 14:40:04 UTC" veracode_level="VL2" total_flaws="81" flaws_not_mitigated="81" teams="" life_cycle_stage="Not Specified" planned_deployment_date="" last_update_time="2014-01-21 16:20:05 UTC" is_latest_build="false" policy_name="Veracode Transitional Very High" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="" legacy_scan_engine="false">
<static-analysis rating="C" score="74" submitted_date="2014-01-21 16:07:12 UTC" published_date="2014-01-21 16:20:04 UTC" analysis_size_bytes="994789" engine_version="71090">
<modules>
<module name="bodgeit.war" compiler="JAVAC_7" os="Java J2SE 7" architecture="JVM" loc="56406" score="74" numflawssev0="0" numflawssev1="0" numflawssev2="37" numflawssev3="28" numflawssev4="16" numflawssev5="0"/>
</modules>
</static-analysis>
<severity level="5"/>
<severity level="4">
<category categoryid="19" categoryname="SQL Injection" pcirelated="true">
<desc>
<para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
</desc>
<recommendations>
<para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
<bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
<bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
<bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded (%xx), HTML-encoded (&amp;#xx;), or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
<bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
</para>
</recommendations>
<cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" pcirelated="true" owasp="929" sans="801">
<description>
<text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
</description>
<staticflaws>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="46" module="bodgeit.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable basketId. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="81" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="8">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="61" module="bodgeit.war" type="java.sql.PreparedStatement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the stmt object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="184" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="46">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="10" module="bodgeit.war" type="java.sql.PreparedStatement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.execute() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. execute() was called on the stmt object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="191" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="50">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="81" module="bodgeit.war" type="java.sql.PreparedStatement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the stmt object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="199" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="53">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="18" module="bodgeit.war" type="java.sql.PreparedStatement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.execute() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. execute() was called on the stmt object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="206" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="57">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="50" module="bodgeit.war" type="java.sql.PreparedStatement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.execute() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. execute() was called on the stmt object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="241" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="69">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="14" module="bodgeit.war" type="java.sql.PreparedStatement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.execute() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. execute() was called on the stmt object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="246" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="72">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="17" module="bodgeit.war" type="java.sql.PreparedStatement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the stmt object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="260" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="75">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="79" module="bodgeit.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variables username, and password. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="41" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.login_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="18">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="25" module="bodgeit.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable basketId. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="77" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.login_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="52">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="78" module="bodgeit.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable basketId. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="80" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.login_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="56">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="41" module="bodgeit.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variables password1, and username. The tainted data originated from earlier calls to javax.servlet.ServletRequest.getParameter, and java.sql.Statement.executeQuery.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="password.jsp" line="50" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.password_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="46">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="9" module="bodgeit.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variables password1, and username. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="register.jsp" line="55" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.register_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="23">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="36" module="bodgeit.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variables password1, and username. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="register.jsp" line="56" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.register_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="27">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="4" module="bodgeit.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable basketId. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="register.jsp" line="85" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.register_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="49">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="45" module="bodgeit.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable basketId. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection) 
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="register.jsp" line="86" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.register_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="52">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="3">
<category categoryid="17" categoryname="Code Quality" pcirelated="false">
<desc>
<para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to:">
<bulletitem text="Neglecting to remove debug code or dead code"/>
<bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
<bulletitem text="Using the incorrect operator to compare objects"/>
<bulletitem text="Failing to follow an API or framework specification"/>
<bulletitem text="Using a language feature or API in an unintended manner"/>
</para>
<para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
</desc>
<recommendations>
<para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
</recommendations>
<cwe cweid="489" cwename="Leftover Debug Code" pcirelated="false">
<description>
<text text="A method may be leftover debug code that creates an unintended entry point in a web application.  Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method.  Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="1" module="bodgeit.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="" line="0" sourcefilepath="" scope="com.thebodgeitstore.selenium.tests.FunctionalTest" functionprototype="void main(java.lang.String  [])" functionrelativelocation="0"/>
</staticflaws>
</cwe>
</category>
<category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="true">
<desc>
<para text="Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
<para text="XSS vulnerabilities can be either persistent or transient (often referred to as stored and reflected, respectively).  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
</desc>
<recommendations>
<para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
<bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code (a common technique in Web 2.0 applications), additional restrictions may be necessary beyond simple HTML encoding."/>
<bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
<bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
</para>
</recommendations>
<cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" pcirelated="true" owasp="931" sans="79">
<description>
<text text="This call contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="70" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable rs.getString(). The tainted data originated from an earlier call to java.sql.preparedstatement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="admin.jsp" line="49" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.admin_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="33">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="74" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable output. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="advanced.jsp" line="155" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.advanced_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="72">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="75" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable basketId. The tainted data originated from an earlier call to javax.servlet.http.httpservletrequest.getcookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="167" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="43">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="26" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable product. The tainted data originated from an earlier call to java.sql.preparedstatement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="275" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="81">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="49" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable comments. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.jsp" line="63" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.contact_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="36">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="24" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable rs.getString(). The tainted data originated from an earlier call to java.sql.preparedstatement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.jsp" line="94" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.contact_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="66">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="44" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to java.sql.statement.executequery, and javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.jsp" line="115" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.contact_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="83">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="52" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable username. The tainted data originated from earlier calls to java.sql.statement.executequery, and javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="header.jsp" line="29" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.header_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="22">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="8" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable type. The tainted data originated from an earlier call to java.sql.preparedstatement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="header.jsp" line="94" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.header_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="57">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="72" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variables product, and type. The tainted data originated from an earlier call to java.sql.preparedstatement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="home.jsp" line="57" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.home_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="60">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="23" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable debug. The tainted data originated from an earlier call to javax.servlet.http.httpservletrequest.getcookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="104" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.login_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="81">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="42" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable username. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="109" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.login_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="85">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="11" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to java.sql.statement.executequery, and javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="password.jsp" line="83" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.password_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="75">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="7" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variables product, and rs.getString(). The tainted data originated from an earlier call to java.sql.preparedstatement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="product.jsp" line="74" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.product_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="28">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="13" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable product. The tainted data originated from an earlier call to java.sql.preparedstatement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="product.jsp" line="95" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.product_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="50">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="21" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable rs.getString(). The tainted data originated from an earlier call to java.sql.preparedstatement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="product.jsp" line="96" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.product_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="56">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="62" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable rs.getString(). The tainted data originated from an earlier call to java.sql.preparedstatement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="product.jsp" line="104" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.product_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="65">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="48" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable debug. The tainted data originated from an earlier call to javax.servlet.http.httpservletrequest.getcookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="register.jsp" line="122" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.register_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="81">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="47" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable rs.getString(). The tainted data originated from an earlier call to java.sql.preparedstatement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="score.jsp" line="45" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.score_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="34">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="3" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.servletrequest.getparameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.jsp" line="44" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.search_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="23">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="1">
<note>This source of the tainted data is an external web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
<flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="16" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable output. The tainted data originated from an earlier call to java.sql.statement.executequery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS) 
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting) 
Supported Cleansers (https://analysiscenter.veracode.com/auth/helpCenter/review/review_cleansers.html)

" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.jsp" line="75" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.search_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="60">
<exploitability_adjustments>
<exploitability_adjustment score_adjustment="-1">
<note>The source of the tainted data in this web application flaw is not a web request.</note>
</exploitability_adjustment>
</exploitability_adjustments>
</flaw>
</staticflaws>
</cwe>
</category>
<category categoryid="12" categoryname="Cryptographic Issues" pcirelated="false">
<desc>
<para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
<para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
<para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
</desc>
<recommendations>
<para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &quot;security through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate for the data being protected; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
</recommendations>
<cwe cweid="331" cwename="Insufficient Entropy" pcirelated="false" sans="327">
<description>
<text text="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand()."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="57" module="bodgeit.war" type="java.lang.Math.random" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.jsp" line="80" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.contact_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="51"/>
<flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="39" module="bodgeit.war" type="java.lang.Math.random" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="home.jsp" line="50" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.home_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="38"/>
</staticflaws>
</cwe>
</category>
<category categoryid="22" categoryname="Encapsulation" pcirelated="false">
<desc>
<para text="Encapsulation is about defining strong security boundaries governing data and processes. Within an application, it might mean differentiation between validated and unvalidated data, between public and private members, or between one user's data and another's.  "/>
<para text="In object-oriented programming, the term encapsulation is used to describe the grouping together of data and functionality within an object and the ability to provide users with a well-defined interface in a way which hides their internal workings.  Though there is some overlap with the above definition, the two definitions should not be confused as being interchangeable."/>
</desc>
<recommendations>
<para text="The wide variance of encapsulation issues makes it impractical to generalize how these issues should be addressed, beyond stating that encapsulation boundaries should be well-defined and adhered to.  Refer to individual categories for specific recommendations. "/>
</recommendations>
<cwe cweid="501" cwename="Trust Boundary Violation" pcirelated="false">
<description>
<text text="A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted.  This application mixes trusted and untrusted data in the same data structure.  By doing so, it becomes easier for programmers to mistakenly trust unvalidated data.  Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.  A common manifestation of this flaw is in J2EE application, when a Session object is used to store untrusted data from the HTTP request."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Trust Boundary Violation" count="1" issueid="19" module="bodgeit.war" type="span.set" description="This call to span.set() mixes trusted and untrusted data in the same data structure, thereby encouraging programmers to mistakenly trust unvalidated data. The tainted data originated from an earlier call to java.sql.Statement.executeQuery.

Avoid storing untrusted data alongside trusted data in the same data structure. Establish and maintain trust boundaries for data storage.

References: 
CWE (http://cwe.mitre.org/data/definitions/501.html)

" note="" cweid="501" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="48" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.login_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="23"/>
<flaw severity="3" categoryname="Trust Boundary Violation" count="1" issueid="80" module="bodgeit.war" type="span.set" description="This call to span.set() mixes trusted and untrusted data in the same data structure, thereby encouraging programmers to mistakenly trust unvalidated data. The tainted data originated from an earlier call to java.sql.Statement.executeQuery.

Avoid storing untrusted data alongside trusted data in the same data structure. Establish and maintain trust boundaries for data storage.

References: 
CWE (http://cwe.mitre.org/data/definitions/501.html)

" note="" cweid="501" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="50" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.login_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="26"/>
<flaw severity="3" categoryname="Trust Boundary Violation" count="1" issueid="32" module="bodgeit.war" type="span.set" description="This call to span.set() mixes trusted and untrusted data in the same data structure, thereby encouraging programmers to mistakenly trust unvalidated data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.

Avoid storing untrusted data alongside trusted data in the same data structure. Establish and maintain trust boundaries for data storage.

References: 
CWE (http://cwe.mitre.org/data/definitions/501.html)

" note="" cweid="501" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="register.jsp" line="60" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.register_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="30"/>
</staticflaws>
</cwe>
</category>
<category categoryid="15" categoryname="Session Fixation" pcirelated="true">
<desc>
<para text="Authenticating a user without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.  Session fixation vulnerabilities occur when: ">
<bulletitem text="A web application authenticates a user without first invalidating the existing session ID, thereby continuing to use the session ID already associated with the user."/>
<bulletitem text="An attacker is able to force a known session ID on a user so that, once the user authenticates, the attacker has access to the authenticated session."/>
</para>
<para text="In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to authenticate against the server using the same session identifier, giving the attacker access to the user's account through the active session.  A similar, passive version of this attack could be carried out by sniffing the session identifier at some point between the victim and the server prior to authentication."/>
<para text="Failing to destroy a session once a user has logged out, or failing to provide a mechanism for logging out of the application, is another form of session fixation. "/>
</desc>
<recommendations>
<para text="Invalidate any existing session after the user has authenticated and issue a new session identifier.  Also, invalidate the session object when a user logs out, otherwise the session will remain valid on the server."/>
</recommendations>
<cwe cweid="384" cwename="Session Fixation" pcirelated="true" owasp="930">
<description>
<text text="The application never invalidates user sessions, which can lead to session fixation attacks.  As a result, the session identifier stays the same before, during, and after a user has logged in or out.  An attacker may attempt to force a user into using a specific session identifier, then hijack the session once the user has logged in."/>
</description>
<staticflaws>
<flaw severity="3" categoryname="Session Fixation" count="1" issueid="5" module="bodgeit.war" type="getSession" description="The application calls getSession(), and never invalidates user sessions, which can lead to session fixation attacks. As a result, the session identifier stays the same before, during, and after a user has logged in or out. An attacker may attempt to force a user into using a specific session identifier, then hijack the session once the user has logged in.

Invalidate any existing session after the user has authenticated but before calling methods that establish the UserPrincipal. Also, invalidate the session object when a user logs out, otherwise the session will remain valid on the server.

References: 
CWE (http://cwe.mitre.org/data/definitions/384.html) 
OWASP (http://www.owasp.org/index.php/Session_Fixation) 
WASC (http://webappsec.pbworks.com/Session-Fixation)

" note="" cweid="384" remediationeffort="2" exploitLevel="0" categoryid="15" pcirelated="true" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.jsp" line="81" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.contact_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="51"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="2">
<category categoryid="7" categoryname="API Abuse" pcirelated="false">
<desc>
<para text="An API is a contract between a caller and a callee. Incorrect usage of certain API functions can result in exploitable security vulnerabilities."/>
<para text="The most common forms of API abuse are caused by the caller failing to honor its end of this contract.  For example, if a program fails to call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion.  Providing too few arguments to a varargs function such as printf() also violates the API contract and will cause the missing parameters to be populated with unexpected data from the stack."/>
<para text="Another common mishap is when the caller makes false assumptions about the callee's behavior.  One example of this is when a caller expects a DNS-related function to return trustworthy information that can be used for authentication purposes.  This is a bad assumption because DNS responses can be easily spoofed."/>
</desc>
<recommendations>
<para text="When calling API functions, be sure to fully understand and adhere to the specifications to avoid introducing security vulnerabilities.  Do not make assumptions about trustworthiness of the data returned from API calls or use the data in a context that was unintended by that API."/>
</recommendations>
<cwe cweid="245" cwename="J2EE Bad Practices: Direct Management of Connections" pcirelated="false">
<description>
<text text="The J2EE application directly manages connections rather than using the container's resource management facilities to obtain connections as specified in the J2EE standard.  Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="31" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="admin.jsp" line="12" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.admin_jsp" functionprototype="void jspInit()" functionrelativelocation="20"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="71" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="advanced.jsp" line="12" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.advanced_jsp" functionprototype="void jspInit()" functionrelativelocation="20"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="66" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="15" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void jspInit()" functionrelativelocation="20"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="29" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.jsp" line="10" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.contact_jsp" functionprototype="void jspInit()" functionrelativelocation="20"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="38" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="header.jsp" line="89" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.header_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="44"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="40" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="home.jsp" line="12" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.home_jsp" functionprototype="void jspInit()" functionrelativelocation="20"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="59" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="init.jsp" line="67" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.init_jsp" functionprototype="void jspInit()" functionrelativelocation="2"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="69" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="10" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.login_jsp" functionprototype="void jspInit()" functionrelativelocation="20"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="77" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="password.jsp" line="10" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.password_jsp" functionprototype="void jspInit()" functionrelativelocation="20"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="56" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="product.jsp" line="12" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.product_jsp" functionprototype="void jspInit()" functionrelativelocation="20"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="6" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="register.jsp" line="10" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.register_jsp" functionprototype="void jspInit()" functionrelativelocation="20"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="20" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="score.jsp" line="10" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.score_jsp" functionprototype="void jspInit()" functionrelativelocation="20"/>
<flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="67" module="bodgeit.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.jsp" line="11" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.search_jsp" functionprototype="void jspInit()" functionrelativelocation="20"/>
</staticflaws>
</cwe>
</category>
<category categoryid="12" categoryname="Cryptographic Issues" pcirelated="true">
<desc>
<para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
<para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
<para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
</desc>
<recommendations>
<para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &quot;security through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate for the data being protected; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
</recommendations>
<cwe cweid="614" cwename="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" pcirelated="true" sans="311">
<description>
<text text="Setting the Secure attribute on an HTTP cookie instructs the web browser to send it only over a secure channel, such as an SSL connection.  Issuing a cookie without the Secure attribute allows the browser to transmit it over unencrypted connections, which are susceptible to eavesdropping.  It is particularly important to set the Secure attribute on any cookies containing sensitive data, such as authentication information (e.g. &quot;remember me&quot; style functionality)."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="27" module="bodgeit.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html) 
WASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="110" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="20"/>
<flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="15" module="bodgeit.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html) 
WASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="82" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.login_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="58"/>
<flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="53" module="bodgeit.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html) 
WASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="register.jsp" line="87" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.register_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="54"/>
</staticflaws>
</cwe>
</category>
<category categoryid="8" categoryname="Information Leakage" pcirelated="true">
<desc>
<para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product's own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
<para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to:">
<bulletitem text="Source code disclosure"/>
<bulletitem text="Browsable directories"/>
<bulletitem text="Log files or backup files in web-accessible directories"/>
<bulletitem text="Unfiltered backend error messages"/>
<bulletitem text="Exception stack traces"/>
<bulletitem text="Server version information"/>
<bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
</para>
</desc>
<recommendations>
<para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
<para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application's web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
</recommendations>
<cwe cweid="209" cwename="Information Exposure Through an Error Message" pcirelated="true" sans="801" certcpp="880" certjava="851">
<description>
<text text="The software generates an error message that includes sensitive information about its environment, users, or associated data.  The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.  For example, file locations disclosed by an exception stack trace may be leveraged by an attacker to exploit a path traversal issue elsewhere in the application."/>
</description>
<staticflaws>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="68" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="admin.jsp" line="81" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.admin_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="75"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="64" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data). The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="advanced.jsp" line="55" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.advanced_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="19"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="51" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing user-specified or database data) from the variable key. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="advanced.jsp" line="71" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.advanced_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="29"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="43" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="advanced.jsp" line="164" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.advanced_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="79"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="76" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="91" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="13"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="63" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="115" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="22"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="55" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="145" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="35"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="33" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="154" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="39"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="65" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="216" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="61"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="28" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="basket.jsp" line="293" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.basket_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="92"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="37" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.jsp" line="69" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.contact_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="41"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="35" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.jsp" line="71" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.contact_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="45"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="22" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="contact.jsp" line="101" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.contact_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="77"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="58" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="header.jsp" line="99" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.header_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="69"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="60" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="home.jsp" line="67" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.home_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="76"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="54" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="89" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.login_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="65"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="12" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="product.jsp" line="123" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.product_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="79"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="73" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="register.jsp" line="96" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.register_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="62"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="2" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="register.jsp" line="104" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.register_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="69"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="30" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="score.jsp" line="63" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.score_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="59"/>
<flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="34" module="bodgeit.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing user-specified or database data) from the variable e. The data from an error message (possibly containing user-specified or database data) originated from an earlier call to java.lang.throwable.tostring. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="false" date_first_occurrence="2014-01-21 15:56:43 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.jsp" line="84" sourcefilepath="/" scope="com.veracode.compiledjsp.xbodgeitwar.search_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="70"/>
</staticflaws>
</cwe>
</category>
</severity>
<severity level="1"/>
<severity level="0"/>
<flaw-status new="81" reopen="0" open="0" fixed="0" total="81" not_mitigated="81" sev-1-change="0" sev-2-change="37" sev-3-change="28" sev-4-change="16" sev-5-change="0"/>
</detailedreport>
