////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2014 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service;

import com.denimgroup.threadfix.data.dao.VulnerabilitySearchDao;
import com.denimgroup.threadfix.data.entities.ChannelType;
import com.denimgroup.threadfix.data.entities.Vulnerability;
import com.denimgroup.threadfix.data.entities.VulnerabilitySearchParameters;
import com.denimgroup.threadfix.data.entities.VulnerabilityTreeElement;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Created by mac on 5/7/14.
 */
@Service
public class VulnerabilitySearchServiceImpl implements VulnerabilitySearchService {

    @Autowired
    private VulnerabilitySearchDao vulnerabilitySearchDao;
    @Autowired
    private ApplicationService applicationService;
    @Autowired
    private OrganizationService organizationService;
    @Autowired
    private ChannelTypeService channelTypeService;

    @Override
    public List<Vulnerability> performLookup(VulnerabilitySearchParameters parameters) {
        return vulnerabilitySearchDao.performLookup(parameters);
    }

    @Override
    public List<VulnerabilityTreeElement> getTree(VulnerabilitySearchParameters parameters) {
        return vulnerabilitySearchDao.getTree(parameters);
    }

    @Override
    public Long getCount(VulnerabilitySearchParameters parameters) {
        return vulnerabilitySearchDao.getCount(parameters);
    }

    @Override
    public void doNameLookups(VulnerabilitySearchParameters parameters) {
        if (parameters.getChannelTypes() != null) {
            for (ChannelType channelType : parameters.getChannelTypes()) {
                if (channelType.getId() == null && channelType.getName() != null) {
                    ChannelType actualChannelType = channelTypeService.loadChannel(channelType.getName());
                    if (actualChannelType != null) {
                        channelType.setId(actualChannelType.getId());
                    }
                }
            }
        }

    }

}
