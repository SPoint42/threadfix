////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2014 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.webapp.controller;

import com.denimgroup.threadfix.data.entities.*;
import com.denimgroup.threadfix.logging.SanitizedLogger;
import com.denimgroup.threadfix.remote.response.RestResponse;
import com.denimgroup.threadfix.service.*;
import com.denimgroup.threadfix.service.enterprise.EnterpriseTest;
import com.denimgroup.threadfix.service.report.ReportsService;
import com.denimgroup.threadfix.service.util.ControllerUtils;
import com.denimgroup.threadfix.service.util.PermissionUtils;
import com.denimgroup.threadfix.views.AllViews;
import org.codehaus.jackson.map.ObjectWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.*;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;

@Controller
@RequestMapping("/reports/")
public class VulnerabilitySearchController {

    private static final ObjectWriter WRITER = ControllerUtils.getObjectWriter(AllViews.UIVulnSearch.class);
    private static final SanitizedLogger LOG = new SanitizedLogger(VulnerabilitySearchController.class);

    @Autowired
    public VulnerabilitySearchService vulnerabilitySearchService;
    @Autowired
    public OrganizationService organizationService;
    @Autowired
    public ChannelTypeService channelTypeService;
    @Autowired
    private GenericVulnerabilityService genericVulnerabilityService;
    @Autowired
    private ApplicationService applicationService;
    @Autowired
    private FilterJsonBlobService filterJsonBlobService;
    @Autowired
    private ReportsService reportsService;
    @Autowired
    private TagService tagService;
    @Autowired(required = false)
    EnterpriseTagService enterpriseTagService;


    // Turn Date.getTime() javascript numbers into java.util.Date objects.
    @InitBinder
    public void initBinder(WebDataBinder binder) {
        binder.registerCustomEditor(Date.class, new NumericDatePropertyEditorSupport());
    }

    @RequestMapping(value="tree", method = RequestMethod.POST)
    public @ResponseBody RestResponse<List<VulnerabilityTreeElement>> getTree(@ModelAttribute VulnerabilitySearchParameters parameters) {
        return RestResponse.success(vulnerabilitySearchService.getTree(parameters));
    }

    @RequestMapping(value="search", method = RequestMethod.POST)
    public @ResponseBody String searchVulnerabilities(@ModelAttribute VulnerabilitySearchParameters parameters) throws IOException {

        long start = System.currentTimeMillis();

        Map<String, Object> responseMap = new HashMap<>();

        responseMap.put("vulns", vulnerabilitySearchService.performLookup(parameters));
        responseMap.put("vulnCount", vulnerabilitySearchService.getCount(parameters));

        String responseString = WRITER.writeValueAsString(RestResponse.success(responseMap));

        LOG.info("Loading vulns took " + (System.currentTimeMillis() - start) + " ms");

        return responseString;
    }

    @RequestMapping(value="search/export/csv", method = RequestMethod.POST)
    public String exportVulnerabilitiesInCSV(@ModelAttribute VulnerabilitySearchParameters parameters,
                                                           HttpServletResponse response) throws IOException {

        long start = System.currentTimeMillis();

        parameters.setPage(null);
        parameters.setNumberVulnerabilities(null);

        response.setContentType("application/octet-stream");
        response.setHeader("Content-Disposition", "attachment; filename=\"search_export.csv\"");
        InputStream in = null;

        parameters.setDescList(Arrays.asList("severity.intValue"));
        parameters.setAscList(Arrays.asList("genericVulnAlias.name", "surface.path", "surface.parameter"));
        List<Vulnerability> vulnerabilityList = vulnerabilitySearchService.performLookup(parameters);

        ReportCheckResultBean reportCheckResultBean = reportsService.generateSearchReport(vulnerabilityList);
        if (reportCheckResultBean != null && reportCheckResultBean.getReportCheckResult() == ReportsService.ReportCheckResult.VALID) {
            StringBuffer report = reportCheckResultBean.getReport();
            if (report != null) {
                String pageString = report.toString();
                in = new ByteArrayInputStream(pageString.getBytes("UTF-8"));
            }
        }

        if (in != null) {
            ServletOutputStream out = response.getOutputStream();

            byte[] outputByteBuffer = new byte[65535];

            int remainingSize = in.read(outputByteBuffer, 0, 65535);

            // copy binary content to output stream
            while (remainingSize != -1) {
                out.write(outputByteBuffer, 0, remainingSize);
                remainingSize = in.read(outputByteBuffer, 0, 65535);
            }
            in.close();
            out.flush();
            out.close();
        } else {
            return ReportsService.ReportCheckResult.OTHER_ERROR.toString();
        }
        LOG.info("Exporting vulns took " + (System.currentTimeMillis() - start) + " ms");

        return null;
    }

    @RequestMapping(value="parameters", method = RequestMethod.GET)
    public @ResponseBody String getParameters(HttpServletRequest request) {

        Map<String, Object> responseObject = new HashMap<>();

        List<Organization> teams = organizationService.loadAllActiveFilter();
        responseObject.put("teams", teams);
        responseObject.put("scanners", channelTypeService.loadAll());
        responseObject.put("vulnTypes", genericVulnerabilityService.loadAll());
        responseObject.put("applications", PermissionUtils.filterAppsList(teams));
        responseObject.put("savedFilters", filterJsonBlobService.loadAll());
        responseObject.put("filterParameters", ControllerUtils.getItem(request, ControllerUtils.FILTER_PARAMETER));
        responseObject.put("tags", tagService.loadAll());

        if (EnterpriseTest.isEnterprise() && enterpriseTagService != null) {
            responseObject.put("enterpriseTags", enterpriseTagService.loadEnterpriseTags());
        }

        return ControllerUtils.writeSuccessObjectWithView(responseObject, AllViews.VulnSearchApplications.class);
    }

    @RequestMapping(value="update/heading/{appId}", method = RequestMethod.GET)
    public @ResponseBody RestResponse<Map<String, Object>> getHeadingInfo(@PathVariable("appId") Integer appId) {

        Map<String, Object> responseObject = new HashMap<>();

        long numVulns = applicationService.getVulnCount(appId, true);
        Application application = applicationService.loadApplication(appId);
        responseObject.put("scans", application.getScans());
        responseObject.put("numVulns", numVulns);

        return RestResponse.success(responseObject);
    }

    @RequestMapping(value="saveParameters", method = RequestMethod.POST)
    public @ResponseBody void saveParameters(@ModelAttribute VulnerabilitySearchParameters parameters, HttpServletRequest request) {
        ControllerUtils.addItem(request, ControllerUtils.FILTER_PARAMETER, parameters);
    }
}
