////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2014 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////

package com.denimgroup.threadfix.webapp.controller;

import com.denimgroup.threadfix.data.entities.Application;
import com.denimgroup.threadfix.data.entities.Permission;
import com.denimgroup.threadfix.data.entities.Vulnerability;
import com.denimgroup.threadfix.logging.SanitizedLogger;
import com.denimgroup.threadfix.remote.response.RestResponse;
import com.denimgroup.threadfix.service.ApplicationService;
import com.denimgroup.threadfix.service.GenericVulnerabilityService;
import com.denimgroup.threadfix.service.VulnerabilityService;
import com.denimgroup.threadfix.service.beans.TableSortBean;
import com.denimgroup.threadfix.service.util.ControllerUtils;
import com.denimgroup.threadfix.service.util.PermissionUtils;
import com.denimgroup.threadfix.views.AllViews;
import com.denimgroup.threadfix.webapp.viewmodels.VulnerabilityCollectionModel;
import org.codehaus.jackson.map.ObjectWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/organizations/{orgId}/applications/{appId}")
@SessionAttributes({"defectTracker", "application", "waf", "defectViewModel"})
public class VulnerabilityTabController {
	
	private final SanitizedLogger log = new SanitizedLogger(VulnerabilityTabController.class);

    @Autowired
	private ApplicationService applicationService;
    @Autowired
	private VulnerabilityService vulnerabilityService;
    @Autowired
    private GenericVulnerabilityService genericVulnerabilityService;

	////////////////////////////////////////////////////
	//                Table Methods
	////////////////////////////////////////////////////

	@RequestMapping(value="/table", method = RequestMethod.POST)
	public @ResponseBody String getOpenTableVulns(@PathVariable("orgId") Integer orgId,
			@PathVariable("appId") Integer appId,
			@ModelAttribute TableSortBean bean) throws IOException {
		
		return tableMap(orgId, appId, bean);
	}

    private static final ObjectWriter writer = ControllerUtils.getObjectWriter(AllViews.TableRow.class);

    // This method returns all of the vulnerabilities and tab numbers
	public String tableMap(int orgId, int appId, TableSortBean bean) throws IOException {

        long start = System.currentTimeMillis();

		if (!PermissionUtils.isAuthorized(Permission.READ_ACCESS, orgId, appId)) {
			return writer.writeValueAsString(RestResponse.failure("You are not authorized to view this information."));
		}
		
		Application application = applicationService.loadApplication(appId);
		if (application == null || !application.isActive()) {
			log.warn(ResourceNotFoundException.getLogMessage("Application", appId));
			throw new ResourceNotFoundException();
		}

        long numClosedVulns = applicationService.getVulnCount(appId, false);

		long numVulns = applicationService.getCount(appId, bean);

        TableSortBean falsePositiveBean = new TableSortBean();
        falsePositiveBean.setFalsePositive(true);
        long falsePositiveCount = applicationService.getCount(appId, falsePositiveBean);

        TableSortBean hiddenBean = new TableSortBean();
        hiddenBean.setHidden(true);
        long numHiddenVulns = applicationService.getCount(appId, hiddenBean);

        TableSortBean openBean = new TableSortBean();
        openBean.setOpen(true);
        long numOpenVulns = applicationService.getCount(appId, openBean);

		long numPages = numVulns / 100;
		if (numVulns % 100 == 0) {
			numPages -= 1;
		}
		if (bean.getPage() > numPages) {
			bean.setPage((int) (numPages + 1));
		}
		
		if (bean.getPage() < 1) {
			bean.setPage(1);
		}

		List<Vulnerability> vulnList = applicationService.getVulnTable(appId, bean);

        Map<String, Object> responseMap = new HashMap<>();
        responseMap.put("vulnerabilities", vulnList);
        responseMap.put("numVulns", numVulns);
        responseMap.put("numClosed", numClosedVulns);
        responseMap.put("numHidden", numHiddenVulns);
        responseMap.put("numOpen", numOpenVulns);
        responseMap.put("numFalsePositive", falsePositiveCount);
        responseMap.put("genericVulnerabilities", genericVulnerabilityService.loadAll());
        responseMap.put("scans", application.getScans());

        log.info("Took " + (System.currentTimeMillis() - start) + " ms to generate map objects.");

        return writer.writeValueAsString(RestResponse.success(responseMap));
	}
	
	// These are actions that change vulnerability state
	
	@RequestMapping(value="/table/close", method = RequestMethod.POST)
	public @ResponseBody String closeTableVulnList(@PathVariable("orgId") Integer orgId,
			@PathVariable("appId") Integer appId,
			@ModelAttribute VulnerabilityCollectionModel vulnerabilityCollectionModel,
            @ModelAttribute TableSortBean bean,
			Model model) throws IOException {
			
		if (!checkCollectionModel(vulnerabilityCollectionModel, model)) {
            return writer.writeValueAsString(RestResponse.failure("Couldn't complete bulk vulnerability operation."));
		}
		
		vulnerabilityService.closeAll(
			vulnerabilityCollectionModel.getVulnerabilityIds());
		
		return tableMap(orgId, appId, bean);
	}
	
	@RequestMapping(value="/table/open", method = RequestMethod.POST)
	public @ResponseBody String openTableVulnList(@PathVariable("orgId") Integer orgId,
			@PathVariable("appId") Integer appId,
			@ModelAttribute VulnerabilityCollectionModel vulnerabilityCollectionModel,
            @ModelAttribute TableSortBean bean,
			Model model) throws IOException {

        if (!checkCollectionModel(vulnerabilityCollectionModel, model)) {
            return writer.writeValueAsString(RestResponse.failure("Couldn't complete bulk vulnerability operation."));
        }
		
		vulnerabilityService.openAll(
				vulnerabilityCollectionModel.getVulnerabilityIds());
		
        return tableMap(orgId, appId, bean);
	}
	
	@RequestMapping(value="/falsePositives/mark", method = RequestMethod.POST)
	public @ResponseBody String setVulnsFalsePositive(@PathVariable("orgId") Integer orgId,
			@PathVariable("appId") Integer appId,
			@ModelAttribute VulnerabilityCollectionModel vulnerabilityCollectionModel,
            @ModelAttribute TableSortBean bean,
			Model model) throws IOException {

        if (!checkCollectionModel(vulnerabilityCollectionModel, model)) {
            return writer.writeValueAsString(RestResponse.failure("Couldn't complete bulk vulnerability operation."));
        }
		
		vulnerabilityService.markListAsFalsePositive(vulnerabilityCollectionModel
				.getVulnerabilityIds());

        return tableMap(orgId, appId, bean);
	}

    @RequestMapping(value="/closed/falsePositives/mark", method = RequestMethod.POST)
    public @ResponseBody String setClosedVulnsFalsePositive(@PathVariable("orgId") Integer orgId,
                                        @PathVariable("appId") Integer appId,
                                        @ModelAttribute VulnerabilityCollectionModel vulnerabilityCollectionModel,
                                        @ModelAttribute TableSortBean bean,
                                        Model model) throws IOException {

        if (!checkCollectionModel(vulnerabilityCollectionModel, model)) {
            return writer.writeValueAsString(RestResponse.failure("Couldn't complete bulk vulnerability operation."));
        }

        vulnerabilityService.markListAsFalsePositive(vulnerabilityCollectionModel
                .getVulnerabilityIds());

        return tableMap(orgId, appId, bean);
    }
	
	@RequestMapping(value="/falsePositives/unmark", method = RequestMethod.POST)
	public @ResponseBody String setVulnsNotFalsePositive(@PathVariable("orgId") Integer orgId,
			@PathVariable("appId") Integer appId,
			@ModelAttribute VulnerabilityCollectionModel vulnerabilityCollectionModel,
            @ModelAttribute TableSortBean bean,
			Model model) throws IOException {

        if (!checkCollectionModel(vulnerabilityCollectionModel, model)) {
            return writer.writeValueAsString(RestResponse.failure("Couldn't complete bulk vulnerability operation."));
        }
		
		vulnerabilityService.markListAsNotFalsePositive(vulnerabilityCollectionModel
				.getVulnerabilityIds());

        return tableMap(orgId, appId, bean);
	}

	private boolean checkCollectionModel(VulnerabilityCollectionModel vulnerabilityCollectionModel,
			Model model) {
		if (vulnerabilityCollectionModel == null
				|| vulnerabilityCollectionModel.getVulnerabilityIds() == null
				|| vulnerabilityCollectionModel.getVulnerabilityIds().size() == 0) {
			String error = "You must select at least one vulnerability.";
			model.addAttribute("errorMessage", error);
			model.addAttribute("contentPage", "errorMessage.jsp");
			return false;
		} else {
			return true;
		}
	}
	

}
