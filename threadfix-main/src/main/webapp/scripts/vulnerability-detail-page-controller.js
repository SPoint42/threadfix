var myAppModule = angular.module('threadfix')

myAppModule.controller('VulnerabilityDetailPageController', function ($scope, $window, $http, $rootScope, tfEncoder, $modal, $log) {

    $scope.vulnId  = $window.location.pathname.match(/([0-9]+)$/)[0];
    $scope.teamId = $window.location.pathname.match(/([0-9]+)/)[0];
    $scope.appId = $window.location.pathname.match(/([0-9]+)/g)[1];
    $scope.currentUrl = "/organizations/" + $scope.teamId + "/applications/" + $scope.appId + "/vulnerabilities/" + $scope.vulnId;


    $scope.$on('rootScopeInitialized', function() {

        $scope.refresh();
    });

    $scope.showInfo = function() {
        if ($scope.isShowInfo) {
            $scope.isShowInfo = false;
            $scope.toggleBtnText = 'Toggle More Info';
        } else {
            $scope.isShowInfo = true;
            $scope.toggleBtnText = 'Toggle Hide Info';
        }
    };

    $scope.openCommentModal = function() {

        var modalInstance = $modal.open({
            templateUrl: 'vulnCommentForm.html',
            controller: 'GenericModalController',
            resolve: {
                url: function() {
                    return tfEncoder.encode($scope.currentUrl + "/addComment");
                },
                object: function () {
                    return $scope.vulnerability;
                },
                buttonText: function() {
                    return "Add Comment";
                }
            }
        });

        modalInstance.result.then(function (comments) {
            $scope.successMessage = "Successfully added new comment";
            $scope.vulnerability.vulnerabilityComments = comments;
        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        });
    };

    $scope.openEditFindingModal = function(finding) {

        var modalInstance = $modal.open({
            templateUrl: 'editManualFindingForm.html',
            windowClass: 'wide',
            controller: 'ModalControllerWithConfig',
            resolve: {
                url: function() {
                    return tfEncoder.encode($scope.currentUrl + "/manual/" + finding.id + "/edit");
                },
                object: function() {
                    $scope.config.manualSeverities.forEach(function(severity) {
                        if (severity.name === finding.channelSeverity.name) {
                            finding.channelSeverity = severity;
                        }
                    });
                    if (!finding.dataFlowElements) {
                        finding.dataFlowElements = [];
                    }
                    finding.id = null;
                    return finding;
                },
                config: function() {
                    return $scope.config;
                },
                buttonText: function() {
                    return "Submit Finding";
                }
            }
        });

        $scope.currentModal = modalInstance;

        modalInstance.result.then(function (result) {
            $scope.refresh();
            $scope.successMessage = result;
        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        });


    };

    $scope.goToFinding = function(finding) {
        $window.location.href = tfEncoder.encode("/organizations/" + $scope.teamId + "/applications/" + $scope.appId + "/scans/" + finding.scanId + "/findings/" + finding.id);
    };

    $scope.toggleFinding = function(finding) {
        $scope['isShowFlow' + finding.id] = $scope['isShowFlow' + finding.id] ? false : true;
    };

    $scope.refresh = function() {
        $http.get(tfEncoder.encode($scope.currentUrl + '/table')).
            success(function(data, status, headers, config) {

                if (data.success) {
                    $scope.vulnerability = data.object.vulnerability;
                    $scope.documents = data.object.vulnerability.documents;
                    $scope.findings = data.object.vulnerability.findings;
                    $scope.surfaceLocation = data.object.surfaceLocation;
                    $scope.singleStaticFinding = data.object.singleStaticFinding;
                    $scope.staticFindingList = data.object.staticFindingList;

                    $scope.config = data.object;
                    if (!$scope.config.recentFileList) {
                        $scope.config.recentFileList = [];
                    }
                    if (!$scope.config.recentPathList) {
                        $scope.config.recentPathList = [];
                    }
                } else {
                    $scope.errorMessage = "Failure. Message was : " + data.message;
                }
            }).
            error(function(data, status, headers, config) {
                $scope.errorMessage = "Failed to retrieve waf list. HTTP status was " + status;
            });
    };



});
